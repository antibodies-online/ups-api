<?php
/**
 * PackingListInfoPackageAssociatedTest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  AntibodiesOnline\UpsApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Ship
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the model.
 */

namespace AntibodiesOnline\UpsApi\Test\Model;

use PHPUnit\Framework\TestCase;

/**
 * PackingListInfoPackageAssociatedTest Class Doc Comment
 *
 * @category    Class
 * @description Data Container holding package/product related information that will break up the product into each package on the packing list.  Total product amount must equal the product unit value above. Required for packaging list and Air Freight Packing list.                                                      Packaging list max allowed : 20 Air Freight Packaging list max allowed: 200
 * @package     AntibodiesOnline\UpsApi
 * @author      OpenAPI Generator team
 * @link        https://openapi-generator.tech
 */
class PackingListInfoPackageAssociatedTest extends TestCase
{

    /**
     * Setup before running any test case
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test "PackingListInfoPackageAssociated"
     */
    public function testPackingListInfoPackageAssociated()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "package_number"
     */
    public function testPropertyPackageNumber()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "product_amount"
     */
    public function testPropertyProductAmount()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "product_note"
     */
    public function testPropertyProductNote()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }
}
