<?php
/**
 * PackageResultsShippingLabelTest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  AntibodiesOnline\UpsApi\Shipping
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Ship
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the model.
 */

namespace AntibodiesOnline\UpsApi\Shipping\Test\Model;

use PHPUnit\Framework\TestCase;

/**
 * PackageResultsShippingLabelTest Class Doc Comment
 *
 * @category    Class
 * @description The container for UPS shipping label. Returned for following shipments - Forward shipments, Shipments with PRL returns service,  Electronic Return Label or Electronic Import Control Label shipments with SubVersion greater than or equal to 1707. Shipping label wont be returned if BarCodeImageIndicator is present. Applicable only for ShipmentResponse and ShipAcceptResponse.
 * @package     AntibodiesOnline\UpsApi\Shipping
 * @author      OpenAPI Generator team
 * @link        https://openapi-generator.tech
 */
class PackageResultsShippingLabelTest extends TestCase
{

    /**
     * Setup before running any test case
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test "PackageResultsShippingLabel"
     */
    public function testPackageResultsShippingLabel()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "image_format"
     */
    public function testPropertyImageFormat()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "graphic_image"
     */
    public function testPropertyGraphicImage()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "graphic_image_part"
     */
    public function testPropertyGraphicImagePart()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "international_signature_graphic_image"
     */
    public function testPropertyInternationalSignatureGraphicImage()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "html_image"
     */
    public function testPropertyHtmlImage()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "pdf417"
     */
    public function testPropertyPdf417()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }
}
