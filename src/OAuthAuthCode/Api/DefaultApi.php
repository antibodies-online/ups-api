<?php
/**
 * DefaultApi
 * PHP version 7.4
 *
 * @category Class
 * @package  AntibodiesOnline\UpsApi\OAuthAuthCode
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * OAuth
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace AntibodiesOnline\UpsApi\OAuthAuthCode\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use AntibodiesOnline\UpsApi\OAuthAuthCode\ApiException;
use AntibodiesOnline\UpsApi\OAuthAuthCode\Configuration;
use AntibodiesOnline\UpsApi\OAuthAuthCode\HeaderSelector;
use AntibodiesOnline\UpsApi\OAuthAuthCode\ObjectSerializer;

/**
 * DefaultApi Class Doc Comment
 *
 * @category Class
 * @package  AntibodiesOnline\UpsApi\OAuthAuthCode
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class DefaultApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'authorizeClient' => [
            'application/json',
        ],
        'generateToken' => [
            'application/x-www-form-urlencoded',
        ],
        'refreshToken' => [
            'application/x-www-form-urlencoded',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation authorizeClient
     *
     * Authorize Client
     *
     * @param  string $client_id Client id for the requesting application. (required)
     * @param  string $redirect_uri Callback URL for the requesting application. (required)
     * @param  string $response_type Valid Values: code (required)
     * @param  string $state Optional value supplied by the client, will be returned during the redirection back to the client. Can be utilized to maintain state between Auth-Code request and callback event. (optional)
     * @param  string $scope Optional value supplied by the client, will be returned during the redirection back to the client. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['authorizeClient'] to see the possible values for this operation
     *
     * @throws \AntibodiesOnline\UpsApi\OAuthAuthCode\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function authorizeClient($client_id, $redirect_uri, $response_type, $state = null, $scope = null, string $contentType = self::contentTypes['authorizeClient'][0])
    {
        $this->authorizeClientWithHttpInfo($client_id, $redirect_uri, $response_type, $state, $scope, $contentType);
    }

    /**
     * Operation authorizeClientWithHttpInfo
     *
     * Authorize Client
     *
     * @param  string $client_id Client id for the requesting application. (required)
     * @param  string $redirect_uri Callback URL for the requesting application. (required)
     * @param  string $response_type Valid Values: code (required)
     * @param  string $state Optional value supplied by the client, will be returned during the redirection back to the client. Can be utilized to maintain state between Auth-Code request and callback event. (optional)
     * @param  string $scope Optional value supplied by the client, will be returned during the redirection back to the client. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['authorizeClient'] to see the possible values for this operation
     *
     * @throws \AntibodiesOnline\UpsApi\OAuthAuthCode\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function authorizeClientWithHttpInfo($client_id, $redirect_uri, $response_type, $state = null, $scope = null, string $contentType = self::contentTypes['authorizeClient'][0])
    {
        $request = $this->authorizeClientRequest($client_id, $redirect_uri, $response_type, $state, $scope, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AntibodiesOnline\UpsApi\OAuthAuthCode\Model\TokenErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AntibodiesOnline\UpsApi\OAuthAuthCode\Model\TokenErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation authorizeClientAsync
     *
     * Authorize Client
     *
     * @param  string $client_id Client id for the requesting application. (required)
     * @param  string $redirect_uri Callback URL for the requesting application. (required)
     * @param  string $response_type Valid Values: code (required)
     * @param  string $state Optional value supplied by the client, will be returned during the redirection back to the client. Can be utilized to maintain state between Auth-Code request and callback event. (optional)
     * @param  string $scope Optional value supplied by the client, will be returned during the redirection back to the client. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['authorizeClient'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function authorizeClientAsync($client_id, $redirect_uri, $response_type, $state = null, $scope = null, string $contentType = self::contentTypes['authorizeClient'][0])
    {
        return $this->authorizeClientAsyncWithHttpInfo($client_id, $redirect_uri, $response_type, $state, $scope, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation authorizeClientAsyncWithHttpInfo
     *
     * Authorize Client
     *
     * @param  string $client_id Client id for the requesting application. (required)
     * @param  string $redirect_uri Callback URL for the requesting application. (required)
     * @param  string $response_type Valid Values: code (required)
     * @param  string $state Optional value supplied by the client, will be returned during the redirection back to the client. Can be utilized to maintain state between Auth-Code request and callback event. (optional)
     * @param  string $scope Optional value supplied by the client, will be returned during the redirection back to the client. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['authorizeClient'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function authorizeClientAsyncWithHttpInfo($client_id, $redirect_uri, $response_type, $state = null, $scope = null, string $contentType = self::contentTypes['authorizeClient'][0])
    {
        $returnType = '';
        $request = $this->authorizeClientRequest($client_id, $redirect_uri, $response_type, $state, $scope, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'authorizeClient'
     *
     * @param  string $client_id Client id for the requesting application. (required)
     * @param  string $redirect_uri Callback URL for the requesting application. (required)
     * @param  string $response_type Valid Values: code (required)
     * @param  string $state Optional value supplied by the client, will be returned during the redirection back to the client. Can be utilized to maintain state between Auth-Code request and callback event. (optional)
     * @param  string $scope Optional value supplied by the client, will be returned during the redirection back to the client. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['authorizeClient'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function authorizeClientRequest($client_id, $redirect_uri, $response_type, $state = null, $scope = null, string $contentType = self::contentTypes['authorizeClient'][0])
    {

        // verify the required parameter 'client_id' is set
        if ($client_id === null || (is_array($client_id) && count($client_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_id when calling authorizeClient'
            );
        }

        // verify the required parameter 'redirect_uri' is set
        if ($redirect_uri === null || (is_array($redirect_uri) && count($redirect_uri) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $redirect_uri when calling authorizeClient'
            );
        }

        // verify the required parameter 'response_type' is set
        if ($response_type === null || (is_array($response_type) && count($response_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $response_type when calling authorizeClient'
            );
        }




        $resourcePath = '/security/v1/oauth/authorize';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $client_id,
            'client_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $redirect_uri,
            'redirect_uri', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $response_type,
            'response_type', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $state,
            'state', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $scope,
            'scope', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation generateToken
     *
     * @param  string $grant_type Valid values: authorization_code (required)
     * @param  string $code Authorization code from the UPS login system. (required)
     * @param  string $redirect_uri Callback URL for the requesting application. (required)
     * @param  string $x_merchant_id Client merchant ID (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['generateToken'] to see the possible values for this operation
     *
     * @throws \AntibodiesOnline\UpsApi\OAuthAuthCode\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \AntibodiesOnline\UpsApi\OAuthAuthCode\Model\GenerateTokenSuccessResponse|\AntibodiesOnline\UpsApi\OAuthAuthCode\Model\TokenErrorResponse|\AntibodiesOnline\UpsApi\OAuthAuthCode\Model\TokenErrorResponse|\AntibodiesOnline\UpsApi\OAuthAuthCode\Model\TokenErrorResponse|\AntibodiesOnline\UpsApi\OAuthAuthCode\Model\TokenErrorResponse
     */
    public function generateToken($grant_type, $code, $redirect_uri, $x_merchant_id = null, string $contentType = self::contentTypes['generateToken'][0])
    {
        list($response) = $this->generateTokenWithHttpInfo($grant_type, $code, $redirect_uri, $x_merchant_id, $contentType);
        return $response;
    }

    /**
     * Operation generateTokenWithHttpInfo
     *
     * @param  string $grant_type Valid values: authorization_code (required)
     * @param  string $code Authorization code from the UPS login system. (required)
     * @param  string $redirect_uri Callback URL for the requesting application. (required)
     * @param  string $x_merchant_id Client merchant ID (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['generateToken'] to see the possible values for this operation
     *
     * @throws \AntibodiesOnline\UpsApi\OAuthAuthCode\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \AntibodiesOnline\UpsApi\OAuthAuthCode\Model\GenerateTokenSuccessResponse|\AntibodiesOnline\UpsApi\OAuthAuthCode\Model\TokenErrorResponse|\AntibodiesOnline\UpsApi\OAuthAuthCode\Model\TokenErrorResponse|\AntibodiesOnline\UpsApi\OAuthAuthCode\Model\TokenErrorResponse|\AntibodiesOnline\UpsApi\OAuthAuthCode\Model\TokenErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function generateTokenWithHttpInfo($grant_type, $code, $redirect_uri, $x_merchant_id = null, string $contentType = self::contentTypes['generateToken'][0])
    {
        $request = $this->generateTokenRequest($grant_type, $code, $redirect_uri, $x_merchant_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\AntibodiesOnline\UpsApi\OAuthAuthCode\Model\GenerateTokenSuccessResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\AntibodiesOnline\UpsApi\OAuthAuthCode\Model\GenerateTokenSuccessResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\AntibodiesOnline\UpsApi\OAuthAuthCode\Model\GenerateTokenSuccessResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\AntibodiesOnline\UpsApi\OAuthAuthCode\Model\TokenErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\AntibodiesOnline\UpsApi\OAuthAuthCode\Model\TokenErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\AntibodiesOnline\UpsApi\OAuthAuthCode\Model\TokenErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\AntibodiesOnline\UpsApi\OAuthAuthCode\Model\TokenErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\AntibodiesOnline\UpsApi\OAuthAuthCode\Model\TokenErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\AntibodiesOnline\UpsApi\OAuthAuthCode\Model\TokenErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\AntibodiesOnline\UpsApi\OAuthAuthCode\Model\TokenErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\AntibodiesOnline\UpsApi\OAuthAuthCode\Model\TokenErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\AntibodiesOnline\UpsApi\OAuthAuthCode\Model\TokenErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\AntibodiesOnline\UpsApi\OAuthAuthCode\Model\TokenErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\AntibodiesOnline\UpsApi\OAuthAuthCode\Model\TokenErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\AntibodiesOnline\UpsApi\OAuthAuthCode\Model\TokenErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\AntibodiesOnline\UpsApi\OAuthAuthCode\Model\GenerateTokenSuccessResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AntibodiesOnline\UpsApi\OAuthAuthCode\Model\GenerateTokenSuccessResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AntibodiesOnline\UpsApi\OAuthAuthCode\Model\TokenErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AntibodiesOnline\UpsApi\OAuthAuthCode\Model\TokenErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AntibodiesOnline\UpsApi\OAuthAuthCode\Model\TokenErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AntibodiesOnline\UpsApi\OAuthAuthCode\Model\TokenErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation generateTokenAsync
     *
     * @param  string $grant_type Valid values: authorization_code (required)
     * @param  string $code Authorization code from the UPS login system. (required)
     * @param  string $redirect_uri Callback URL for the requesting application. (required)
     * @param  string $x_merchant_id Client merchant ID (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['generateToken'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function generateTokenAsync($grant_type, $code, $redirect_uri, $x_merchant_id = null, string $contentType = self::contentTypes['generateToken'][0])
    {
        return $this->generateTokenAsyncWithHttpInfo($grant_type, $code, $redirect_uri, $x_merchant_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation generateTokenAsyncWithHttpInfo
     *
     * @param  string $grant_type Valid values: authorization_code (required)
     * @param  string $code Authorization code from the UPS login system. (required)
     * @param  string $redirect_uri Callback URL for the requesting application. (required)
     * @param  string $x_merchant_id Client merchant ID (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['generateToken'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function generateTokenAsyncWithHttpInfo($grant_type, $code, $redirect_uri, $x_merchant_id = null, string $contentType = self::contentTypes['generateToken'][0])
    {
        $returnType = '\AntibodiesOnline\UpsApi\OAuthAuthCode\Model\GenerateTokenSuccessResponse';
        $request = $this->generateTokenRequest($grant_type, $code, $redirect_uri, $x_merchant_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'generateToken'
     *
     * @param  string $grant_type Valid values: authorization_code (required)
     * @param  string $code Authorization code from the UPS login system. (required)
     * @param  string $redirect_uri Callback URL for the requesting application. (required)
     * @param  string $x_merchant_id Client merchant ID (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['generateToken'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function generateTokenRequest($grant_type, $code, $redirect_uri, $x_merchant_id = null, string $contentType = self::contentTypes['generateToken'][0])
    {

        // verify the required parameter 'grant_type' is set
        if ($grant_type === null || (is_array($grant_type) && count($grant_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $grant_type when calling generateToken'
            );
        }

        // verify the required parameter 'code' is set
        if ($code === null || (is_array($code) && count($code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $code when calling generateToken'
            );
        }

        // verify the required parameter 'redirect_uri' is set
        if ($redirect_uri === null || (is_array($redirect_uri) && count($redirect_uri) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $redirect_uri when calling generateToken'
            );
        }



        $resourcePath = '/security/v1/oauth/token';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_merchant_id !== null) {
            $headerParams['x-merchant-id'] = ObjectSerializer::toHeaderValue($x_merchant_id);
        }


        // form params
        if ($grant_type !== null) {
            $formParams['grant_type'] = ObjectSerializer::toFormValue($grant_type);
        }
        // form params
        if ($code !== null) {
            $formParams['code'] = ObjectSerializer::toFormValue($code);
        }
        // form params
        if ($redirect_uri !== null) {
            $formParams['redirect_uri'] = ObjectSerializer::toFormValue($redirect_uri);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation refreshToken
     *
     * Refresh Token
     *
     * @param  string $grant_type Valid values: refresh_token (required)
     * @param  string $refresh_token Refresh token from GenerateToken operation (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['refreshToken'] to see the possible values for this operation
     *
     * @throws \AntibodiesOnline\UpsApi\OAuthAuthCode\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \AntibodiesOnline\UpsApi\OAuthAuthCode\Model\RefreshTokenSuccessResponse|\AntibodiesOnline\UpsApi\OAuthAuthCode\Model\TokenErrorResponse|\AntibodiesOnline\UpsApi\OAuthAuthCode\Model\TokenErrorResponse|\AntibodiesOnline\UpsApi\OAuthAuthCode\Model\TokenErrorResponse
     */
    public function refreshToken($grant_type, $refresh_token, string $contentType = self::contentTypes['refreshToken'][0])
    {
        list($response) = $this->refreshTokenWithHttpInfo($grant_type, $refresh_token, $contentType);
        return $response;
    }

    /**
     * Operation refreshTokenWithHttpInfo
     *
     * Refresh Token
     *
     * @param  string $grant_type Valid values: refresh_token (required)
     * @param  string $refresh_token Refresh token from GenerateToken operation (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['refreshToken'] to see the possible values for this operation
     *
     * @throws \AntibodiesOnline\UpsApi\OAuthAuthCode\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \AntibodiesOnline\UpsApi\OAuthAuthCode\Model\RefreshTokenSuccessResponse|\AntibodiesOnline\UpsApi\OAuthAuthCode\Model\TokenErrorResponse|\AntibodiesOnline\UpsApi\OAuthAuthCode\Model\TokenErrorResponse|\AntibodiesOnline\UpsApi\OAuthAuthCode\Model\TokenErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function refreshTokenWithHttpInfo($grant_type, $refresh_token, string $contentType = self::contentTypes['refreshToken'][0])
    {
        $request = $this->refreshTokenRequest($grant_type, $refresh_token, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\AntibodiesOnline\UpsApi\OAuthAuthCode\Model\RefreshTokenSuccessResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\AntibodiesOnline\UpsApi\OAuthAuthCode\Model\RefreshTokenSuccessResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\AntibodiesOnline\UpsApi\OAuthAuthCode\Model\RefreshTokenSuccessResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\AntibodiesOnline\UpsApi\OAuthAuthCode\Model\TokenErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\AntibodiesOnline\UpsApi\OAuthAuthCode\Model\TokenErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\AntibodiesOnline\UpsApi\OAuthAuthCode\Model\TokenErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\AntibodiesOnline\UpsApi\OAuthAuthCode\Model\TokenErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\AntibodiesOnline\UpsApi\OAuthAuthCode\Model\TokenErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\AntibodiesOnline\UpsApi\OAuthAuthCode\Model\TokenErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\AntibodiesOnline\UpsApi\OAuthAuthCode\Model\TokenErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\AntibodiesOnline\UpsApi\OAuthAuthCode\Model\TokenErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\AntibodiesOnline\UpsApi\OAuthAuthCode\Model\TokenErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\AntibodiesOnline\UpsApi\OAuthAuthCode\Model\RefreshTokenSuccessResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AntibodiesOnline\UpsApi\OAuthAuthCode\Model\RefreshTokenSuccessResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AntibodiesOnline\UpsApi\OAuthAuthCode\Model\TokenErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AntibodiesOnline\UpsApi\OAuthAuthCode\Model\TokenErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AntibodiesOnline\UpsApi\OAuthAuthCode\Model\TokenErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation refreshTokenAsync
     *
     * Refresh Token
     *
     * @param  string $grant_type Valid values: refresh_token (required)
     * @param  string $refresh_token Refresh token from GenerateToken operation (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['refreshToken'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function refreshTokenAsync($grant_type, $refresh_token, string $contentType = self::contentTypes['refreshToken'][0])
    {
        return $this->refreshTokenAsyncWithHttpInfo($grant_type, $refresh_token, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation refreshTokenAsyncWithHttpInfo
     *
     * Refresh Token
     *
     * @param  string $grant_type Valid values: refresh_token (required)
     * @param  string $refresh_token Refresh token from GenerateToken operation (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['refreshToken'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function refreshTokenAsyncWithHttpInfo($grant_type, $refresh_token, string $contentType = self::contentTypes['refreshToken'][0])
    {
        $returnType = '\AntibodiesOnline\UpsApi\OAuthAuthCode\Model\RefreshTokenSuccessResponse';
        $request = $this->refreshTokenRequest($grant_type, $refresh_token, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'refreshToken'
     *
     * @param  string $grant_type Valid values: refresh_token (required)
     * @param  string $refresh_token Refresh token from GenerateToken operation (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['refreshToken'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function refreshTokenRequest($grant_type, $refresh_token, string $contentType = self::contentTypes['refreshToken'][0])
    {

        // verify the required parameter 'grant_type' is set
        if ($grant_type === null || (is_array($grant_type) && count($grant_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $grant_type when calling refreshToken'
            );
        }

        // verify the required parameter 'refresh_token' is set
        if ($refresh_token === null || (is_array($refresh_token) && count($refresh_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $refresh_token when calling refreshToken'
            );
        }


        $resourcePath = '/security/v1/oauth/refresh';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($grant_type !== null) {
            $formParams['grant_type'] = ObjectSerializer::toFormValue($grant_type);
        }
        // form params
        if ($refresh_token !== null) {
            $formParams['refresh_token'] = ObjectSerializer::toFormValue($refresh_token);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
