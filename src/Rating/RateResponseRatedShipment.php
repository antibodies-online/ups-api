<?php
/**
 * RateResponseRatedShipment
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  AntibodiesOnline\UpsApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Rate
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace AntibodiesOnline\UpsApi\Rating;

use \ArrayAccess;
use \AntibodiesOnline\UpsApi\ObjectSerializer;

/**
 * RateResponseRatedShipment Class Doc Comment
 *
 * @category Class
 * @description RatedShipment Container.
 * @package  AntibodiesOnline\UpsApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class RateResponseRatedShipment implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'RateResponse_RatedShipment';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'disclaimer' => '\AntibodiesOnline\UpsApi\Rating\RateResponseRatedShipmentDisclaimer',
        'service' => '\AntibodiesOnline\UpsApi\Rating\RatedShipmentService',
        'rate_chart' => 'string',
        'rated_shipment_alert' => '\AntibodiesOnline\UpsApi\Rating\RateResponseRatedShipmentRatedShipmentAlert',
        'billable_weight_calculation_method' => 'string',
        'rating_method' => 'string',
        'billing_weight' => '\AntibodiesOnline\UpsApi\Rating\RatedShipmentBillingWeight',
        'transportation_charges' => '\AntibodiesOnline\UpsApi\Rating\RatedShipmentTransportationCharges',
        'base_service_charge' => '\AntibodiesOnline\UpsApi\Rating\RatedShipmentBaseServiceCharge',
        'itemized_charges' => '\AntibodiesOnline\UpsApi\Rating\RateResponseRatedShipmentItemizedCharges',
        'frs_shipment_data' => '\AntibodiesOnline\UpsApi\Rating\RatedShipmentFRSShipmentData',
        'service_options_charges' => '\AntibodiesOnline\UpsApi\Rating\RatedShipmentServiceOptionsCharges',
        'tax_charges' => '\AntibodiesOnline\UpsApi\Rating\RateResponseRatedShipmentTaxCharges',
        'total_charges' => '\AntibodiesOnline\UpsApi\Rating\RatedShipmentTotalCharges',
        'total_charges_with_taxes' => '\AntibodiesOnline\UpsApi\Rating\RatedShipmentTotalChargesWithTaxes',
        'negotiated_rate_charges' => '\AntibodiesOnline\UpsApi\Rating\RatedShipmentNegotiatedRateCharges',
        'rated_package' => '\AntibodiesOnline\UpsApi\Rating\RateResponseRatedShipmentRatedPackage',
        'time_in_transit' => '\AntibodiesOnline\UpsApi\Rating\RatedShipmentTimeInTransit',
        'scheduled_delivery_date' => 'string',
        'roar_rated_indicator' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'disclaimer' => null,
        'service' => null,
        'rate_chart' => null,
        'rated_shipment_alert' => null,
        'billable_weight_calculation_method' => null,
        'rating_method' => null,
        'billing_weight' => null,
        'transportation_charges' => null,
        'base_service_charge' => null,
        'itemized_charges' => null,
        'frs_shipment_data' => null,
        'service_options_charges' => null,
        'tax_charges' => null,
        'total_charges' => null,
        'total_charges_with_taxes' => null,
        'negotiated_rate_charges' => null,
        'rated_package' => null,
        'time_in_transit' => null,
        'scheduled_delivery_date' => null,
        'roar_rated_indicator' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'disclaimer' => false,
		'service' => false,
		'rate_chart' => false,
		'rated_shipment_alert' => false,
		'billable_weight_calculation_method' => false,
		'rating_method' => false,
		'billing_weight' => false,
		'transportation_charges' => false,
		'base_service_charge' => false,
		'itemized_charges' => false,
		'frs_shipment_data' => false,
		'service_options_charges' => false,
		'tax_charges' => false,
		'total_charges' => false,
		'total_charges_with_taxes' => false,
		'negotiated_rate_charges' => false,
		'rated_package' => false,
		'time_in_transit' => false,
		'scheduled_delivery_date' => false,
		'roar_rated_indicator' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'disclaimer' => 'Disclaimer',
        'service' => 'Service',
        'rate_chart' => 'RateChart',
        'rated_shipment_alert' => 'RatedShipmentAlert',
        'billable_weight_calculation_method' => 'BillableWeightCalculationMethod',
        'rating_method' => 'RatingMethod',
        'billing_weight' => 'BillingWeight',
        'transportation_charges' => 'TransportationCharges',
        'base_service_charge' => 'BaseServiceCharge',
        'itemized_charges' => 'ItemizedCharges',
        'frs_shipment_data' => 'FRSShipmentData',
        'service_options_charges' => 'ServiceOptionsCharges',
        'tax_charges' => 'TaxCharges',
        'total_charges' => 'TotalCharges',
        'total_charges_with_taxes' => 'TotalChargesWithTaxes',
        'negotiated_rate_charges' => 'NegotiatedRateCharges',
        'rated_package' => 'RatedPackage',
        'time_in_transit' => 'TimeInTransit',
        'scheduled_delivery_date' => 'ScheduledDeliveryDate',
        'roar_rated_indicator' => 'RoarRatedIndicator'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'disclaimer' => 'setDisclaimer',
        'service' => 'setService',
        'rate_chart' => 'setRateChart',
        'rated_shipment_alert' => 'setRatedShipmentAlert',
        'billable_weight_calculation_method' => 'setBillableWeightCalculationMethod',
        'rating_method' => 'setRatingMethod',
        'billing_weight' => 'setBillingWeight',
        'transportation_charges' => 'setTransportationCharges',
        'base_service_charge' => 'setBaseServiceCharge',
        'itemized_charges' => 'setItemizedCharges',
        'frs_shipment_data' => 'setFrsShipmentData',
        'service_options_charges' => 'setServiceOptionsCharges',
        'tax_charges' => 'setTaxCharges',
        'total_charges' => 'setTotalCharges',
        'total_charges_with_taxes' => 'setTotalChargesWithTaxes',
        'negotiated_rate_charges' => 'setNegotiatedRateCharges',
        'rated_package' => 'setRatedPackage',
        'time_in_transit' => 'setTimeInTransit',
        'scheduled_delivery_date' => 'setScheduledDeliveryDate',
        'roar_rated_indicator' => 'setRoarRatedIndicator'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'disclaimer' => 'getDisclaimer',
        'service' => 'getService',
        'rate_chart' => 'getRateChart',
        'rated_shipment_alert' => 'getRatedShipmentAlert',
        'billable_weight_calculation_method' => 'getBillableWeightCalculationMethod',
        'rating_method' => 'getRatingMethod',
        'billing_weight' => 'getBillingWeight',
        'transportation_charges' => 'getTransportationCharges',
        'base_service_charge' => 'getBaseServiceCharge',
        'itemized_charges' => 'getItemizedCharges',
        'frs_shipment_data' => 'getFrsShipmentData',
        'service_options_charges' => 'getServiceOptionsCharges',
        'tax_charges' => 'getTaxCharges',
        'total_charges' => 'getTotalCharges',
        'total_charges_with_taxes' => 'getTotalChargesWithTaxes',
        'negotiated_rate_charges' => 'getNegotiatedRateCharges',
        'rated_package' => 'getRatedPackage',
        'time_in_transit' => 'getTimeInTransit',
        'scheduled_delivery_date' => 'getScheduledDeliveryDate',
        'roar_rated_indicator' => 'getRoarRatedIndicator'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('disclaimer', $data ?? [], null);
        $this->setIfExists('service', $data ?? [], null);
        $this->setIfExists('rate_chart', $data ?? [], null);
        $this->setIfExists('rated_shipment_alert', $data ?? [], null);
        $this->setIfExists('billable_weight_calculation_method', $data ?? [], null);
        $this->setIfExists('rating_method', $data ?? [], null);
        $this->setIfExists('billing_weight', $data ?? [], null);
        $this->setIfExists('transportation_charges', $data ?? [], null);
        $this->setIfExists('base_service_charge', $data ?? [], null);
        $this->setIfExists('itemized_charges', $data ?? [], null);
        $this->setIfExists('frs_shipment_data', $data ?? [], null);
        $this->setIfExists('service_options_charges', $data ?? [], null);
        $this->setIfExists('tax_charges', $data ?? [], null);
        $this->setIfExists('total_charges', $data ?? [], null);
        $this->setIfExists('total_charges_with_taxes', $data ?? [], null);
        $this->setIfExists('negotiated_rate_charges', $data ?? [], null);
        $this->setIfExists('rated_package', $data ?? [], null);
        $this->setIfExists('time_in_transit', $data ?? [], null);
        $this->setIfExists('scheduled_delivery_date', $data ?? [], null);
        $this->setIfExists('roar_rated_indicator', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['service'] === null) {
            $invalidProperties[] = "'service' can't be null";
        }
        if (!is_null($this->container['rate_chart']) && (mb_strlen($this->container['rate_chart']) > 1)) {
            $invalidProperties[] = "invalid value for 'rate_chart', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['rate_chart']) && (mb_strlen($this->container['rate_chart']) < 1)) {
            $invalidProperties[] = "invalid value for 'rate_chart', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['billable_weight_calculation_method']) && (mb_strlen($this->container['billable_weight_calculation_method']) > 2)) {
            $invalidProperties[] = "invalid value for 'billable_weight_calculation_method', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['billable_weight_calculation_method']) && (mb_strlen($this->container['billable_weight_calculation_method']) < 2)) {
            $invalidProperties[] = "invalid value for 'billable_weight_calculation_method', the character length must be bigger than or equal to 2.";
        }

        if (!is_null($this->container['rating_method']) && (mb_strlen($this->container['rating_method']) > 2)) {
            $invalidProperties[] = "invalid value for 'rating_method', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['rating_method']) && (mb_strlen($this->container['rating_method']) < 2)) {
            $invalidProperties[] = "invalid value for 'rating_method', the character length must be bigger than or equal to 2.";
        }

        if ($this->container['billing_weight'] === null) {
            $invalidProperties[] = "'billing_weight' can't be null";
        }
        if ($this->container['transportation_charges'] === null) {
            $invalidProperties[] = "'transportation_charges' can't be null";
        }
        if ($this->container['service_options_charges'] === null) {
            $invalidProperties[] = "'service_options_charges' can't be null";
        }
        if ($this->container['total_charges'] === null) {
            $invalidProperties[] = "'total_charges' can't be null";
        }
        if ($this->container['rated_package'] === null) {
            $invalidProperties[] = "'rated_package' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets disclaimer
     *
     * @return \AntibodiesOnline\UpsApi\Rating\RateResponseRatedShipmentDisclaimer|null
     */
    public function getDisclaimer()
    {
        return $this->container['disclaimer'];
    }

    /**
     * Sets disclaimer
     *
     * @param \AntibodiesOnline\UpsApi\Rating\RateResponseRatedShipmentDisclaimer|null $disclaimer disclaimer
     *
     * @return self
     */
    public function setDisclaimer($disclaimer)
    {
        if (is_null($disclaimer)) {
            throw new \InvalidArgumentException('non-nullable disclaimer cannot be null');
        }
        $this->container['disclaimer'] = $disclaimer;

        return $this;
    }

    /**
     * Gets service
     *
     * @return \AntibodiesOnline\UpsApi\Rating\RatedShipmentService
     */
    public function getService()
    {
        return $this->container['service'];
    }

    /**
     * Sets service
     *
     * @param \AntibodiesOnline\UpsApi\Rating\RatedShipmentService $service service
     *
     * @return self
     */
    public function setService($service)
    {
        if (is_null($service)) {
            throw new \InvalidArgumentException('non-nullable service cannot be null');
        }
        $this->container['service'] = $service;

        return $this;
    }

    /**
     * Gets rate_chart
     *
     * @return string|null
     */
    public function getRateChart()
    {
        return $this->container['rate_chart'];
    }

    /**
     * Sets rate_chart
     *
     * @param string|null $rate_chart Rate Type with which Shipment is rated. Possible RateChart values for different regions will be: US 48 origin: 1 \" Daily Rates 3 \" Standard List Rates 4 \" Retail Rates. Alaska/Hawaii origin:1 \" Daily Rates 3 \" Standard List Rates 4 \" Retail Rates.  All Other origins:1 \" Rates 5 - Regional Rates 6 - General List Rates. 3 and 4 do not apply
     *
     * @return self
     */
    public function setRateChart($rate_chart)
    {
        if (is_null($rate_chart)) {
            throw new \InvalidArgumentException('non-nullable rate_chart cannot be null');
        }
        if ((mb_strlen($rate_chart) > 1)) {
            throw new \InvalidArgumentException('invalid length for $rate_chart when calling RateResponseRatedShipment., must be smaller than or equal to 1.');
        }
        if ((mb_strlen($rate_chart) < 1)) {
            throw new \InvalidArgumentException('invalid length for $rate_chart when calling RateResponseRatedShipment., must be bigger than or equal to 1.');
        }

        $this->container['rate_chart'] = $rate_chart;

        return $this;
    }

    /**
     * Gets rated_shipment_alert
     *
     * @return \AntibodiesOnline\UpsApi\Rating\RateResponseRatedShipmentRatedShipmentAlert|null
     */
    public function getRatedShipmentAlert()
    {
        return $this->container['rated_shipment_alert'];
    }

    /**
     * Sets rated_shipment_alert
     *
     * @param \AntibodiesOnline\UpsApi\Rating\RateResponseRatedShipmentRatedShipmentAlert|null $rated_shipment_alert rated_shipment_alert
     *
     * @return self
     */
    public function setRatedShipmentAlert($rated_shipment_alert)
    {
        if (is_null($rated_shipment_alert)) {
            throw new \InvalidArgumentException('non-nullable rated_shipment_alert cannot be null');
        }
        $this->container['rated_shipment_alert'] = $rated_shipment_alert;

        return $this;
    }

    /**
     * Gets billable_weight_calculation_method
     *
     * @return string|null
     */
    public function getBillableWeightCalculationMethod()
    {
        return $this->container['billable_weight_calculation_method'];
    }

    /**
     * Sets billable_weight_calculation_method
     *
     * @param string|null $billable_weight_calculation_method Indicates whether the billable weight calculation method is utilized at the package or shipment level.  This information will be returned only if RatingMethodRequestedIndicator is present in the request.  Possible values:01 = Shipment Billable Weight02 = Package Billable Weight
     *
     * @return self
     */
    public function setBillableWeightCalculationMethod($billable_weight_calculation_method)
    {
        if (is_null($billable_weight_calculation_method)) {
            throw new \InvalidArgumentException('non-nullable billable_weight_calculation_method cannot be null');
        }
        if ((mb_strlen($billable_weight_calculation_method) > 2)) {
            throw new \InvalidArgumentException('invalid length for $billable_weight_calculation_method when calling RateResponseRatedShipment., must be smaller than or equal to 2.');
        }
        if ((mb_strlen($billable_weight_calculation_method) < 2)) {
            throw new \InvalidArgumentException('invalid length for $billable_weight_calculation_method when calling RateResponseRatedShipment., must be bigger than or equal to 2.');
        }

        $this->container['billable_weight_calculation_method'] = $billable_weight_calculation_method;

        return $this;
    }

    /**
     * Gets rating_method
     *
     * @return string|null
     */
    public function getRatingMethod()
    {
        return $this->container['rating_method'];
    }

    /**
     * Sets rating_method
     *
     * @param string|null $rating_method Indicates whether the Shipment was rated at the shipment-level or the package-level. This information will be returned only if RatingMethodRequestedIndicator is present in the request.  Possible values:01 = Shipment level02 = Package level
     *
     * @return self
     */
    public function setRatingMethod($rating_method)
    {
        if (is_null($rating_method)) {
            throw new \InvalidArgumentException('non-nullable rating_method cannot be null');
        }
        if ((mb_strlen($rating_method) > 2)) {
            throw new \InvalidArgumentException('invalid length for $rating_method when calling RateResponseRatedShipment., must be smaller than or equal to 2.');
        }
        if ((mb_strlen($rating_method) < 2)) {
            throw new \InvalidArgumentException('invalid length for $rating_method when calling RateResponseRatedShipment., must be bigger than or equal to 2.');
        }

        $this->container['rating_method'] = $rating_method;

        return $this;
    }

    /**
     * Gets billing_weight
     *
     * @return \AntibodiesOnline\UpsApi\Rating\RatedShipmentBillingWeight
     */
    public function getBillingWeight()
    {
        return $this->container['billing_weight'];
    }

    /**
     * Sets billing_weight
     *
     * @param \AntibodiesOnline\UpsApi\Rating\RatedShipmentBillingWeight $billing_weight billing_weight
     *
     * @return self
     */
    public function setBillingWeight($billing_weight)
    {
        if (is_null($billing_weight)) {
            throw new \InvalidArgumentException('non-nullable billing_weight cannot be null');
        }
        $this->container['billing_weight'] = $billing_weight;

        return $this;
    }

    /**
     * Gets transportation_charges
     *
     * @return \AntibodiesOnline\UpsApi\Rating\RatedShipmentTransportationCharges
     */
    public function getTransportationCharges()
    {
        return $this->container['transportation_charges'];
    }

    /**
     * Sets transportation_charges
     *
     * @param \AntibodiesOnline\UpsApi\Rating\RatedShipmentTransportationCharges $transportation_charges transportation_charges
     *
     * @return self
     */
    public function setTransportationCharges($transportation_charges)
    {
        if (is_null($transportation_charges)) {
            throw new \InvalidArgumentException('non-nullable transportation_charges cannot be null');
        }
        $this->container['transportation_charges'] = $transportation_charges;

        return $this;
    }

    /**
     * Gets base_service_charge
     *
     * @return \AntibodiesOnline\UpsApi\Rating\RatedShipmentBaseServiceCharge|null
     */
    public function getBaseServiceCharge()
    {
        return $this->container['base_service_charge'];
    }

    /**
     * Sets base_service_charge
     *
     * @param \AntibodiesOnline\UpsApi\Rating\RatedShipmentBaseServiceCharge|null $base_service_charge base_service_charge
     *
     * @return self
     */
    public function setBaseServiceCharge($base_service_charge)
    {
        if (is_null($base_service_charge)) {
            throw new \InvalidArgumentException('non-nullable base_service_charge cannot be null');
        }
        $this->container['base_service_charge'] = $base_service_charge;

        return $this;
    }

    /**
     * Gets itemized_charges
     *
     * @return \AntibodiesOnline\UpsApi\Rating\RateResponseRatedShipmentItemizedCharges|null
     */
    public function getItemizedCharges()
    {
        return $this->container['itemized_charges'];
    }

    /**
     * Sets itemized_charges
     *
     * @param \AntibodiesOnline\UpsApi\Rating\RateResponseRatedShipmentItemizedCharges|null $itemized_charges itemized_charges
     *
     * @return self
     */
    public function setItemizedCharges($itemized_charges)
    {
        if (is_null($itemized_charges)) {
            throw new \InvalidArgumentException('non-nullable itemized_charges cannot be null');
        }
        $this->container['itemized_charges'] = $itemized_charges;

        return $this;
    }

    /**
     * Gets frs_shipment_data
     *
     * @return \AntibodiesOnline\UpsApi\Rating\RatedShipmentFRSShipmentData|null
     */
    public function getFrsShipmentData()
    {
        return $this->container['frs_shipment_data'];
    }

    /**
     * Sets frs_shipment_data
     *
     * @param \AntibodiesOnline\UpsApi\Rating\RatedShipmentFRSShipmentData|null $frs_shipment_data frs_shipment_data
     *
     * @return self
     */
    public function setFrsShipmentData($frs_shipment_data)
    {
        if (is_null($frs_shipment_data)) {
            throw new \InvalidArgumentException('non-nullable frs_shipment_data cannot be null');
        }
        $this->container['frs_shipment_data'] = $frs_shipment_data;

        return $this;
    }

    /**
     * Gets service_options_charges
     *
     * @return \AntibodiesOnline\UpsApi\Rating\RatedShipmentServiceOptionsCharges
     */
    public function getServiceOptionsCharges()
    {
        return $this->container['service_options_charges'];
    }

    /**
     * Sets service_options_charges
     *
     * @param \AntibodiesOnline\UpsApi\Rating\RatedShipmentServiceOptionsCharges $service_options_charges service_options_charges
     *
     * @return self
     */
    public function setServiceOptionsCharges($service_options_charges)
    {
        if (is_null($service_options_charges)) {
            throw new \InvalidArgumentException('non-nullable service_options_charges cannot be null');
        }
        $this->container['service_options_charges'] = $service_options_charges;

        return $this;
    }

    /**
     * Gets tax_charges
     *
     * @return \AntibodiesOnline\UpsApi\Rating\RateResponseRatedShipmentTaxCharges|null
     */
    public function getTaxCharges()
    {
        return $this->container['tax_charges'];
    }

    /**
     * Sets tax_charges
     *
     * @param \AntibodiesOnline\UpsApi\Rating\RateResponseRatedShipmentTaxCharges|null $tax_charges tax_charges
     *
     * @return self
     */
    public function setTaxCharges($tax_charges)
    {
        if (is_null($tax_charges)) {
            throw new \InvalidArgumentException('non-nullable tax_charges cannot be null');
        }
        $this->container['tax_charges'] = $tax_charges;

        return $this;
    }

    /**
     * Gets total_charges
     *
     * @return \AntibodiesOnline\UpsApi\Rating\RatedShipmentTotalCharges
     */
    public function getTotalCharges()
    {
        return $this->container['total_charges'];
    }

    /**
     * Sets total_charges
     *
     * @param \AntibodiesOnline\UpsApi\Rating\RatedShipmentTotalCharges $total_charges total_charges
     *
     * @return self
     */
    public function setTotalCharges($total_charges)
    {
        if (is_null($total_charges)) {
            throw new \InvalidArgumentException('non-nullable total_charges cannot be null');
        }
        $this->container['total_charges'] = $total_charges;

        return $this;
    }

    /**
     * Gets total_charges_with_taxes
     *
     * @return \AntibodiesOnline\UpsApi\Rating\RatedShipmentTotalChargesWithTaxes|null
     */
    public function getTotalChargesWithTaxes()
    {
        return $this->container['total_charges_with_taxes'];
    }

    /**
     * Sets total_charges_with_taxes
     *
     * @param \AntibodiesOnline\UpsApi\Rating\RatedShipmentTotalChargesWithTaxes|null $total_charges_with_taxes total_charges_with_taxes
     *
     * @return self
     */
    public function setTotalChargesWithTaxes($total_charges_with_taxes)
    {
        if (is_null($total_charges_with_taxes)) {
            throw new \InvalidArgumentException('non-nullable total_charges_with_taxes cannot be null');
        }
        $this->container['total_charges_with_taxes'] = $total_charges_with_taxes;

        return $this;
    }

    /**
     * Gets negotiated_rate_charges
     *
     * @return \AntibodiesOnline\UpsApi\Rating\RatedShipmentNegotiatedRateCharges|null
     */
    public function getNegotiatedRateCharges()
    {
        return $this->container['negotiated_rate_charges'];
    }

    /**
     * Sets negotiated_rate_charges
     *
     * @param \AntibodiesOnline\UpsApi\Rating\RatedShipmentNegotiatedRateCharges|null $negotiated_rate_charges negotiated_rate_charges
     *
     * @return self
     */
    public function setNegotiatedRateCharges($negotiated_rate_charges)
    {
        if (is_null($negotiated_rate_charges)) {
            throw new \InvalidArgumentException('non-nullable negotiated_rate_charges cannot be null');
        }
        $this->container['negotiated_rate_charges'] = $negotiated_rate_charges;

        return $this;
    }

    /**
     * Gets rated_package
     *
     * @return \AntibodiesOnline\UpsApi\Rating\RateResponseRatedShipmentRatedPackage
     */
    public function getRatedPackage()
    {
        return $this->container['rated_package'];
    }

    /**
     * Sets rated_package
     *
     * @param \AntibodiesOnline\UpsApi\Rating\RateResponseRatedShipmentRatedPackage $rated_package rated_package
     *
     * @return self
     */
    public function setRatedPackage($rated_package)
    {
        if (is_null($rated_package)) {
            throw new \InvalidArgumentException('non-nullable rated_package cannot be null');
        }
        $this->container['rated_package'] = $rated_package;

        return $this;
    }

    /**
     * Gets time_in_transit
     *
     * @return \AntibodiesOnline\UpsApi\Rating\RatedShipmentTimeInTransit|null
     */
    public function getTimeInTransit()
    {
        return $this->container['time_in_transit'];
    }

    /**
     * Sets time_in_transit
     *
     * @param \AntibodiesOnline\UpsApi\Rating\RatedShipmentTimeInTransit|null $time_in_transit time_in_transit
     *
     * @return self
     */
    public function setTimeInTransit($time_in_transit)
    {
        if (is_null($time_in_transit)) {
            throw new \InvalidArgumentException('non-nullable time_in_transit cannot be null');
        }
        $this->container['time_in_transit'] = $time_in_transit;

        return $this;
    }

    /**
     * Gets scheduled_delivery_date
     *
     * @return string|null
     */
    public function getScheduledDeliveryDate()
    {
        return $this->container['scheduled_delivery_date'];
    }

    /**
     * Sets scheduled_delivery_date
     *
     * @param string|null $scheduled_delivery_date The rated shipments scheduled delivery date, ScheduledDeliveryDate returned only when Subversion of 2205 was sent in the request and the customer has the specific contract.
     *
     * @return self
     */
    public function setScheduledDeliveryDate($scheduled_delivery_date)
    {
        if (is_null($scheduled_delivery_date)) {
            throw new \InvalidArgumentException('non-nullable scheduled_delivery_date cannot be null');
        }


        $this->container['scheduled_delivery_date'] = $scheduled_delivery_date;

        return $this;
    }

    /**
     * Gets roar_rated_indicator
     *
     * @return string|null
     */
    public function getRoarRatedIndicator()
    {
        return $this->container['roar_rated_indicator'];
    }

    /**
     * Sets roar_rated_indicator
     *
     * @param string|null $roar_rated_indicator Informational only
     *
     * @return self
     */
    public function setRoarRatedIndicator($roar_rated_indicator)
    {
        if (is_null($roar_rated_indicator)) {
            throw new \InvalidArgumentException('non-nullable roar_rated_indicator cannot be null');
        }


        $this->container['roar_rated_indicator'] = $roar_rated_indicator;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


