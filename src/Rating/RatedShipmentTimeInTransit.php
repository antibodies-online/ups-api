<?php
/**
 * RatedShipmentTimeInTransit
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  AntibodiesOnline\UpsApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Rate
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace AntibodiesOnline\UpsApi\Rating;

use \ArrayAccess;
use \AntibodiesOnline\UpsApi\ObjectSerializer;

/**
 * RatedShipmentTimeInTransit Class Doc Comment
 *
 * @category Class
 * @description Container for returned Time in Transit information.  Will only be returned if request option was either \&quot;ratetimeintransit\&quot; or \&quot;shoptimeintransit\&quot; and DeliveryTimeInformation container was present in request.
 * @package  AntibodiesOnline\UpsApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class RatedShipmentTimeInTransit implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'RatedShipment_TimeInTransit';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'pickup_date' => 'string',
        'documents_only_indicator' => 'string',
        'package_bill_type' => 'string',
        'service_summary' => '\AntibodiesOnline\UpsApi\Rating\TimeInTransitServiceSummary',
        'auto_duty_code' => 'string',
        'disclaimer' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'pickup_date' => null,
        'documents_only_indicator' => null,
        'package_bill_type' => null,
        'service_summary' => null,
        'auto_duty_code' => null,
        'disclaimer' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'pickup_date' => false,
		'documents_only_indicator' => false,
		'package_bill_type' => false,
		'service_summary' => false,
		'auto_duty_code' => false,
		'disclaimer' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'pickup_date' => 'PickupDate',
        'documents_only_indicator' => 'DocumentsOnlyIndicator',
        'package_bill_type' => 'PackageBillType',
        'service_summary' => 'ServiceSummary',
        'auto_duty_code' => 'AutoDutyCode',
        'disclaimer' => 'Disclaimer'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'pickup_date' => 'setPickupDate',
        'documents_only_indicator' => 'setDocumentsOnlyIndicator',
        'package_bill_type' => 'setPackageBillType',
        'service_summary' => 'setServiceSummary',
        'auto_duty_code' => 'setAutoDutyCode',
        'disclaimer' => 'setDisclaimer'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'pickup_date' => 'getPickupDate',
        'documents_only_indicator' => 'getDocumentsOnlyIndicator',
        'package_bill_type' => 'getPackageBillType',
        'service_summary' => 'getServiceSummary',
        'auto_duty_code' => 'getAutoDutyCode',
        'disclaimer' => 'getDisclaimer'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('pickup_date', $data ?? [], null);
        $this->setIfExists('documents_only_indicator', $data ?? [], null);
        $this->setIfExists('package_bill_type', $data ?? [], null);
        $this->setIfExists('service_summary', $data ?? [], null);
        $this->setIfExists('auto_duty_code', $data ?? [], null);
        $this->setIfExists('disclaimer', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['pickup_date'] === null) {
            $invalidProperties[] = "'pickup_date' can't be null";
        }
        if ((mb_strlen($this->container['pickup_date']) > 8)) {
            $invalidProperties[] = "invalid value for 'pickup_date', the character length must be smaller than or equal to 8.";
        }

        if ((mb_strlen($this->container['pickup_date']) < 8)) {
            $invalidProperties[] = "invalid value for 'pickup_date', the character length must be bigger than or equal to 8.";
        }

        if (!is_null($this->container['package_bill_type']) && (mb_strlen($this->container['package_bill_type']) > 2)) {
            $invalidProperties[] = "invalid value for 'package_bill_type', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['package_bill_type']) && (mb_strlen($this->container['package_bill_type']) < 2)) {
            $invalidProperties[] = "invalid value for 'package_bill_type', the character length must be bigger than or equal to 2.";
        }

        if ($this->container['service_summary'] === null) {
            $invalidProperties[] = "'service_summary' can't be null";
        }
        if (!is_null($this->container['auto_duty_code']) && (mb_strlen($this->container['auto_duty_code']) > 2)) {
            $invalidProperties[] = "invalid value for 'auto_duty_code', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['auto_duty_code']) && (mb_strlen($this->container['auto_duty_code']) < 2)) {
            $invalidProperties[] = "invalid value for 'auto_duty_code', the character length must be bigger than or equal to 2.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets pickup_date
     *
     * @return string
     */
    public function getPickupDate()
    {
        return $this->container['pickup_date'];
    }

    /**
     * Sets pickup_date
     *
     * @param string $pickup_date The date the user requests UPS to pickup the package from the origin. Format: YYYYMMDD. In the event this Pickup date differs from the Pickup date in the Estimated Arrival Container, a warning will be returned.  In the event this Pickup date differs from the Pickup date in the Estimated Arrival Container, a warning will be returned.
     *
     * @return self
     */
    public function setPickupDate($pickup_date)
    {
        if (is_null($pickup_date)) {
            throw new \InvalidArgumentException('non-nullable pickup_date cannot be null');
        }
        if ((mb_strlen($pickup_date) > 8)) {
            throw new \InvalidArgumentException('invalid length for $pickup_date when calling RatedShipmentTimeInTransit., must be smaller than or equal to 8.');
        }
        if ((mb_strlen($pickup_date) < 8)) {
            throw new \InvalidArgumentException('invalid length for $pickup_date when calling RatedShipmentTimeInTransit., must be bigger than or equal to 8.');
        }

        $this->container['pickup_date'] = $pickup_date;

        return $this;
    }

    /**
     * Gets documents_only_indicator
     *
     * @return string|null
     */
    public function getDocumentsOnlyIndicator()
    {
        return $this->container['documents_only_indicator'];
    }

    /**
     * Sets documents_only_indicator
     *
     * @param string|null $documents_only_indicator If the indicator is present then the shipment was processed as Document Only.
     *
     * @return self
     */
    public function setDocumentsOnlyIndicator($documents_only_indicator)
    {
        if (is_null($documents_only_indicator)) {
            throw new \InvalidArgumentException('non-nullable documents_only_indicator cannot be null');
        }


        $this->container['documents_only_indicator'] = $documents_only_indicator;

        return $this;
    }

    /**
     * Gets package_bill_type
     *
     * @return string|null
     */
    public function getPackageBillType()
    {
        return $this->container['package_bill_type'];
    }

    /**
     * Sets package_bill_type
     *
     * @param string|null $package_bill_type Package bill type for the shipment. Valid values:02 - Document only 03 - Non-Document04 - Pallet
     *
     * @return self
     */
    public function setPackageBillType($package_bill_type)
    {
        if (is_null($package_bill_type)) {
            throw new \InvalidArgumentException('non-nullable package_bill_type cannot be null');
        }
        if ((mb_strlen($package_bill_type) > 2)) {
            throw new \InvalidArgumentException('invalid length for $package_bill_type when calling RatedShipmentTimeInTransit., must be smaller than or equal to 2.');
        }
        if ((mb_strlen($package_bill_type) < 2)) {
            throw new \InvalidArgumentException('invalid length for $package_bill_type when calling RatedShipmentTimeInTransit., must be bigger than or equal to 2.');
        }

        $this->container['package_bill_type'] = $package_bill_type;

        return $this;
    }

    /**
     * Gets service_summary
     *
     * @return \AntibodiesOnline\UpsApi\Rating\TimeInTransitServiceSummary
     */
    public function getServiceSummary()
    {
        return $this->container['service_summary'];
    }

    /**
     * Sets service_summary
     *
     * @param \AntibodiesOnline\UpsApi\Rating\TimeInTransitServiceSummary $service_summary service_summary
     *
     * @return self
     */
    public function setServiceSummary($service_summary)
    {
        if (is_null($service_summary)) {
            throw new \InvalidArgumentException('non-nullable service_summary cannot be null');
        }
        $this->container['service_summary'] = $service_summary;

        return $this;
    }

    /**
     * Gets auto_duty_code
     *
     * @return string|null
     */
    public function getAutoDutyCode()
    {
        return $this->container['auto_duty_code'];
    }

    /**
     * Sets auto_duty_code
     *
     * @param string|null $auto_duty_code Required output for International requests. If Documents indicator is set for Non-document a duty is automatically calculated. The possible values to be returned are: 01 - Dutiable02 - Non-Dutiable03 - Low-value04 - Courier Remission05 - Gift06 - Military07 - Exception08 - Line Release09 - Section 321 low value.
     *
     * @return self
     */
    public function setAutoDutyCode($auto_duty_code)
    {
        if (is_null($auto_duty_code)) {
            throw new \InvalidArgumentException('non-nullable auto_duty_code cannot be null');
        }
        if ((mb_strlen($auto_duty_code) > 2)) {
            throw new \InvalidArgumentException('invalid length for $auto_duty_code when calling RatedShipmentTimeInTransit., must be smaller than or equal to 2.');
        }
        if ((mb_strlen($auto_duty_code) < 2)) {
            throw new \InvalidArgumentException('invalid length for $auto_duty_code when calling RatedShipmentTimeInTransit., must be bigger than or equal to 2.');
        }

        $this->container['auto_duty_code'] = $auto_duty_code;

        return $this;
    }

    /**
     * Gets disclaimer
     *
     * @return string|null
     */
    public function getDisclaimer()
    {
        return $this->container['disclaimer'];
    }

    /**
     * Sets disclaimer
     *
     * @param string|null $disclaimer The Disclaimer is provided based upon the origin and destination country or territory codes provided in the request document. The possible disclaimers that can be returned are available in the Service Guaranteed Disclaimers table.
     *
     * @return self
     */
    public function setDisclaimer($disclaimer)
    {
        if (is_null($disclaimer)) {
            throw new \InvalidArgumentException('non-nullable disclaimer cannot be null');
        }


        $this->container['disclaimer'] = $disclaimer;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


