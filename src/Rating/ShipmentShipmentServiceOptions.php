<?php
/**
 * ShipmentShipmentServiceOptions
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  AntibodiesOnline\UpsApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Rate
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace AntibodiesOnline\UpsApi\Rating;

use \ArrayAccess;
use \AntibodiesOnline\UpsApi\ObjectSerializer;

/**
 * ShipmentShipmentServiceOptions Class Doc Comment
 *
 * @category Class
 * @description Shipment level Accessorials are included in this container.  N/A
 * @package  AntibodiesOnline\UpsApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ShipmentShipmentServiceOptions implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Shipment_ShipmentServiceOptions';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'saturday_pickup_indicator' => 'string',
        'saturday_delivery_indicator' => 'string',
        'sunday_delivery_indicator' => 'string',
        'available_services_option' => 'string',
        'access_point_cod' => '\AntibodiesOnline\UpsApi\Rating\ShipmentServiceOptionsAccessPointCOD',
        'deliver_to_addressee_only_indicator' => 'string',
        'direct_delivery_only_indicator' => 'string',
        'cod' => '\AntibodiesOnline\UpsApi\Rating\ShipmentServiceOptionsCOD',
        'delivery_confirmation' => '\AntibodiesOnline\UpsApi\Rating\ShipmentServiceOptionsDeliveryConfirmation',
        'return_of_document_indicator' => 'string',
        'up_scarbonneutral_indicator' => 'string',
        'certificate_of_origin_indicator' => 'string',
        'pickup_options' => '\AntibodiesOnline\UpsApi\Rating\ShipmentServiceOptionsPickupOptions',
        'delivery_options' => '\AntibodiesOnline\UpsApi\Rating\ShipmentServiceOptionsDeliveryOptions',
        'restricted_articles' => '\AntibodiesOnline\UpsApi\Rating\ShipmentServiceOptionsRestrictedArticles',
        'shipper_export_declaration_indicator' => 'string',
        'commercial_invoice_removal_indicator' => 'string',
        'import_control' => '\AntibodiesOnline\UpsApi\Rating\ShipmentServiceOptionsImportControl',
        'return_service' => '\AntibodiesOnline\UpsApi\Rating\ShipmentServiceOptionsReturnService',
        'sdl_shipment_indicator' => 'string',
        'epra_indicator' => 'string',
        'inside_delivery' => 'string',
        'item_disposal_indicator' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'saturday_pickup_indicator' => null,
        'saturday_delivery_indicator' => null,
        'sunday_delivery_indicator' => null,
        'available_services_option' => null,
        'access_point_cod' => null,
        'deliver_to_addressee_only_indicator' => null,
        'direct_delivery_only_indicator' => null,
        'cod' => null,
        'delivery_confirmation' => null,
        'return_of_document_indicator' => null,
        'up_scarbonneutral_indicator' => null,
        'certificate_of_origin_indicator' => null,
        'pickup_options' => null,
        'delivery_options' => null,
        'restricted_articles' => null,
        'shipper_export_declaration_indicator' => null,
        'commercial_invoice_removal_indicator' => null,
        'import_control' => null,
        'return_service' => null,
        'sdl_shipment_indicator' => null,
        'epra_indicator' => null,
        'inside_delivery' => null,
        'item_disposal_indicator' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'saturday_pickup_indicator' => false,
		'saturday_delivery_indicator' => false,
		'sunday_delivery_indicator' => false,
		'available_services_option' => false,
		'access_point_cod' => false,
		'deliver_to_addressee_only_indicator' => false,
		'direct_delivery_only_indicator' => false,
		'cod' => false,
		'delivery_confirmation' => false,
		'return_of_document_indicator' => false,
		'up_scarbonneutral_indicator' => false,
		'certificate_of_origin_indicator' => false,
		'pickup_options' => false,
		'delivery_options' => false,
		'restricted_articles' => false,
		'shipper_export_declaration_indicator' => false,
		'commercial_invoice_removal_indicator' => false,
		'import_control' => false,
		'return_service' => false,
		'sdl_shipment_indicator' => false,
		'epra_indicator' => false,
		'inside_delivery' => false,
		'item_disposal_indicator' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'saturday_pickup_indicator' => 'SaturdayPickupIndicator',
        'saturday_delivery_indicator' => 'SaturdayDeliveryIndicator',
        'sunday_delivery_indicator' => 'SundayDeliveryIndicator',
        'available_services_option' => 'AvailableServicesOption',
        'access_point_cod' => 'AccessPointCOD',
        'deliver_to_addressee_only_indicator' => 'DeliverToAddresseeOnlyIndicator',
        'direct_delivery_only_indicator' => 'DirectDeliveryOnlyIndicator',
        'cod' => 'COD',
        'delivery_confirmation' => 'DeliveryConfirmation',
        'return_of_document_indicator' => 'ReturnOfDocumentIndicator',
        'up_scarbonneutral_indicator' => 'UPScarbonneutralIndicator',
        'certificate_of_origin_indicator' => 'CertificateOfOriginIndicator',
        'pickup_options' => 'PickupOptions',
        'delivery_options' => 'DeliveryOptions',
        'restricted_articles' => 'RestrictedArticles',
        'shipper_export_declaration_indicator' => 'ShipperExportDeclarationIndicator',
        'commercial_invoice_removal_indicator' => 'CommercialInvoiceRemovalIndicator',
        'import_control' => 'ImportControl',
        'return_service' => 'ReturnService',
        'sdl_shipment_indicator' => 'SDLShipmentIndicator',
        'epra_indicator' => 'EPRAIndicator',
        'inside_delivery' => 'InsideDelivery',
        'item_disposal_indicator' => 'ItemDisposalIndicator'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'saturday_pickup_indicator' => 'setSaturdayPickupIndicator',
        'saturday_delivery_indicator' => 'setSaturdayDeliveryIndicator',
        'sunday_delivery_indicator' => 'setSundayDeliveryIndicator',
        'available_services_option' => 'setAvailableServicesOption',
        'access_point_cod' => 'setAccessPointCod',
        'deliver_to_addressee_only_indicator' => 'setDeliverToAddresseeOnlyIndicator',
        'direct_delivery_only_indicator' => 'setDirectDeliveryOnlyIndicator',
        'cod' => 'setCod',
        'delivery_confirmation' => 'setDeliveryConfirmation',
        'return_of_document_indicator' => 'setReturnOfDocumentIndicator',
        'up_scarbonneutral_indicator' => 'setUpScarbonneutralIndicator',
        'certificate_of_origin_indicator' => 'setCertificateOfOriginIndicator',
        'pickup_options' => 'setPickupOptions',
        'delivery_options' => 'setDeliveryOptions',
        'restricted_articles' => 'setRestrictedArticles',
        'shipper_export_declaration_indicator' => 'setShipperExportDeclarationIndicator',
        'commercial_invoice_removal_indicator' => 'setCommercialInvoiceRemovalIndicator',
        'import_control' => 'setImportControl',
        'return_service' => 'setReturnService',
        'sdl_shipment_indicator' => 'setSdlShipmentIndicator',
        'epra_indicator' => 'setEpraIndicator',
        'inside_delivery' => 'setInsideDelivery',
        'item_disposal_indicator' => 'setItemDisposalIndicator'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'saturday_pickup_indicator' => 'getSaturdayPickupIndicator',
        'saturday_delivery_indicator' => 'getSaturdayDeliveryIndicator',
        'sunday_delivery_indicator' => 'getSundayDeliveryIndicator',
        'available_services_option' => 'getAvailableServicesOption',
        'access_point_cod' => 'getAccessPointCod',
        'deliver_to_addressee_only_indicator' => 'getDeliverToAddresseeOnlyIndicator',
        'direct_delivery_only_indicator' => 'getDirectDeliveryOnlyIndicator',
        'cod' => 'getCod',
        'delivery_confirmation' => 'getDeliveryConfirmation',
        'return_of_document_indicator' => 'getReturnOfDocumentIndicator',
        'up_scarbonneutral_indicator' => 'getUpScarbonneutralIndicator',
        'certificate_of_origin_indicator' => 'getCertificateOfOriginIndicator',
        'pickup_options' => 'getPickupOptions',
        'delivery_options' => 'getDeliveryOptions',
        'restricted_articles' => 'getRestrictedArticles',
        'shipper_export_declaration_indicator' => 'getShipperExportDeclarationIndicator',
        'commercial_invoice_removal_indicator' => 'getCommercialInvoiceRemovalIndicator',
        'import_control' => 'getImportControl',
        'return_service' => 'getReturnService',
        'sdl_shipment_indicator' => 'getSdlShipmentIndicator',
        'epra_indicator' => 'getEpraIndicator',
        'inside_delivery' => 'getInsideDelivery',
        'item_disposal_indicator' => 'getItemDisposalIndicator'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('saturday_pickup_indicator', $data ?? [], null);
        $this->setIfExists('saturday_delivery_indicator', $data ?? [], null);
        $this->setIfExists('sunday_delivery_indicator', $data ?? [], null);
        $this->setIfExists('available_services_option', $data ?? [], null);
        $this->setIfExists('access_point_cod', $data ?? [], null);
        $this->setIfExists('deliver_to_addressee_only_indicator', $data ?? [], null);
        $this->setIfExists('direct_delivery_only_indicator', $data ?? [], null);
        $this->setIfExists('cod', $data ?? [], null);
        $this->setIfExists('delivery_confirmation', $data ?? [], null);
        $this->setIfExists('return_of_document_indicator', $data ?? [], null);
        $this->setIfExists('up_scarbonneutral_indicator', $data ?? [], null);
        $this->setIfExists('certificate_of_origin_indicator', $data ?? [], null);
        $this->setIfExists('pickup_options', $data ?? [], null);
        $this->setIfExists('delivery_options', $data ?? [], null);
        $this->setIfExists('restricted_articles', $data ?? [], null);
        $this->setIfExists('shipper_export_declaration_indicator', $data ?? [], null);
        $this->setIfExists('commercial_invoice_removal_indicator', $data ?? [], null);
        $this->setIfExists('import_control', $data ?? [], null);
        $this->setIfExists('return_service', $data ?? [], null);
        $this->setIfExists('sdl_shipment_indicator', $data ?? [], null);
        $this->setIfExists('epra_indicator', $data ?? [], null);
        $this->setIfExists('inside_delivery', $data ?? [], null);
        $this->setIfExists('item_disposal_indicator', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['available_services_option']) && (mb_strlen($this->container['available_services_option']) > 1)) {
            $invalidProperties[] = "invalid value for 'available_services_option', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['available_services_option']) && (mb_strlen($this->container['available_services_option']) < 1)) {
            $invalidProperties[] = "invalid value for 'available_services_option', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['inside_delivery']) && (mb_strlen($this->container['inside_delivery']) > 2)) {
            $invalidProperties[] = "invalid value for 'inside_delivery', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['inside_delivery']) && (mb_strlen($this->container['inside_delivery']) < 2)) {
            $invalidProperties[] = "invalid value for 'inside_delivery', the character length must be bigger than or equal to 2.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets saturday_pickup_indicator
     *
     * @return string|null
     */
    public function getSaturdayPickupIndicator()
    {
        return $this->container['saturday_pickup_indicator'];
    }

    /**
     * Sets saturday_pickup_indicator
     *
     * @param string|null $saturday_pickup_indicator A flag indicating if the shipment requires a Saturday pickup. True if SaturdayPickupIndicator tag exists; false otherwise. Not available for GFP rating requests.  Empty Tag.
     *
     * @return self
     */
    public function setSaturdayPickupIndicator($saturday_pickup_indicator)
    {
        if (is_null($saturday_pickup_indicator)) {
            throw new \InvalidArgumentException('non-nullable saturday_pickup_indicator cannot be null');
        }


        $this->container['saturday_pickup_indicator'] = $saturday_pickup_indicator;

        return $this;
    }

    /**
     * Gets saturday_delivery_indicator
     *
     * @return string|null
     */
    public function getSaturdayDeliveryIndicator()
    {
        return $this->container['saturday_delivery_indicator'];
    }

    /**
     * Sets saturday_delivery_indicator
     *
     * @param string|null $saturday_delivery_indicator A flag indicating if a shipment must be delivered on a Saturday. True if SaturdayDeliveryIndicator tag exists; false otherwise  Empty Tag.
     *
     * @return self
     */
    public function setSaturdayDeliveryIndicator($saturday_delivery_indicator)
    {
        if (is_null($saturday_delivery_indicator)) {
            throw new \InvalidArgumentException('non-nullable saturday_delivery_indicator cannot be null');
        }


        $this->container['saturday_delivery_indicator'] = $saturday_delivery_indicator;

        return $this;
    }

    /**
     * Gets sunday_delivery_indicator
     *
     * @return string|null
     */
    public function getSundayDeliveryIndicator()
    {
        return $this->container['sunday_delivery_indicator'];
    }

    /**
     * Sets sunday_delivery_indicator
     *
     * @param string|null $sunday_delivery_indicator A flag indicating if a shipment must be delivered on a Sunday. True if SundayDeliveryIndicator tag exists; false otherwise  Empty Tag.
     *
     * @return self
     */
    public function setSundayDeliveryIndicator($sunday_delivery_indicator)
    {
        if (is_null($sunday_delivery_indicator)) {
            throw new \InvalidArgumentException('non-nullable sunday_delivery_indicator cannot be null');
        }


        $this->container['sunday_delivery_indicator'] = $sunday_delivery_indicator;

        return $this;
    }

    /**
     * Gets available_services_option
     *
     * @return string|null
     */
    public function getAvailableServicesOption()
    {
        return $this->container['available_services_option'];
    }

    /**
     * Sets available_services_option
     *
     * @param string|null $available_services_option If we need diferent available services in response, this option is used for shop request option. SaturdayDeliveryIndicator/ SundayDeliveryIndicator will be ignored in that case.  Valid Values:1- Weekday+Saturday services2- Weekday+Sunday services3- Weekday+Sat services+Sun services
     *
     * @return self
     */
    public function setAvailableServicesOption($available_services_option)
    {
        if (is_null($available_services_option)) {
            throw new \InvalidArgumentException('non-nullable available_services_option cannot be null');
        }
        if ((mb_strlen($available_services_option) > 1)) {
            throw new \InvalidArgumentException('invalid length for $available_services_option when calling ShipmentShipmentServiceOptions., must be smaller than or equal to 1.');
        }
        if ((mb_strlen($available_services_option) < 1)) {
            throw new \InvalidArgumentException('invalid length for $available_services_option when calling ShipmentShipmentServiceOptions., must be bigger than or equal to 1.');
        }

        $this->container['available_services_option'] = $available_services_option;

        return $this;
    }

    /**
     * Gets access_point_cod
     *
     * @return \AntibodiesOnline\UpsApi\Rating\ShipmentServiceOptionsAccessPointCOD|null
     */
    public function getAccessPointCod()
    {
        return $this->container['access_point_cod'];
    }

    /**
     * Sets access_point_cod
     *
     * @param \AntibodiesOnline\UpsApi\Rating\ShipmentServiceOptionsAccessPointCOD|null $access_point_cod access_point_cod
     *
     * @return self
     */
    public function setAccessPointCod($access_point_cod)
    {
        if (is_null($access_point_cod)) {
            throw new \InvalidArgumentException('non-nullable access_point_cod cannot be null');
        }
        $this->container['access_point_cod'] = $access_point_cod;

        return $this;
    }

    /**
     * Gets deliver_to_addressee_only_indicator
     *
     * @return string|null
     */
    public function getDeliverToAddresseeOnlyIndicator()
    {
        return $this->container['deliver_to_addressee_only_indicator'];
    }

    /**
     * Sets deliver_to_addressee_only_indicator
     *
     * @param string|null $deliver_to_addressee_only_indicator Presence/Absence Indicator. Any value inside is ignored. DeliverToAddresseeOnlyIndicator is shipper specified restriction that requires the addressee to be the one who takes final delivery of the \"Hold For PickUp at UPS Access Point package.  Presence of indicator means shipper restriction will apply to the shipment.  Only valid for Shipment Indication type \"01 - Hold For PickUp at UPS Access Point.
     *
     * @return self
     */
    public function setDeliverToAddresseeOnlyIndicator($deliver_to_addressee_only_indicator)
    {
        if (is_null($deliver_to_addressee_only_indicator)) {
            throw new \InvalidArgumentException('non-nullable deliver_to_addressee_only_indicator cannot be null');
        }


        $this->container['deliver_to_addressee_only_indicator'] = $deliver_to_addressee_only_indicator;

        return $this;
    }

    /**
     * Gets direct_delivery_only_indicator
     *
     * @return string|null
     */
    public function getDirectDeliveryOnlyIndicator()
    {
        return $this->container['direct_delivery_only_indicator'];
    }

    /**
     * Sets direct_delivery_only_indicator
     *
     * @param string|null $direct_delivery_only_indicator Presence/Absence Indicator. Any value inside is ignored. Direct Delivery Only (DDO) accessorial in a request would ensure that delivery is made only to the Ship To address on the shipping label.  This accessorial is not valid with Shipment Indication Types:01 - Hold For Pickup At UPS Access Point 02 - UPS Access Point Delivery\"
     *
     * @return self
     */
    public function setDirectDeliveryOnlyIndicator($direct_delivery_only_indicator)
    {
        if (is_null($direct_delivery_only_indicator)) {
            throw new \InvalidArgumentException('non-nullable direct_delivery_only_indicator cannot be null');
        }


        $this->container['direct_delivery_only_indicator'] = $direct_delivery_only_indicator;

        return $this;
    }

    /**
     * Gets cod
     *
     * @return \AntibodiesOnline\UpsApi\Rating\ShipmentServiceOptionsCOD|null
     */
    public function getCod()
    {
        return $this->container['cod'];
    }

    /**
     * Sets cod
     *
     * @param \AntibodiesOnline\UpsApi\Rating\ShipmentServiceOptionsCOD|null $cod cod
     *
     * @return self
     */
    public function setCod($cod)
    {
        if (is_null($cod)) {
            throw new \InvalidArgumentException('non-nullable cod cannot be null');
        }
        $this->container['cod'] = $cod;

        return $this;
    }

    /**
     * Gets delivery_confirmation
     *
     * @return \AntibodiesOnline\UpsApi\Rating\ShipmentServiceOptionsDeliveryConfirmation|null
     */
    public function getDeliveryConfirmation()
    {
        return $this->container['delivery_confirmation'];
    }

    /**
     * Sets delivery_confirmation
     *
     * @param \AntibodiesOnline\UpsApi\Rating\ShipmentServiceOptionsDeliveryConfirmation|null $delivery_confirmation delivery_confirmation
     *
     * @return self
     */
    public function setDeliveryConfirmation($delivery_confirmation)
    {
        if (is_null($delivery_confirmation)) {
            throw new \InvalidArgumentException('non-nullable delivery_confirmation cannot be null');
        }
        $this->container['delivery_confirmation'] = $delivery_confirmation;

        return $this;
    }

    /**
     * Gets return_of_document_indicator
     *
     * @return string|null
     */
    public function getReturnOfDocumentIndicator()
    {
        return $this->container['return_of_document_indicator'];
    }

    /**
     * Sets return_of_document_indicator
     *
     * @param string|null $return_of_document_indicator Return of Documents Indicator - If the flag is present, the shipper has requested the ReturnOfDocument accessorial be added to the shipment  Valid for Poland to Poland shipment.
     *
     * @return self
     */
    public function setReturnOfDocumentIndicator($return_of_document_indicator)
    {
        if (is_null($return_of_document_indicator)) {
            throw new \InvalidArgumentException('non-nullable return_of_document_indicator cannot be null');
        }


        $this->container['return_of_document_indicator'] = $return_of_document_indicator;

        return $this;
    }

    /**
     * Gets up_scarbonneutral_indicator
     *
     * @return string|null
     */
    public function getUpScarbonneutralIndicator()
    {
        return $this->container['up_scarbonneutral_indicator'];
    }

    /**
     * Sets up_scarbonneutral_indicator
     *
     * @param string|null $up_scarbonneutral_indicator UPS carbon neutral indicator. Indicates the shipment will be rated as carbon neutral.
     *
     * @return self
     */
    public function setUpScarbonneutralIndicator($up_scarbonneutral_indicator)
    {
        if (is_null($up_scarbonneutral_indicator)) {
            throw new \InvalidArgumentException('non-nullable up_scarbonneutral_indicator cannot be null');
        }


        $this->container['up_scarbonneutral_indicator'] = $up_scarbonneutral_indicator;

        return $this;
    }

    /**
     * Gets certificate_of_origin_indicator
     *
     * @return string|null
     */
    public function getCertificateOfOriginIndicator()
    {
        return $this->container['certificate_of_origin_indicator'];
    }

    /**
     * Sets certificate_of_origin_indicator
     *
     * @param string|null $certificate_of_origin_indicator The empty tag in request indicates that customer would be using UPS prepared SED form.  Valid for UPS World Wide Express Freight shipments.
     *
     * @return self
     */
    public function setCertificateOfOriginIndicator($certificate_of_origin_indicator)
    {
        if (is_null($certificate_of_origin_indicator)) {
            throw new \InvalidArgumentException('non-nullable certificate_of_origin_indicator cannot be null');
        }


        $this->container['certificate_of_origin_indicator'] = $certificate_of_origin_indicator;

        return $this;
    }

    /**
     * Gets pickup_options
     *
     * @return \AntibodiesOnline\UpsApi\Rating\ShipmentServiceOptionsPickupOptions|null
     */
    public function getPickupOptions()
    {
        return $this->container['pickup_options'];
    }

    /**
     * Sets pickup_options
     *
     * @param \AntibodiesOnline\UpsApi\Rating\ShipmentServiceOptionsPickupOptions|null $pickup_options pickup_options
     *
     * @return self
     */
    public function setPickupOptions($pickup_options)
    {
        if (is_null($pickup_options)) {
            throw new \InvalidArgumentException('non-nullable pickup_options cannot be null');
        }
        $this->container['pickup_options'] = $pickup_options;

        return $this;
    }

    /**
     * Gets delivery_options
     *
     * @return \AntibodiesOnline\UpsApi\Rating\ShipmentServiceOptionsDeliveryOptions|null
     */
    public function getDeliveryOptions()
    {
        return $this->container['delivery_options'];
    }

    /**
     * Sets delivery_options
     *
     * @param \AntibodiesOnline\UpsApi\Rating\ShipmentServiceOptionsDeliveryOptions|null $delivery_options delivery_options
     *
     * @return self
     */
    public function setDeliveryOptions($delivery_options)
    {
        if (is_null($delivery_options)) {
            throw new \InvalidArgumentException('non-nullable delivery_options cannot be null');
        }
        $this->container['delivery_options'] = $delivery_options;

        return $this;
    }

    /**
     * Gets restricted_articles
     *
     * @return \AntibodiesOnline\UpsApi\Rating\ShipmentServiceOptionsRestrictedArticles|null
     */
    public function getRestrictedArticles()
    {
        return $this->container['restricted_articles'];
    }

    /**
     * Sets restricted_articles
     *
     * @param \AntibodiesOnline\UpsApi\Rating\ShipmentServiceOptionsRestrictedArticles|null $restricted_articles restricted_articles
     *
     * @return self
     */
    public function setRestrictedArticles($restricted_articles)
    {
        if (is_null($restricted_articles)) {
            throw new \InvalidArgumentException('non-nullable restricted_articles cannot be null');
        }
        $this->container['restricted_articles'] = $restricted_articles;

        return $this;
    }

    /**
     * Gets shipper_export_declaration_indicator
     *
     * @return string|null
     */
    public function getShipperExportDeclarationIndicator()
    {
        return $this->container['shipper_export_declaration_indicator'];
    }

    /**
     * Sets shipper_export_declaration_indicator
     *
     * @param string|null $shipper_export_declaration_indicator The empty tag in request indicates that customer would be using UPS prepared SED form.  Valid for UPS World Wide Express Freight shipments.
     *
     * @return self
     */
    public function setShipperExportDeclarationIndicator($shipper_export_declaration_indicator)
    {
        if (is_null($shipper_export_declaration_indicator)) {
            throw new \InvalidArgumentException('non-nullable shipper_export_declaration_indicator cannot be null');
        }


        $this->container['shipper_export_declaration_indicator'] = $shipper_export_declaration_indicator;

        return $this;
    }

    /**
     * Gets commercial_invoice_removal_indicator
     *
     * @return string|null
     */
    public function getCommercialInvoiceRemovalIndicator()
    {
        return $this->container['commercial_invoice_removal_indicator'];
    }

    /**
     * Sets commercial_invoice_removal_indicator
     *
     * @param string|null $commercial_invoice_removal_indicator Presence/Absence Indicator. Any value inside is ignored. CommercialInvoiceRemovalIndicator - empty tag means indicator is present. CommercialInvoiceRemovalIndicator allows a shipper to dictate that UPS remove the Commercial Invoice from the user's shipment before the shipment is delivered to the ultimate consignee.
     *
     * @return self
     */
    public function setCommercialInvoiceRemovalIndicator($commercial_invoice_removal_indicator)
    {
        if (is_null($commercial_invoice_removal_indicator)) {
            throw new \InvalidArgumentException('non-nullable commercial_invoice_removal_indicator cannot be null');
        }


        $this->container['commercial_invoice_removal_indicator'] = $commercial_invoice_removal_indicator;

        return $this;
    }

    /**
     * Gets import_control
     *
     * @return \AntibodiesOnline\UpsApi\Rating\ShipmentServiceOptionsImportControl|null
     */
    public function getImportControl()
    {
        return $this->container['import_control'];
    }

    /**
     * Sets import_control
     *
     * @param \AntibodiesOnline\UpsApi\Rating\ShipmentServiceOptionsImportControl|null $import_control import_control
     *
     * @return self
     */
    public function setImportControl($import_control)
    {
        if (is_null($import_control)) {
            throw new \InvalidArgumentException('non-nullable import_control cannot be null');
        }
        $this->container['import_control'] = $import_control;

        return $this;
    }

    /**
     * Gets return_service
     *
     * @return \AntibodiesOnline\UpsApi\Rating\ShipmentServiceOptionsReturnService|null
     */
    public function getReturnService()
    {
        return $this->container['return_service'];
    }

    /**
     * Sets return_service
     *
     * @param \AntibodiesOnline\UpsApi\Rating\ShipmentServiceOptionsReturnService|null $return_service return_service
     *
     * @return self
     */
    public function setReturnService($return_service)
    {
        if (is_null($return_service)) {
            throw new \InvalidArgumentException('non-nullable return_service cannot be null');
        }
        $this->container['return_service'] = $return_service;

        return $this;
    }

    /**
     * Gets sdl_shipment_indicator
     *
     * @return string|null
     */
    public function getSdlShipmentIndicator()
    {
        return $this->container['sdl_shipment_indicator'];
    }

    /**
     * Sets sdl_shipment_indicator
     *
     * @param string|null $sdl_shipment_indicator Empty Tag means the indicator is present. This field is a flag to indicate if the receiver needs SDL rates in response. True if SDLShipmentIndicator tag exists; false otherwise.  If present, the State Department License (SDL) rates will be returned in the response.This service requires that the account number is enabled for SDL.
     *
     * @return self
     */
    public function setSdlShipmentIndicator($sdl_shipment_indicator)
    {
        if (is_null($sdl_shipment_indicator)) {
            throw new \InvalidArgumentException('non-nullable sdl_shipment_indicator cannot be null');
        }


        $this->container['sdl_shipment_indicator'] = $sdl_shipment_indicator;

        return $this;
    }

    /**
     * Gets epra_indicator
     *
     * @return string|null
     */
    public function getEpraIndicator()
    {
        return $this->container['epra_indicator'];
    }

    /**
     * Sets epra_indicator
     *
     * @param string|null $epra_indicator Presence/Absence Indicator. Any value inside is ignored. This field is a flag to indicate Package Release Code is requested for shipment. This accessorial is only valid with ShipmentIndicationType \"01\" - Hold for Pickup at UPS Access Point.
     *
     * @return self
     */
    public function setEpraIndicator($epra_indicator)
    {
        if (is_null($epra_indicator)) {
            throw new \InvalidArgumentException('non-nullable epra_indicator cannot be null');
        }


        $this->container['epra_indicator'] = $epra_indicator;

        return $this;
    }

    /**
     * Gets inside_delivery
     *
     * @return string|null
     */
    public function getInsideDelivery()
    {
        return $this->container['inside_delivery'];
    }

    /**
     * Sets inside_delivery
     *
     * @param string|null $inside_delivery Inside Delivery accessory. Valide values:                                         01- White Glove                        02 - Room of Choice                   03 - Installation  Shippers account needs to have a valid contract for Heavy Goods Service.
     *
     * @return self
     */
    public function setInsideDelivery($inside_delivery)
    {
        if (is_null($inside_delivery)) {
            throw new \InvalidArgumentException('non-nullable inside_delivery cannot be null');
        }
        if ((mb_strlen($inside_delivery) > 2)) {
            throw new \InvalidArgumentException('invalid length for $inside_delivery when calling ShipmentShipmentServiceOptions., must be smaller than or equal to 2.');
        }
        if ((mb_strlen($inside_delivery) < 2)) {
            throw new \InvalidArgumentException('invalid length for $inside_delivery when calling ShipmentShipmentServiceOptions., must be bigger than or equal to 2.');
        }

        $this->container['inside_delivery'] = $inside_delivery;

        return $this;
    }

    /**
     * Gets item_disposal_indicator
     *
     * @return string|null
     */
    public function getItemDisposalIndicator()
    {
        return $this->container['item_disposal_indicator'];
    }

    /**
     * Sets item_disposal_indicator
     *
     * @param string|null $item_disposal_indicator Presence/Absence Indicator. Any value inside is ignored. If present, indicates that the customer would like items disposed.   Shippers account needs to have a valid contract for Heavy Goods Service.
     *
     * @return self
     */
    public function setItemDisposalIndicator($item_disposal_indicator)
    {
        if (is_null($item_disposal_indicator)) {
            throw new \InvalidArgumentException('non-nullable item_disposal_indicator cannot be null');
        }


        $this->container['item_disposal_indicator'] = $item_disposal_indicator;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


