<?php
/**
 * RateRequestShipment
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  AntibodiesOnline\UpsApi\Rating
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Rate
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace AntibodiesOnline\UpsApi\Rating\Model;

use \ArrayAccess;
use \AntibodiesOnline\UpsApi\Rating\ObjectSerializer;

/**
 * RateRequestShipment Class Doc Comment
 *
 * @category Class
 * @description Container for Shipment Information.  N/A
 * @package  AntibodiesOnline\UpsApi\Rating
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class RateRequestShipment implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'RateRequest_Shipment';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'origin_record_transaction_timestamp' => 'string',
        'shipper' => '\AntibodiesOnline\UpsApi\Rating\Model\ShipmentShipper',
        'ship_to' => '\AntibodiesOnline\UpsApi\Rating\Model\ShipmentShipTo',
        'ship_from' => '\AntibodiesOnline\UpsApi\Rating\Model\ShipmentShipFrom',
        'alternate_delivery_address' => '\AntibodiesOnline\UpsApi\Rating\Model\ShipmentAlternateDeliveryAddress',
        'shipment_indication_type' => '\AntibodiesOnline\UpsApi\Rating\Model\ShipmentShipmentIndicationType[]',
        'payment_details' => '\AntibodiesOnline\UpsApi\Rating\Model\ShipmentPaymentDetails',
        'frs_payment_information' => '\AntibodiesOnline\UpsApi\Rating\Model\ShipmentFRSPaymentInformation',
        'freight_shipment_information' => '\AntibodiesOnline\UpsApi\Rating\Model\ShipmentFreightShipmentInformation',
        'goods_not_in_free_circulation_indicator' => 'string',
        'service' => '\AntibodiesOnline\UpsApi\Rating\Model\ShipmentService',
        'num_of_pieces' => 'string',
        'shipment_total_weight' => '\AntibodiesOnline\UpsApi\Rating\Model\ShipmentShipmentTotalWeight',
        'documents_only_indicator' => 'string',
        'package' => '\AntibodiesOnline\UpsApi\Rating\Model\ShipmentPackage[]',
        'shipment_service_options' => '\AntibodiesOnline\UpsApi\Rating\Model\ShipmentShipmentServiceOptions',
        'shipment_rating_options' => '\AntibodiesOnline\UpsApi\Rating\Model\ShipmentShipmentRatingOptions',
        'invoice_line_total' => '\AntibodiesOnline\UpsApi\Rating\Model\ShipmentInvoiceLineTotal',
        'rating_method_requested_indicator' => 'string',
        'tax_information_indicator' => 'string',
        'promotional_discount_information' => '\AntibodiesOnline\UpsApi\Rating\Model\ShipmentPromotionalDiscountInformation',
        'delivery_time_information' => '\AntibodiesOnline\UpsApi\Rating\Model\ShipmentDeliveryTimeInformation',
        'master_carton_indicator' => 'string',
        'wwe_shipment_indicator' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'origin_record_transaction_timestamp' => null,
        'shipper' => null,
        'ship_to' => null,
        'ship_from' => null,
        'alternate_delivery_address' => null,
        'shipment_indication_type' => null,
        'payment_details' => null,
        'frs_payment_information' => null,
        'freight_shipment_information' => null,
        'goods_not_in_free_circulation_indicator' => null,
        'service' => null,
        'num_of_pieces' => null,
        'shipment_total_weight' => null,
        'documents_only_indicator' => null,
        'package' => null,
        'shipment_service_options' => null,
        'shipment_rating_options' => null,
        'invoice_line_total' => null,
        'rating_method_requested_indicator' => null,
        'tax_information_indicator' => null,
        'promotional_discount_information' => null,
        'delivery_time_information' => null,
        'master_carton_indicator' => null,
        'wwe_shipment_indicator' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'origin_record_transaction_timestamp' => false,
		'shipper' => false,
		'ship_to' => false,
		'ship_from' => false,
		'alternate_delivery_address' => false,
		'shipment_indication_type' => false,
		'payment_details' => false,
		'frs_payment_information' => false,
		'freight_shipment_information' => false,
		'goods_not_in_free_circulation_indicator' => false,
		'service' => false,
		'num_of_pieces' => false,
		'shipment_total_weight' => false,
		'documents_only_indicator' => false,
		'package' => false,
		'shipment_service_options' => false,
		'shipment_rating_options' => false,
		'invoice_line_total' => false,
		'rating_method_requested_indicator' => false,
		'tax_information_indicator' => false,
		'promotional_discount_information' => false,
		'delivery_time_information' => false,
		'master_carton_indicator' => false,
		'wwe_shipment_indicator' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'origin_record_transaction_timestamp' => 'OriginRecordTransactionTimestamp',
        'shipper' => 'Shipper',
        'ship_to' => 'ShipTo',
        'ship_from' => 'ShipFrom',
        'alternate_delivery_address' => 'AlternateDeliveryAddress',
        'shipment_indication_type' => 'ShipmentIndicationType',
        'payment_details' => 'PaymentDetails',
        'frs_payment_information' => 'FRSPaymentInformation',
        'freight_shipment_information' => 'FreightShipmentInformation',
        'goods_not_in_free_circulation_indicator' => 'GoodsNotInFreeCirculationIndicator',
        'service' => 'Service',
        'num_of_pieces' => 'NumOfPieces',
        'shipment_total_weight' => 'ShipmentTotalWeight',
        'documents_only_indicator' => 'DocumentsOnlyIndicator',
        'package' => 'Package',
        'shipment_service_options' => 'ShipmentServiceOptions',
        'shipment_rating_options' => 'ShipmentRatingOptions',
        'invoice_line_total' => 'InvoiceLineTotal',
        'rating_method_requested_indicator' => 'RatingMethodRequestedIndicator',
        'tax_information_indicator' => 'TaxInformationIndicator',
        'promotional_discount_information' => 'PromotionalDiscountInformation',
        'delivery_time_information' => 'DeliveryTimeInformation',
        'master_carton_indicator' => 'MasterCartonIndicator',
        'wwe_shipment_indicator' => 'WWEShipmentIndicator'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'origin_record_transaction_timestamp' => 'setOriginRecordTransactionTimestamp',
        'shipper' => 'setShipper',
        'ship_to' => 'setShipTo',
        'ship_from' => 'setShipFrom',
        'alternate_delivery_address' => 'setAlternateDeliveryAddress',
        'shipment_indication_type' => 'setShipmentIndicationType',
        'payment_details' => 'setPaymentDetails',
        'frs_payment_information' => 'setFrsPaymentInformation',
        'freight_shipment_information' => 'setFreightShipmentInformation',
        'goods_not_in_free_circulation_indicator' => 'setGoodsNotInFreeCirculationIndicator',
        'service' => 'setService',
        'num_of_pieces' => 'setNumOfPieces',
        'shipment_total_weight' => 'setShipmentTotalWeight',
        'documents_only_indicator' => 'setDocumentsOnlyIndicator',
        'package' => 'setPackage',
        'shipment_service_options' => 'setShipmentServiceOptions',
        'shipment_rating_options' => 'setShipmentRatingOptions',
        'invoice_line_total' => 'setInvoiceLineTotal',
        'rating_method_requested_indicator' => 'setRatingMethodRequestedIndicator',
        'tax_information_indicator' => 'setTaxInformationIndicator',
        'promotional_discount_information' => 'setPromotionalDiscountInformation',
        'delivery_time_information' => 'setDeliveryTimeInformation',
        'master_carton_indicator' => 'setMasterCartonIndicator',
        'wwe_shipment_indicator' => 'setWweShipmentIndicator'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'origin_record_transaction_timestamp' => 'getOriginRecordTransactionTimestamp',
        'shipper' => 'getShipper',
        'ship_to' => 'getShipTo',
        'ship_from' => 'getShipFrom',
        'alternate_delivery_address' => 'getAlternateDeliveryAddress',
        'shipment_indication_type' => 'getShipmentIndicationType',
        'payment_details' => 'getPaymentDetails',
        'frs_payment_information' => 'getFrsPaymentInformation',
        'freight_shipment_information' => 'getFreightShipmentInformation',
        'goods_not_in_free_circulation_indicator' => 'getGoodsNotInFreeCirculationIndicator',
        'service' => 'getService',
        'num_of_pieces' => 'getNumOfPieces',
        'shipment_total_weight' => 'getShipmentTotalWeight',
        'documents_only_indicator' => 'getDocumentsOnlyIndicator',
        'package' => 'getPackage',
        'shipment_service_options' => 'getShipmentServiceOptions',
        'shipment_rating_options' => 'getShipmentRatingOptions',
        'invoice_line_total' => 'getInvoiceLineTotal',
        'rating_method_requested_indicator' => 'getRatingMethodRequestedIndicator',
        'tax_information_indicator' => 'getTaxInformationIndicator',
        'promotional_discount_information' => 'getPromotionalDiscountInformation',
        'delivery_time_information' => 'getDeliveryTimeInformation',
        'master_carton_indicator' => 'getMasterCartonIndicator',
        'wwe_shipment_indicator' => 'getWweShipmentIndicator'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('origin_record_transaction_timestamp', $data ?? [], null);
        $this->setIfExists('shipper', $data ?? [], null);
        $this->setIfExists('ship_to', $data ?? [], null);
        $this->setIfExists('ship_from', $data ?? [], null);
        $this->setIfExists('alternate_delivery_address', $data ?? [], null);
        $this->setIfExists('shipment_indication_type', $data ?? [], null);
        $this->setIfExists('payment_details', $data ?? [], null);
        $this->setIfExists('frs_payment_information', $data ?? [], null);
        $this->setIfExists('freight_shipment_information', $data ?? [], null);
        $this->setIfExists('goods_not_in_free_circulation_indicator', $data ?? [], null);
        $this->setIfExists('service', $data ?? [], null);
        $this->setIfExists('num_of_pieces', $data ?? [], null);
        $this->setIfExists('shipment_total_weight', $data ?? [], null);
        $this->setIfExists('documents_only_indicator', $data ?? [], null);
        $this->setIfExists('package', $data ?? [], null);
        $this->setIfExists('shipment_service_options', $data ?? [], null);
        $this->setIfExists('shipment_rating_options', $data ?? [], null);
        $this->setIfExists('invoice_line_total', $data ?? [], null);
        $this->setIfExists('rating_method_requested_indicator', $data ?? [], null);
        $this->setIfExists('tax_information_indicator', $data ?? [], null);
        $this->setIfExists('promotional_discount_information', $data ?? [], null);
        $this->setIfExists('delivery_time_information', $data ?? [], null);
        $this->setIfExists('master_carton_indicator', $data ?? [], null);
        $this->setIfExists('wwe_shipment_indicator', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['shipper'] === null) {
            $invalidProperties[] = "'shipper' can't be null";
        }
        if ($this->container['ship_to'] === null) {
            $invalidProperties[] = "'ship_to' can't be null";
        }
        if ($this->container['package'] === null) {
            $invalidProperties[] = "'package' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets origin_record_transaction_timestamp
     *
     * @return string|null
     */
    public function getOriginRecordTransactionTimestamp()
    {
        return $this->container['origin_record_transaction_timestamp'];
    }

    /**
     * Sets origin_record_transaction_timestamp
     *
     * @param string|null $origin_record_transaction_timestamp The time that the request was made from the originating system. UTC time down to milliseconds. Example - 2016-07-14T12:01:33.999  Applicable only for HazMat request and with subversion greater than or equal to 1701.
     *
     * @return self
     */
    public function setOriginRecordTransactionTimestamp($origin_record_transaction_timestamp)
    {
        if (is_null($origin_record_transaction_timestamp)) {
            throw new \InvalidArgumentException('non-nullable origin_record_transaction_timestamp cannot be null');
        }


        $this->container['origin_record_transaction_timestamp'] = $origin_record_transaction_timestamp;

        return $this;
    }

    /**
     * Gets shipper
     *
     * @return \AntibodiesOnline\UpsApi\Rating\Model\ShipmentShipper
     */
    public function getShipper()
    {
        return $this->container['shipper'];
    }

    /**
     * Sets shipper
     *
     * @param \AntibodiesOnline\UpsApi\Rating\Model\ShipmentShipper $shipper shipper
     *
     * @return self
     */
    public function setShipper($shipper)
    {
        if (is_null($shipper)) {
            throw new \InvalidArgumentException('non-nullable shipper cannot be null');
        }
        $this->container['shipper'] = $shipper;

        return $this;
    }

    /**
     * Gets ship_to
     *
     * @return \AntibodiesOnline\UpsApi\Rating\Model\ShipmentShipTo
     */
    public function getShipTo()
    {
        return $this->container['ship_to'];
    }

    /**
     * Sets ship_to
     *
     * @param \AntibodiesOnline\UpsApi\Rating\Model\ShipmentShipTo $ship_to ship_to
     *
     * @return self
     */
    public function setShipTo($ship_to)
    {
        if (is_null($ship_to)) {
            throw new \InvalidArgumentException('non-nullable ship_to cannot be null');
        }
        $this->container['ship_to'] = $ship_to;

        return $this;
    }

    /**
     * Gets ship_from
     *
     * @return \AntibodiesOnline\UpsApi\Rating\Model\ShipmentShipFrom|null
     */
    public function getShipFrom()
    {
        return $this->container['ship_from'];
    }

    /**
     * Sets ship_from
     *
     * @param \AntibodiesOnline\UpsApi\Rating\Model\ShipmentShipFrom|null $ship_from ship_from
     *
     * @return self
     */
    public function setShipFrom($ship_from)
    {
        if (is_null($ship_from)) {
            throw new \InvalidArgumentException('non-nullable ship_from cannot be null');
        }
        $this->container['ship_from'] = $ship_from;

        return $this;
    }

    /**
     * Gets alternate_delivery_address
     *
     * @return \AntibodiesOnline\UpsApi\Rating\Model\ShipmentAlternateDeliveryAddress|null
     */
    public function getAlternateDeliveryAddress()
    {
        return $this->container['alternate_delivery_address'];
    }

    /**
     * Sets alternate_delivery_address
     *
     * @param \AntibodiesOnline\UpsApi\Rating\Model\ShipmentAlternateDeliveryAddress|null $alternate_delivery_address alternate_delivery_address
     *
     * @return self
     */
    public function setAlternateDeliveryAddress($alternate_delivery_address)
    {
        if (is_null($alternate_delivery_address)) {
            throw new \InvalidArgumentException('non-nullable alternate_delivery_address cannot be null');
        }
        $this->container['alternate_delivery_address'] = $alternate_delivery_address;

        return $this;
    }

    /**
     * Gets shipment_indication_type
     *
     * @return \AntibodiesOnline\UpsApi\Rating\Model\ShipmentShipmentIndicationType[]|null
     */
    public function getShipmentIndicationType()
    {
        return $this->container['shipment_indication_type'];
    }

    /**
     * Sets shipment_indication_type
     *
     * @param \AntibodiesOnline\UpsApi\Rating\Model\ShipmentShipmentIndicationType[]|null $shipment_indication_type shipment_indication_type
     *
     * @return self
     */
    public function setShipmentIndicationType($shipment_indication_type)
    {
        if (is_null($shipment_indication_type)) {
            throw new \InvalidArgumentException('non-nullable shipment_indication_type cannot be null');
        }
        $this->container['shipment_indication_type'] = $shipment_indication_type;

        return $this;
    }

    /**
     * Gets payment_details
     *
     * @return \AntibodiesOnline\UpsApi\Rating\Model\ShipmentPaymentDetails|null
     */
    public function getPaymentDetails()
    {
        return $this->container['payment_details'];
    }

    /**
     * Sets payment_details
     *
     * @param \AntibodiesOnline\UpsApi\Rating\Model\ShipmentPaymentDetails|null $payment_details payment_details
     *
     * @return self
     */
    public function setPaymentDetails($payment_details)
    {
        if (is_null($payment_details)) {
            throw new \InvalidArgumentException('non-nullable payment_details cannot be null');
        }
        $this->container['payment_details'] = $payment_details;

        return $this;
    }

    /**
     * Gets frs_payment_information
     *
     * @return \AntibodiesOnline\UpsApi\Rating\Model\ShipmentFRSPaymentInformation|null
     */
    public function getFrsPaymentInformation()
    {
        return $this->container['frs_payment_information'];
    }

    /**
     * Sets frs_payment_information
     *
     * @param \AntibodiesOnline\UpsApi\Rating\Model\ShipmentFRSPaymentInformation|null $frs_payment_information frs_payment_information
     *
     * @return self
     */
    public function setFrsPaymentInformation($frs_payment_information)
    {
        if (is_null($frs_payment_information)) {
            throw new \InvalidArgumentException('non-nullable frs_payment_information cannot be null');
        }
        $this->container['frs_payment_information'] = $frs_payment_information;

        return $this;
    }

    /**
     * Gets freight_shipment_information
     *
     * @return \AntibodiesOnline\UpsApi\Rating\Model\ShipmentFreightShipmentInformation|null
     */
    public function getFreightShipmentInformation()
    {
        return $this->container['freight_shipment_information'];
    }

    /**
     * Sets freight_shipment_information
     *
     * @param \AntibodiesOnline\UpsApi\Rating\Model\ShipmentFreightShipmentInformation|null $freight_shipment_information freight_shipment_information
     *
     * @return self
     */
    public function setFreightShipmentInformation($freight_shipment_information)
    {
        if (is_null($freight_shipment_information)) {
            throw new \InvalidArgumentException('non-nullable freight_shipment_information cannot be null');
        }
        $this->container['freight_shipment_information'] = $freight_shipment_information;

        return $this;
    }

    /**
     * Gets goods_not_in_free_circulation_indicator
     *
     * @return string|null
     */
    public function getGoodsNotInFreeCirculationIndicator()
    {
        return $this->container['goods_not_in_free_circulation_indicator'];
    }

    /**
     * Sets goods_not_in_free_circulation_indicator
     *
     * @param string|null $goods_not_in_free_circulation_indicator Goods Not In Free Circulation indicator.  This is an empty tag, any value inside is ignored. This indicator is invalid for a package type of UPS Letter and DocumentsOnly.
     *
     * @return self
     */
    public function setGoodsNotInFreeCirculationIndicator($goods_not_in_free_circulation_indicator)
    {
        if (is_null($goods_not_in_free_circulation_indicator)) {
            throw new \InvalidArgumentException('non-nullable goods_not_in_free_circulation_indicator cannot be null');
        }


        $this->container['goods_not_in_free_circulation_indicator'] = $goods_not_in_free_circulation_indicator;

        return $this;
    }

    /**
     * Gets service
     *
     * @return \AntibodiesOnline\UpsApi\Rating\Model\ShipmentService|null
     */
    public function getService()
    {
        return $this->container['service'];
    }

    /**
     * Sets service
     *
     * @param \AntibodiesOnline\UpsApi\Rating\Model\ShipmentService|null $service service
     *
     * @return self
     */
    public function setService($service)
    {
        if (is_null($service)) {
            throw new \InvalidArgumentException('non-nullable service cannot be null');
        }
        $this->container['service'] = $service;

        return $this;
    }

    /**
     * Gets num_of_pieces
     *
     * @return string|null
     */
    public function getNumOfPieces()
    {
        return $this->container['num_of_pieces'];
    }

    /**
     * Sets num_of_pieces
     *
     * @param string|null $num_of_pieces Total number of pieces in all pallets. Required for UPS Worldwide Express Freight and UPS Worldwide Express Freight Midday shipments.
     *
     * @return self
     */
    public function setNumOfPieces($num_of_pieces)
    {
        if (is_null($num_of_pieces)) {
            throw new \InvalidArgumentException('non-nullable num_of_pieces cannot be null');
        }
        $this->container['num_of_pieces'] = $num_of_pieces;

        return $this;
    }

    /**
     * Gets shipment_total_weight
     *
     * @return \AntibodiesOnline\UpsApi\Rating\Model\ShipmentShipmentTotalWeight|null
     */
    public function getShipmentTotalWeight()
    {
        return $this->container['shipment_total_weight'];
    }

    /**
     * Sets shipment_total_weight
     *
     * @param \AntibodiesOnline\UpsApi\Rating\Model\ShipmentShipmentTotalWeight|null $shipment_total_weight shipment_total_weight
     *
     * @return self
     */
    public function setShipmentTotalWeight($shipment_total_weight)
    {
        if (is_null($shipment_total_weight)) {
            throw new \InvalidArgumentException('non-nullable shipment_total_weight cannot be null');
        }
        $this->container['shipment_total_weight'] = $shipment_total_weight;

        return $this;
    }

    /**
     * Gets documents_only_indicator
     *
     * @return string|null
     */
    public function getDocumentsOnlyIndicator()
    {
        return $this->container['documents_only_indicator'];
    }

    /**
     * Sets documents_only_indicator
     *
     * @param string|null $documents_only_indicator Valid values are Document and Non-document. If the indicator is present then the value is Document else Non-Document. Note: Not applicable for FRS rating  requests.  Empty Tag.
     *
     * @return self
     */
    public function setDocumentsOnlyIndicator($documents_only_indicator)
    {
        if (is_null($documents_only_indicator)) {
            throw new \InvalidArgumentException('non-nullable documents_only_indicator cannot be null');
        }
        $this->container['documents_only_indicator'] = $documents_only_indicator;

        return $this;
    }

    /**
     * Gets package
     *
     * @return \AntibodiesOnline\UpsApi\Rating\Model\ShipmentPackage[]
     */
    public function getPackage()
    {
        return $this->container['package'];
    }

    /**
     * Sets package
     *
     * @param \AntibodiesOnline\UpsApi\Rating\Model\ShipmentPackage[] $package package
     *
     * @return self
     */
    public function setPackage($package)
    {
        if (is_null($package)) {
            throw new \InvalidArgumentException('non-nullable package cannot be null');
        }


        $this->container['package'] = $package;

        return $this;
    }

    /**
     * Gets shipment_service_options
     *
     * @return \AntibodiesOnline\UpsApi\Rating\Model\ShipmentShipmentServiceOptions|null
     */
    public function getShipmentServiceOptions()
    {
        return $this->container['shipment_service_options'];
    }

    /**
     * Sets shipment_service_options
     *
     * @param \AntibodiesOnline\UpsApi\Rating\Model\ShipmentShipmentServiceOptions|null $shipment_service_options shipment_service_options
     *
     * @return self
     */
    public function setShipmentServiceOptions($shipment_service_options)
    {
        if (is_null($shipment_service_options)) {
            throw new \InvalidArgumentException('non-nullable shipment_service_options cannot be null');
        }
        $this->container['shipment_service_options'] = $shipment_service_options;

        return $this;
    }

    /**
     * Gets shipment_rating_options
     *
     * @return \AntibodiesOnline\UpsApi\Rating\Model\ShipmentShipmentRatingOptions|null
     */
    public function getShipmentRatingOptions()
    {
        return $this->container['shipment_rating_options'];
    }

    /**
     * Sets shipment_rating_options
     *
     * @param \AntibodiesOnline\UpsApi\Rating\Model\ShipmentShipmentRatingOptions|null $shipment_rating_options shipment_rating_options
     *
     * @return self
     */
    public function setShipmentRatingOptions($shipment_rating_options)
    {
        if (is_null($shipment_rating_options)) {
            throw new \InvalidArgumentException('non-nullable shipment_rating_options cannot be null');
        }
        $this->container['shipment_rating_options'] = $shipment_rating_options;

        return $this;
    }

    /**
     * Gets invoice_line_total
     *
     * @return \AntibodiesOnline\UpsApi\Rating\Model\ShipmentInvoiceLineTotal|null
     */
    public function getInvoiceLineTotal()
    {
        return $this->container['invoice_line_total'];
    }

    /**
     * Sets invoice_line_total
     *
     * @param \AntibodiesOnline\UpsApi\Rating\Model\ShipmentInvoiceLineTotal|null $invoice_line_total invoice_line_total
     *
     * @return self
     */
    public function setInvoiceLineTotal($invoice_line_total)
    {
        if (is_null($invoice_line_total)) {
            throw new \InvalidArgumentException('non-nullable invoice_line_total cannot be null');
        }
        $this->container['invoice_line_total'] = $invoice_line_total;

        return $this;
    }

    /**
     * Gets rating_method_requested_indicator
     *
     * @return string|null
     */
    public function getRatingMethodRequestedIndicator()
    {
        return $this->container['rating_method_requested_indicator'];
    }

    /**
     * Sets rating_method_requested_indicator
     *
     * @param string|null $rating_method_requested_indicator Presence/Absence Indicator. Any value inside is ignored. RatingMethodRequestedIndicator is an indicator. If present, Billable Weight Calculation method and Rating Method information would be returned in response.
     *
     * @return self
     */
    public function setRatingMethodRequestedIndicator($rating_method_requested_indicator)
    {
        if (is_null($rating_method_requested_indicator)) {
            throw new \InvalidArgumentException('non-nullable rating_method_requested_indicator cannot be null');
        }


        $this->container['rating_method_requested_indicator'] = $rating_method_requested_indicator;

        return $this;
    }

    /**
     * Gets tax_information_indicator
     *
     * @return string|null
     */
    public function getTaxInformationIndicator()
    {
        return $this->container['tax_information_indicator'];
    }

    /**
     * Sets tax_information_indicator
     *
     * @param string|null $tax_information_indicator Presence/Absence Indicator. Any value inside is ignored. TaxInformationIndicator is an indicator. The Tax related information includes any type of Taxes, corresponding Monetary Values, Total Charges with Taxes and disclaimers (if applicable) would be returned in response.  If present, any taxes that may be applicable to a shipment would be returned in response. If this indicator is requested with NegotiatedRatesIndicator, Tax related information, if applicable, would be returned only for Negotiated Rates and not for Published Rates.
     *
     * @return self
     */
    public function setTaxInformationIndicator($tax_information_indicator)
    {
        if (is_null($tax_information_indicator)) {
            throw new \InvalidArgumentException('non-nullable tax_information_indicator cannot be null');
        }


        $this->container['tax_information_indicator'] = $tax_information_indicator;

        return $this;
    }

    /**
     * Gets promotional_discount_information
     *
     * @return \AntibodiesOnline\UpsApi\Rating\Model\ShipmentPromotionalDiscountInformation|null
     */
    public function getPromotionalDiscountInformation()
    {
        return $this->container['promotional_discount_information'];
    }

    /**
     * Sets promotional_discount_information
     *
     * @param \AntibodiesOnline\UpsApi\Rating\Model\ShipmentPromotionalDiscountInformation|null $promotional_discount_information promotional_discount_information
     *
     * @return self
     */
    public function setPromotionalDiscountInformation($promotional_discount_information)
    {
        if (is_null($promotional_discount_information)) {
            throw new \InvalidArgumentException('non-nullable promotional_discount_information cannot be null');
        }
        $this->container['promotional_discount_information'] = $promotional_discount_information;

        return $this;
    }

    /**
     * Gets delivery_time_information
     *
     * @return \AntibodiesOnline\UpsApi\Rating\Model\ShipmentDeliveryTimeInformation|null
     */
    public function getDeliveryTimeInformation()
    {
        return $this->container['delivery_time_information'];
    }

    /**
     * Sets delivery_time_information
     *
     * @param \AntibodiesOnline\UpsApi\Rating\Model\ShipmentDeliveryTimeInformation|null $delivery_time_information delivery_time_information
     *
     * @return self
     */
    public function setDeliveryTimeInformation($delivery_time_information)
    {
        if (is_null($delivery_time_information)) {
            throw new \InvalidArgumentException('non-nullable delivery_time_information cannot be null');
        }
        $this->container['delivery_time_information'] = $delivery_time_information;

        return $this;
    }

    /**
     * Gets master_carton_indicator
     *
     * @return string|null
     */
    public function getMasterCartonIndicator()
    {
        return $this->container['master_carton_indicator'];
    }

    /**
     * Sets master_carton_indicator
     *
     * @param string|null $master_carton_indicator Presence/Absence Indicator. Any value inside is ignored. MasterCartonIndicator is an indicator and presence implies that shipment is Master Carton type.  If present, the shipment will be rated as a Master Carton Type. If this indicator is requested with NegotiatedRatesIndicator, rates would be returned only for Negotiated Rates and not for Published Rates.
     *
     * @return self
     */
    public function setMasterCartonIndicator($master_carton_indicator)
    {
        if (is_null($master_carton_indicator)) {
            throw new \InvalidArgumentException('non-nullable master_carton_indicator cannot be null');
        }


        $this->container['master_carton_indicator'] = $master_carton_indicator;

        return $this;
    }

    /**
     * Gets wwe_shipment_indicator
     *
     * @return string|null
     */
    public function getWweShipmentIndicator()
    {
        return $this->container['wwe_shipment_indicator'];
    }

    /**
     * Sets wwe_shipment_indicator
     *
     * @param string|null $wwe_shipment_indicator Presence/Absence Indicator. Any value inside is ignored. WWEShipmentIndicator is an indicator and presence implies that WWE service details requested for RequestOption=Shop or  RequestOption=Shoptimeintransit  RequestOption=Shop or  RequestOption=Shoptimeintransit
     *
     * @return self
     */
    public function setWweShipmentIndicator($wwe_shipment_indicator)
    {
        if (is_null($wwe_shipment_indicator)) {
            throw new \InvalidArgumentException('non-nullable wwe_shipment_indicator cannot be null');
        }


        $this->container['wwe_shipment_indicator'] = $wwe_shipment_indicator;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


