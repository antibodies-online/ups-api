<?php
/**
 * TimeInTransitServiceSummary
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  AntibodiesOnline\UpsApi\Rating
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Rate
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace AntibodiesOnline\UpsApi\Rating\Model;

use \ArrayAccess;
use \AntibodiesOnline\UpsApi\Rating\ObjectSerializer;

/**
 * TimeInTransitServiceSummary Class Doc Comment
 *
 * @category Class
 * @description Container for all available service information.
 * @package  AntibodiesOnline\UpsApi\Rating
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class TimeInTransitServiceSummary implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'TimeInTransit_ServiceSummary';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'service' => '\AntibodiesOnline\UpsApi\Rating\Model\ServiceSummaryService',
        'guaranteed_indicator' => 'string',
        'disclaimer' => 'string',
        'estimated_arrival' => '\AntibodiesOnline\UpsApi\Rating\Model\ServiceSummaryEstimatedArrival',
        'saturday_delivery' => 'string',
        'saturday_delivery_disclaimer' => 'string',
        'sunday_delivery' => 'string',
        'sunday_delivery_disclaimer' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'service' => null,
        'guaranteed_indicator' => null,
        'disclaimer' => null,
        'estimated_arrival' => null,
        'saturday_delivery' => null,
        'saturday_delivery_disclaimer' => null,
        'sunday_delivery' => null,
        'sunday_delivery_disclaimer' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'service' => false,
		'guaranteed_indicator' => false,
		'disclaimer' => false,
		'estimated_arrival' => false,
		'saturday_delivery' => false,
		'saturday_delivery_disclaimer' => false,
		'sunday_delivery' => false,
		'sunday_delivery_disclaimer' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'service' => 'Service',
        'guaranteed_indicator' => 'GuaranteedIndicator',
        'disclaimer' => 'Disclaimer',
        'estimated_arrival' => 'EstimatedArrival',
        'saturday_delivery' => 'SaturdayDelivery',
        'saturday_delivery_disclaimer' => 'SaturdayDeliveryDisclaimer',
        'sunday_delivery' => 'SundayDelivery',
        'sunday_delivery_disclaimer' => 'SundayDeliveryDisclaimer'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'service' => 'setService',
        'guaranteed_indicator' => 'setGuaranteedIndicator',
        'disclaimer' => 'setDisclaimer',
        'estimated_arrival' => 'setEstimatedArrival',
        'saturday_delivery' => 'setSaturdayDelivery',
        'saturday_delivery_disclaimer' => 'setSaturdayDeliveryDisclaimer',
        'sunday_delivery' => 'setSundayDelivery',
        'sunday_delivery_disclaimer' => 'setSundayDeliveryDisclaimer'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'service' => 'getService',
        'guaranteed_indicator' => 'getGuaranteedIndicator',
        'disclaimer' => 'getDisclaimer',
        'estimated_arrival' => 'getEstimatedArrival',
        'saturday_delivery' => 'getSaturdayDelivery',
        'saturday_delivery_disclaimer' => 'getSaturdayDeliveryDisclaimer',
        'sunday_delivery' => 'getSundayDelivery',
        'sunday_delivery_disclaimer' => 'getSundayDeliveryDisclaimer'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('service', $data ?? [], null);
        $this->setIfExists('guaranteed_indicator', $data ?? [], null);
        $this->setIfExists('disclaimer', $data ?? [], null);
        $this->setIfExists('estimated_arrival', $data ?? [], null);
        $this->setIfExists('saturday_delivery', $data ?? [], null);
        $this->setIfExists('saturday_delivery_disclaimer', $data ?? [], null);
        $this->setIfExists('sunday_delivery', $data ?? [], null);
        $this->setIfExists('sunday_delivery_disclaimer', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['service'] === null) {
            $invalidProperties[] = "'service' can't be null";
        }
        if ($this->container['estimated_arrival'] === null) {
            $invalidProperties[] = "'estimated_arrival' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets service
     *
     * @return \AntibodiesOnline\UpsApi\Rating\Model\ServiceSummaryService
     */
    public function getService()
    {
        return $this->container['service'];
    }

    /**
     * Sets service
     *
     * @param \AntibodiesOnline\UpsApi\Rating\Model\ServiceSummaryService $service service
     *
     * @return self
     */
    public function setService($service)
    {
        if (is_null($service)) {
            throw new \InvalidArgumentException('non-nullable service cannot be null');
        }
        $this->container['service'] = $service;

        return $this;
    }

    /**
     * Gets guaranteed_indicator
     *
     * @return string|null
     */
    public function getGuaranteedIndicator()
    {
        return $this->container['guaranteed_indicator'];
    }

    /**
     * Sets guaranteed_indicator
     *
     * @param string|null $guaranteed_indicator Empty Tag. Indicates whether the service will be guaranteed or not.  Required for International Requests.
     *
     * @return self
     */
    public function setGuaranteedIndicator($guaranteed_indicator)
    {
        if (is_null($guaranteed_indicator)) {
            throw new \InvalidArgumentException('non-nullable guaranteed_indicator cannot be null');
        }


        $this->container['guaranteed_indicator'] = $guaranteed_indicator;

        return $this;
    }

    /**
     * Gets disclaimer
     *
     * @return string|null
     */
    public function getDisclaimer()
    {
        return $this->container['disclaimer'];
    }

    /**
     * Sets disclaimer
     *
     * @param string|null $disclaimer The Disclaimer is provided based upon the origin and destination country or territory codes provided in the request document. The disclaimer is returned as a conditional statement to the validity of the service being guaranteed. The possible disclaimers that can be returned are available in the Service Guaranteed Disclaimers table.
     *
     * @return self
     */
    public function setDisclaimer($disclaimer)
    {
        if (is_null($disclaimer)) {
            throw new \InvalidArgumentException('non-nullable disclaimer cannot be null');
        }


        $this->container['disclaimer'] = $disclaimer;

        return $this;
    }

    /**
     * Gets estimated_arrival
     *
     * @return \AntibodiesOnline\UpsApi\Rating\Model\ServiceSummaryEstimatedArrival
     */
    public function getEstimatedArrival()
    {
        return $this->container['estimated_arrival'];
    }

    /**
     * Sets estimated_arrival
     *
     * @param \AntibodiesOnline\UpsApi\Rating\Model\ServiceSummaryEstimatedArrival $estimated_arrival estimated_arrival
     *
     * @return self
     */
    public function setEstimatedArrival($estimated_arrival)
    {
        if (is_null($estimated_arrival)) {
            throw new \InvalidArgumentException('non-nullable estimated_arrival cannot be null');
        }
        $this->container['estimated_arrival'] = $estimated_arrival;

        return $this;
    }

    /**
     * Gets saturday_delivery
     *
     * @return string|null
     */
    public function getSaturdayDelivery()
    {
        return $this->container['saturday_delivery'];
    }

    /**
     * Sets saturday_delivery
     *
     * @param string|null $saturday_delivery Saturday delivery information for a service. Values are1 - Saturday Delivery Available with additional charges 0 - Saturday Delivery not available or no additional charge, please check Delivery Date to confirm if the Delivery will be SaturdayPlease see Saturday Delivery business rules section for more information.
     *
     * @return self
     */
    public function setSaturdayDelivery($saturday_delivery)
    {
        if (is_null($saturday_delivery)) {
            throw new \InvalidArgumentException('non-nullable saturday_delivery cannot be null');
        }


        $this->container['saturday_delivery'] = $saturday_delivery;

        return $this;
    }

    /**
     * Gets saturday_delivery_disclaimer
     *
     * @return string|null
     */
    public function getSaturdayDeliveryDisclaimer()
    {
        return $this->container['saturday_delivery_disclaimer'];
    }

    /**
     * Sets saturday_delivery_disclaimer
     *
     * @param string|null $saturday_delivery_disclaimer Saturday delivery disclaimer message.
     *
     * @return self
     */
    public function setSaturdayDeliveryDisclaimer($saturday_delivery_disclaimer)
    {
        if (is_null($saturday_delivery_disclaimer)) {
            throw new \InvalidArgumentException('non-nullable saturday_delivery_disclaimer cannot be null');
        }


        $this->container['saturday_delivery_disclaimer'] = $saturday_delivery_disclaimer;

        return $this;
    }

    /**
     * Gets sunday_delivery
     *
     * @return string|null
     */
    public function getSundayDelivery()
    {
        return $this->container['sunday_delivery'];
    }

    /**
     * Sets sunday_delivery
     *
     * @param string|null $sunday_delivery Sunday delivery information for a service. Values are1 - Sunday Delivery Available with additional charges 0 - Sunday Delivery not available or no additional charge, please check Delivery Date to confirm if the Delivery will be SundayPlease see Saturday Delivery business rules section for more information.  Applies only if SubVersion is greater than or equal to 2007
     *
     * @return self
     */
    public function setSundayDelivery($sunday_delivery)
    {
        if (is_null($sunday_delivery)) {
            throw new \InvalidArgumentException('non-nullable sunday_delivery cannot be null');
        }


        $this->container['sunday_delivery'] = $sunday_delivery;

        return $this;
    }

    /**
     * Gets sunday_delivery_disclaimer
     *
     * @return string|null
     */
    public function getSundayDeliveryDisclaimer()
    {
        return $this->container['sunday_delivery_disclaimer'];
    }

    /**
     * Sets sunday_delivery_disclaimer
     *
     * @param string|null $sunday_delivery_disclaimer Sunday delivery disclaimer message.  Applies only if SubVersion is greater than or equal to 2007
     *
     * @return self
     */
    public function setSundayDeliveryDisclaimer($sunday_delivery_disclaimer)
    {
        if (is_null($sunday_delivery_disclaimer)) {
            throw new \InvalidArgumentException('non-nullable sunday_delivery_disclaimer cannot be null');
        }


        $this->container['sunday_delivery_disclaimer'] = $sunday_delivery_disclaimer;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


