<?php
/**
 * ShipmentShipmentRatingOptions
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  AntibodiesOnline\UpsApi\Rating
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Rate
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace AntibodiesOnline\UpsApi\Rating\Model;

use \ArrayAccess;
use \AntibodiesOnline\UpsApi\Rating\ObjectSerializer;

/**
 * ShipmentShipmentRatingOptions Class Doc Comment
 *
 * @category Class
 * @description Shipment Rating Options container.  N/A
 * @package  AntibodiesOnline\UpsApi\Rating
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ShipmentShipmentRatingOptions implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Shipment_ShipmentRatingOptions';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'negotiated_rates_indicator' => 'string',
        'frs_shipment_indicator' => 'string',
        'rate_chart_indicator' => 'string',
        'user_level_discount_indicator' => 'string',
        'tpfc_negotiated_rates_indicator' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'negotiated_rates_indicator' => null,
        'frs_shipment_indicator' => null,
        'rate_chart_indicator' => null,
        'user_level_discount_indicator' => null,
        'tpfc_negotiated_rates_indicator' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'negotiated_rates_indicator' => false,
		'frs_shipment_indicator' => false,
		'rate_chart_indicator' => false,
		'user_level_discount_indicator' => false,
		'tpfc_negotiated_rates_indicator' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'negotiated_rates_indicator' => 'NegotiatedRatesIndicator',
        'frs_shipment_indicator' => 'FRSShipmentIndicator',
        'rate_chart_indicator' => 'RateChartIndicator',
        'user_level_discount_indicator' => 'UserLevelDiscountIndicator',
        'tpfc_negotiated_rates_indicator' => 'TPFCNegotiatedRatesIndicator'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'negotiated_rates_indicator' => 'setNegotiatedRatesIndicator',
        'frs_shipment_indicator' => 'setFrsShipmentIndicator',
        'rate_chart_indicator' => 'setRateChartIndicator',
        'user_level_discount_indicator' => 'setUserLevelDiscountIndicator',
        'tpfc_negotiated_rates_indicator' => 'setTpfcNegotiatedRatesIndicator'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'negotiated_rates_indicator' => 'getNegotiatedRatesIndicator',
        'frs_shipment_indicator' => 'getFrsShipmentIndicator',
        'rate_chart_indicator' => 'getRateChartIndicator',
        'user_level_discount_indicator' => 'getUserLevelDiscountIndicator',
        'tpfc_negotiated_rates_indicator' => 'getTpfcNegotiatedRatesIndicator'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('negotiated_rates_indicator', $data ?? [], null);
        $this->setIfExists('frs_shipment_indicator', $data ?? [], null);
        $this->setIfExists('rate_chart_indicator', $data ?? [], null);
        $this->setIfExists('user_level_discount_indicator', $data ?? [], null);
        $this->setIfExists('tpfc_negotiated_rates_indicator', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets negotiated_rates_indicator
     *
     * @return string|null
     */
    public function getNegotiatedRatesIndicator()
    {
        return $this->container['negotiated_rates_indicator'];
    }

    /**
     * Sets negotiated_rates_indicator
     *
     * @param string|null $negotiated_rates_indicator NegotiatedRatesIndicator -  Required to display two types of discounts: 1) Bids or Account Based Rates2) Web/Promotional Discounts BidsAccount Based Rates: If the indicator is present, the Shipper is authorized, and the Rating API XML Request is configured to return Negotiated Rates, then Negotiated Rates should be returned in the response. Web/Promotional Discounts: If the indicator is present, the Shipper is authorized for Web/Promotional Discounts then Negotiated Rates should be returned in the response.
     *
     * @return self
     */
    public function setNegotiatedRatesIndicator($negotiated_rates_indicator)
    {
        if (is_null($negotiated_rates_indicator)) {
            throw new \InvalidArgumentException('non-nullable negotiated_rates_indicator cannot be null');
        }


        $this->container['negotiated_rates_indicator'] = $negotiated_rates_indicator;

        return $this;
    }

    /**
     * Gets frs_shipment_indicator
     *
     * @return string|null
     */
    public function getFrsShipmentIndicator()
    {
        return $this->container['frs_shipment_indicator'];
    }

    /**
     * Sets frs_shipment_indicator
     *
     * @param string|null $frs_shipment_indicator FRS Indicator. The indicator is required to obtain rates for UPS Ground Freight Pricing (GFP).  The account number must be enabled for GFP.
     *
     * @return self
     */
    public function setFrsShipmentIndicator($frs_shipment_indicator)
    {
        if (is_null($frs_shipment_indicator)) {
            throw new \InvalidArgumentException('non-nullable frs_shipment_indicator cannot be null');
        }


        $this->container['frs_shipment_indicator'] = $frs_shipment_indicator;

        return $this;
    }

    /**
     * Gets rate_chart_indicator
     *
     * @return string|null
     */
    public function getRateChartIndicator()
    {
        return $this->container['rate_chart_indicator'];
    }

    /**
     * Sets rate_chart_indicator
     *
     * @param string|null $rate_chart_indicator RateChartIndicator -  If present in a request, the response will contain a RateChart element.
     *
     * @return self
     */
    public function setRateChartIndicator($rate_chart_indicator)
    {
        if (is_null($rate_chart_indicator)) {
            throw new \InvalidArgumentException('non-nullable rate_chart_indicator cannot be null');
        }


        $this->container['rate_chart_indicator'] = $rate_chart_indicator;

        return $this;
    }

    /**
     * Gets user_level_discount_indicator
     *
     * @return string|null
     */
    public function getUserLevelDiscountIndicator()
    {
        return $this->container['user_level_discount_indicator'];
    }

    /**
     * Sets user_level_discount_indicator
     *
     * @param string|null $user_level_discount_indicator UserLevelDiscountIndicator - required to obtain rates for User Level Promotions.  This is required to obtain User Level Discounts. There must also be no ShipperNumber in the Shipper container.
     *
     * @return self
     */
    public function setUserLevelDiscountIndicator($user_level_discount_indicator)
    {
        if (is_null($user_level_discount_indicator)) {
            throw new \InvalidArgumentException('non-nullable user_level_discount_indicator cannot be null');
        }


        $this->container['user_level_discount_indicator'] = $user_level_discount_indicator;

        return $this;
    }

    /**
     * Gets tpfc_negotiated_rates_indicator
     *
     * @return string|null
     */
    public function getTpfcNegotiatedRatesIndicator()
    {
        return $this->container['tpfc_negotiated_rates_indicator'];
    }

    /**
     * Sets tpfc_negotiated_rates_indicator
     *
     * @param string|null $tpfc_negotiated_rates_indicator This indicator applies for a third party (3P) / Freight collect (FC) shipment only. For 3P/FC shipment if the shipper wishes to request for the negotiated rates of the third party then this indicator should be included in the request. If authorized the 3P/FC negotiated rates will be applied to the shipment and rates will be returned in response.
     *
     * @return self
     */
    public function setTpfcNegotiatedRatesIndicator($tpfc_negotiated_rates_indicator)
    {
        if (is_null($tpfc_negotiated_rates_indicator)) {
            throw new \InvalidArgumentException('non-nullable tpfc_negotiated_rates_indicator cannot be null');
        }


        $this->container['tpfc_negotiated_rates_indicator'] = $tpfc_negotiated_rates_indicator;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


