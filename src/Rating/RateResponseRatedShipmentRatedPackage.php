<?php
/**
 * RateResponseRatedShipmentRatedPackage
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  AntibodiesOnline\UpsApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Rate
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace AntibodiesOnline\UpsApi\Rating;

use \ArrayAccess;
use \AntibodiesOnline\UpsApi\ObjectSerializer;

/**
 * RateResponseRatedShipmentRatedPackage Class Doc Comment
 *
 * @category Class
 * @package  AntibodiesOnline\UpsApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class RateResponseRatedShipmentRatedPackage implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'RateResponse_RatedShipment_RatedPackage';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'base_service_charge' => '\AntibodiesOnline\UpsApi\Rating\RatedPackageBaseServiceCharge',
        'transportation_charges' => '\AntibodiesOnline\UpsApi\Rating\RatedPackageTransportationCharges',
        'service_options_charges' => '\AntibodiesOnline\UpsApi\Rating\RatedPackageServiceOptionsCharges',
        'total_charges' => '\AntibodiesOnline\UpsApi\Rating\RatedPackageTotalCharges',
        'weight' => 'string',
        'billing_weight' => '\AntibodiesOnline\UpsApi\Rating\RatedPackageBillingWeight',
        'accessorial' => '\AntibodiesOnline\UpsApi\Rating\RatedShipmentRatedPackageAccessorial',
        'itemized_charges' => '\AntibodiesOnline\UpsApi\Rating\RatedShipmentRatedPackageItemizedCharges',
        'negotiated_charges' => '\AntibodiesOnline\UpsApi\Rating\RatedPackageNegotiatedCharges',
        'simple_rate' => '\AntibodiesOnline\UpsApi\Rating\RatedPackageSimpleRate',
        'rate_modifier' => '\AntibodiesOnline\UpsApi\Rating\RatedShipmentRatedPackageRateModifier'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'base_service_charge' => null,
        'transportation_charges' => null,
        'service_options_charges' => null,
        'total_charges' => null,
        'weight' => null,
        'billing_weight' => null,
        'accessorial' => null,
        'itemized_charges' => null,
        'negotiated_charges' => null,
        'simple_rate' => null,
        'rate_modifier' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'base_service_charge' => false,
		'transportation_charges' => false,
		'service_options_charges' => false,
		'total_charges' => false,
		'weight' => false,
		'billing_weight' => false,
		'accessorial' => false,
		'itemized_charges' => false,
		'negotiated_charges' => false,
		'simple_rate' => false,
		'rate_modifier' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'base_service_charge' => 'BaseServiceCharge',
        'transportation_charges' => 'TransportationCharges',
        'service_options_charges' => 'ServiceOptionsCharges',
        'total_charges' => 'TotalCharges',
        'weight' => 'Weight',
        'billing_weight' => 'BillingWeight',
        'accessorial' => 'Accessorial',
        'itemized_charges' => 'ItemizedCharges',
        'negotiated_charges' => 'NegotiatedCharges',
        'simple_rate' => 'SimpleRate',
        'rate_modifier' => 'RateModifier'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'base_service_charge' => 'setBaseServiceCharge',
        'transportation_charges' => 'setTransportationCharges',
        'service_options_charges' => 'setServiceOptionsCharges',
        'total_charges' => 'setTotalCharges',
        'weight' => 'setWeight',
        'billing_weight' => 'setBillingWeight',
        'accessorial' => 'setAccessorial',
        'itemized_charges' => 'setItemizedCharges',
        'negotiated_charges' => 'setNegotiatedCharges',
        'simple_rate' => 'setSimpleRate',
        'rate_modifier' => 'setRateModifier'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'base_service_charge' => 'getBaseServiceCharge',
        'transportation_charges' => 'getTransportationCharges',
        'service_options_charges' => 'getServiceOptionsCharges',
        'total_charges' => 'getTotalCharges',
        'weight' => 'getWeight',
        'billing_weight' => 'getBillingWeight',
        'accessorial' => 'getAccessorial',
        'itemized_charges' => 'getItemizedCharges',
        'negotiated_charges' => 'getNegotiatedCharges',
        'simple_rate' => 'getSimpleRate',
        'rate_modifier' => 'getRateModifier'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('base_service_charge', $data ?? [], null);
        $this->setIfExists('transportation_charges', $data ?? [], null);
        $this->setIfExists('service_options_charges', $data ?? [], null);
        $this->setIfExists('total_charges', $data ?? [], null);
        $this->setIfExists('weight', $data ?? [], null);
        $this->setIfExists('billing_weight', $data ?? [], null);
        $this->setIfExists('accessorial', $data ?? [], null);
        $this->setIfExists('itemized_charges', $data ?? [], null);
        $this->setIfExists('negotiated_charges', $data ?? [], null);
        $this->setIfExists('simple_rate', $data ?? [], null);
        $this->setIfExists('rate_modifier', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets base_service_charge
     *
     * @return \AntibodiesOnline\UpsApi\Rating\RatedPackageBaseServiceCharge|null
     */
    public function getBaseServiceCharge()
    {
        return $this->container['base_service_charge'];
    }

    /**
     * Sets base_service_charge
     *
     * @param \AntibodiesOnline\UpsApi\Rating\RatedPackageBaseServiceCharge|null $base_service_charge base_service_charge
     *
     * @return self
     */
    public function setBaseServiceCharge($base_service_charge)
    {
        if (is_null($base_service_charge)) {
            throw new \InvalidArgumentException('non-nullable base_service_charge cannot be null');
        }
        $this->container['base_service_charge'] = $base_service_charge;

        return $this;
    }

    /**
     * Gets transportation_charges
     *
     * @return \AntibodiesOnline\UpsApi\Rating\RatedPackageTransportationCharges|null
     */
    public function getTransportationCharges()
    {
        return $this->container['transportation_charges'];
    }

    /**
     * Sets transportation_charges
     *
     * @param \AntibodiesOnline\UpsApi\Rating\RatedPackageTransportationCharges|null $transportation_charges transportation_charges
     *
     * @return self
     */
    public function setTransportationCharges($transportation_charges)
    {
        if (is_null($transportation_charges)) {
            throw new \InvalidArgumentException('non-nullable transportation_charges cannot be null');
        }
        $this->container['transportation_charges'] = $transportation_charges;

        return $this;
    }

    /**
     * Gets service_options_charges
     *
     * @return \AntibodiesOnline\UpsApi\Rating\RatedPackageServiceOptionsCharges|null
     */
    public function getServiceOptionsCharges()
    {
        return $this->container['service_options_charges'];
    }

    /**
     * Sets service_options_charges
     *
     * @param \AntibodiesOnline\UpsApi\Rating\RatedPackageServiceOptionsCharges|null $service_options_charges service_options_charges
     *
     * @return self
     */
    public function setServiceOptionsCharges($service_options_charges)
    {
        if (is_null($service_options_charges)) {
            throw new \InvalidArgumentException('non-nullable service_options_charges cannot be null');
        }
        $this->container['service_options_charges'] = $service_options_charges;

        return $this;
    }

    /**
     * Gets total_charges
     *
     * @return \AntibodiesOnline\UpsApi\Rating\RatedPackageTotalCharges|null
     */
    public function getTotalCharges()
    {
        return $this->container['total_charges'];
    }

    /**
     * Sets total_charges
     *
     * @param \AntibodiesOnline\UpsApi\Rating\RatedPackageTotalCharges|null $total_charges total_charges
     *
     * @return self
     */
    public function setTotalCharges($total_charges)
    {
        if (is_null($total_charges)) {
            throw new \InvalidArgumentException('non-nullable total_charges cannot be null');
        }
        $this->container['total_charges'] = $total_charges;

        return $this;
    }

    /**
     * Gets weight
     *
     * @return string|null
     */
    public function getWeight()
    {
        return $this->container['weight'];
    }

    /**
     * Sets weight
     *
     * @param string|null $weight The weight of the package in the rated Package.
     *
     * @return self
     */
    public function setWeight($weight)
    {
        if (is_null($weight)) {
            throw new \InvalidArgumentException('non-nullable weight cannot be null');
        }
        $this->container['weight'] = $weight;

        return $this;
    }

    /**
     * Gets billing_weight
     *
     * @return \AntibodiesOnline\UpsApi\Rating\RatedPackageBillingWeight|null
     */
    public function getBillingWeight()
    {
        return $this->container['billing_weight'];
    }

    /**
     * Sets billing_weight
     *
     * @param \AntibodiesOnline\UpsApi\Rating\RatedPackageBillingWeight|null $billing_weight billing_weight
     *
     * @return self
     */
    public function setBillingWeight($billing_weight)
    {
        if (is_null($billing_weight)) {
            throw new \InvalidArgumentException('non-nullable billing_weight cannot be null');
        }
        $this->container['billing_weight'] = $billing_weight;

        return $this;
    }

    /**
     * Gets accessorial
     *
     * @return \AntibodiesOnline\UpsApi\Rating\RatedShipmentRatedPackageAccessorial|null
     */
    public function getAccessorial()
    {
        return $this->container['accessorial'];
    }

    /**
     * Sets accessorial
     *
     * @param \AntibodiesOnline\UpsApi\Rating\RatedShipmentRatedPackageAccessorial|null $accessorial accessorial
     *
     * @return self
     */
    public function setAccessorial($accessorial)
    {
        if (is_null($accessorial)) {
            throw new \InvalidArgumentException('non-nullable accessorial cannot be null');
        }
        $this->container['accessorial'] = $accessorial;

        return $this;
    }

    /**
     * Gets itemized_charges
     *
     * @return \AntibodiesOnline\UpsApi\Rating\RatedShipmentRatedPackageItemizedCharges|null
     */
    public function getItemizedCharges()
    {
        return $this->container['itemized_charges'];
    }

    /**
     * Sets itemized_charges
     *
     * @param \AntibodiesOnline\UpsApi\Rating\RatedShipmentRatedPackageItemizedCharges|null $itemized_charges itemized_charges
     *
     * @return self
     */
    public function setItemizedCharges($itemized_charges)
    {
        if (is_null($itemized_charges)) {
            throw new \InvalidArgumentException('non-nullable itemized_charges cannot be null');
        }
        $this->container['itemized_charges'] = $itemized_charges;

        return $this;
    }

    /**
     * Gets negotiated_charges
     *
     * @return \AntibodiesOnline\UpsApi\Rating\RatedPackageNegotiatedCharges|null
     */
    public function getNegotiatedCharges()
    {
        return $this->container['negotiated_charges'];
    }

    /**
     * Sets negotiated_charges
     *
     * @param \AntibodiesOnline\UpsApi\Rating\RatedPackageNegotiatedCharges|null $negotiated_charges negotiated_charges
     *
     * @return self
     */
    public function setNegotiatedCharges($negotiated_charges)
    {
        if (is_null($negotiated_charges)) {
            throw new \InvalidArgumentException('non-nullable negotiated_charges cannot be null');
        }
        $this->container['negotiated_charges'] = $negotiated_charges;

        return $this;
    }

    /**
     * Gets simple_rate
     *
     * @return \AntibodiesOnline\UpsApi\Rating\RatedPackageSimpleRate|null
     */
    public function getSimpleRate()
    {
        return $this->container['simple_rate'];
    }

    /**
     * Sets simple_rate
     *
     * @param \AntibodiesOnline\UpsApi\Rating\RatedPackageSimpleRate|null $simple_rate simple_rate
     *
     * @return self
     */
    public function setSimpleRate($simple_rate)
    {
        if (is_null($simple_rate)) {
            throw new \InvalidArgumentException('non-nullable simple_rate cannot be null');
        }
        $this->container['simple_rate'] = $simple_rate;

        return $this;
    }

    /**
     * Gets rate_modifier
     *
     * @return \AntibodiesOnline\UpsApi\Rating\RatedShipmentRatedPackageRateModifier|null
     */
    public function getRateModifier()
    {
        return $this->container['rate_modifier'];
    }

    /**
     * Sets rate_modifier
     *
     * @param \AntibodiesOnline\UpsApi\Rating\RatedShipmentRatedPackageRateModifier|null $rate_modifier rate_modifier
     *
     * @return self
     */
    public function setRateModifier($rate_modifier)
    {
        if (is_null($rate_modifier)) {
            throw new \InvalidArgumentException('non-nullable rate_modifier cannot be null');
        }
        $this->container['rate_modifier'] = $rate_modifier;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


