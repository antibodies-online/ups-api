<?php
/**
 * ServiceSummaryEstimatedArrival
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  AntibodiesOnline\UpsApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Rate
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace AntibodiesOnline\UpsApi\Rating;

use \ArrayAccess;
use \AntibodiesOnline\UpsApi\ObjectSerializer;

/**
 * ServiceSummaryEstimatedArrival Class Doc Comment
 *
 * @category Class
 * @description Container for the Time-In-Transit arrival information by service
 * @package  AntibodiesOnline\UpsApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ServiceSummaryEstimatedArrival implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ServiceSummary_EstimatedArrival';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'arrival' => '\AntibodiesOnline\UpsApi\Rating\EstimatedArrivalArrival',
        'business_days_in_transit' => 'string',
        'pickup' => '\AntibodiesOnline\UpsApi\Rating\EstimatedArrivalPickup',
        'day_of_week' => 'string',
        'customer_center_cutoff' => 'string',
        'delay_count' => 'string',
        'holiday_count' => 'string',
        'rest_days' => 'string',
        'total_transit_days' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'arrival' => null,
        'business_days_in_transit' => null,
        'pickup' => null,
        'day_of_week' => null,
        'customer_center_cutoff' => null,
        'delay_count' => null,
        'holiday_count' => null,
        'rest_days' => null,
        'total_transit_days' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'arrival' => false,
		'business_days_in_transit' => false,
		'pickup' => false,
		'day_of_week' => false,
		'customer_center_cutoff' => false,
		'delay_count' => false,
		'holiday_count' => false,
		'rest_days' => false,
		'total_transit_days' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'arrival' => 'Arrival',
        'business_days_in_transit' => 'BusinessDaysInTransit',
        'pickup' => 'Pickup',
        'day_of_week' => 'DayOfWeek',
        'customer_center_cutoff' => 'CustomerCenterCutoff',
        'delay_count' => 'DelayCount',
        'holiday_count' => 'HolidayCount',
        'rest_days' => 'RestDays',
        'total_transit_days' => 'TotalTransitDays'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'arrival' => 'setArrival',
        'business_days_in_transit' => 'setBusinessDaysInTransit',
        'pickup' => 'setPickup',
        'day_of_week' => 'setDayOfWeek',
        'customer_center_cutoff' => 'setCustomerCenterCutoff',
        'delay_count' => 'setDelayCount',
        'holiday_count' => 'setHolidayCount',
        'rest_days' => 'setRestDays',
        'total_transit_days' => 'setTotalTransitDays'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'arrival' => 'getArrival',
        'business_days_in_transit' => 'getBusinessDaysInTransit',
        'pickup' => 'getPickup',
        'day_of_week' => 'getDayOfWeek',
        'customer_center_cutoff' => 'getCustomerCenterCutoff',
        'delay_count' => 'getDelayCount',
        'holiday_count' => 'getHolidayCount',
        'rest_days' => 'getRestDays',
        'total_transit_days' => 'getTotalTransitDays'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('arrival', $data ?? [], null);
        $this->setIfExists('business_days_in_transit', $data ?? [], null);
        $this->setIfExists('pickup', $data ?? [], null);
        $this->setIfExists('day_of_week', $data ?? [], null);
        $this->setIfExists('customer_center_cutoff', $data ?? [], null);
        $this->setIfExists('delay_count', $data ?? [], null);
        $this->setIfExists('holiday_count', $data ?? [], null);
        $this->setIfExists('rest_days', $data ?? [], null);
        $this->setIfExists('total_transit_days', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['arrival'] === null) {
            $invalidProperties[] = "'arrival' can't be null";
        }
        if ($this->container['business_days_in_transit'] === null) {
            $invalidProperties[] = "'business_days_in_transit' can't be null";
        }
        if ((mb_strlen($this->container['business_days_in_transit']) > 5)) {
            $invalidProperties[] = "invalid value for 'business_days_in_transit', the character length must be smaller than or equal to 5.";
        }

        if ((mb_strlen($this->container['business_days_in_transit']) < 1)) {
            $invalidProperties[] = "invalid value for 'business_days_in_transit', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['pickup'] === null) {
            $invalidProperties[] = "'pickup' can't be null";
        }
        if ($this->container['day_of_week'] === null) {
            $invalidProperties[] = "'day_of_week' can't be null";
        }
        if ((mb_strlen($this->container['day_of_week']) > 9)) {
            $invalidProperties[] = "invalid value for 'day_of_week', the character length must be smaller than or equal to 9.";
        }

        if ((mb_strlen($this->container['day_of_week']) < 1)) {
            $invalidProperties[] = "invalid value for 'day_of_week', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['customer_center_cutoff']) && (mb_strlen($this->container['customer_center_cutoff']) > 6)) {
            $invalidProperties[] = "invalid value for 'customer_center_cutoff', the character length must be smaller than or equal to 6.";
        }

        if (!is_null($this->container['customer_center_cutoff']) && (mb_strlen($this->container['customer_center_cutoff']) < 1)) {
            $invalidProperties[] = "invalid value for 'customer_center_cutoff', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['delay_count']) && (mb_strlen($this->container['delay_count']) > 3)) {
            $invalidProperties[] = "invalid value for 'delay_count', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['delay_count']) && (mb_strlen($this->container['delay_count']) < 1)) {
            $invalidProperties[] = "invalid value for 'delay_count', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['holiday_count']) && (mb_strlen($this->container['holiday_count']) > 2)) {
            $invalidProperties[] = "invalid value for 'holiday_count', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['holiday_count']) && (mb_strlen($this->container['holiday_count']) < 1)) {
            $invalidProperties[] = "invalid value for 'holiday_count', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['rest_days']) && (mb_strlen($this->container['rest_days']) > 2)) {
            $invalidProperties[] = "invalid value for 'rest_days', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['rest_days']) && (mb_strlen($this->container['rest_days']) < 1)) {
            $invalidProperties[] = "invalid value for 'rest_days', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['total_transit_days']) && (mb_strlen($this->container['total_transit_days']) > 5)) {
            $invalidProperties[] = "invalid value for 'total_transit_days', the character length must be smaller than or equal to 5.";
        }

        if (!is_null($this->container['total_transit_days']) && (mb_strlen($this->container['total_transit_days']) < 1)) {
            $invalidProperties[] = "invalid value for 'total_transit_days', the character length must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets arrival
     *
     * @return \AntibodiesOnline\UpsApi\Rating\EstimatedArrivalArrival
     */
    public function getArrival()
    {
        return $this->container['arrival'];
    }

    /**
     * Sets arrival
     *
     * @param \AntibodiesOnline\UpsApi\Rating\EstimatedArrivalArrival $arrival arrival
     *
     * @return self
     */
    public function setArrival($arrival)
    {
        if (is_null($arrival)) {
            throw new \InvalidArgumentException('non-nullable arrival cannot be null');
        }
        $this->container['arrival'] = $arrival;

        return $this;
    }

    /**
     * Gets business_days_in_transit
     *
     * @return string
     */
    public function getBusinessDaysInTransit()
    {
        return $this->container['business_days_in_transit'];
    }

    /**
     * Sets business_days_in_transit
     *
     * @param string $business_days_in_transit Number of business days from Origin to Destination Locations.
     *
     * @return self
     */
    public function setBusinessDaysInTransit($business_days_in_transit)
    {
        if (is_null($business_days_in_transit)) {
            throw new \InvalidArgumentException('non-nullable business_days_in_transit cannot be null');
        }
        if ((mb_strlen($business_days_in_transit) > 5)) {
            throw new \InvalidArgumentException('invalid length for $business_days_in_transit when calling ServiceSummaryEstimatedArrival., must be smaller than or equal to 5.');
        }
        if ((mb_strlen($business_days_in_transit) < 1)) {
            throw new \InvalidArgumentException('invalid length for $business_days_in_transit when calling ServiceSummaryEstimatedArrival., must be bigger than or equal to 1.');
        }

        $this->container['business_days_in_transit'] = $business_days_in_transit;

        return $this;
    }

    /**
     * Gets pickup
     *
     * @return \AntibodiesOnline\UpsApi\Rating\EstimatedArrivalPickup
     */
    public function getPickup()
    {
        return $this->container['pickup'];
    }

    /**
     * Sets pickup
     *
     * @param \AntibodiesOnline\UpsApi\Rating\EstimatedArrivalPickup $pickup pickup
     *
     * @return self
     */
    public function setPickup($pickup)
    {
        if (is_null($pickup)) {
            throw new \InvalidArgumentException('non-nullable pickup cannot be null');
        }
        $this->container['pickup'] = $pickup;

        return $this;
    }

    /**
     * Gets day_of_week
     *
     * @return string
     */
    public function getDayOfWeek()
    {
        return $this->container['day_of_week'];
    }

    /**
     * Sets day_of_week
     *
     * @param string $day_of_week Day of week for arrival. Valid values are: MONTUEWEDTHUFRISAT
     *
     * @return self
     */
    public function setDayOfWeek($day_of_week)
    {
        if (is_null($day_of_week)) {
            throw new \InvalidArgumentException('non-nullable day_of_week cannot be null');
        }
        if ((mb_strlen($day_of_week) > 9)) {
            throw new \InvalidArgumentException('invalid length for $day_of_week when calling ServiceSummaryEstimatedArrival., must be smaller than or equal to 9.');
        }
        if ((mb_strlen($day_of_week) < 1)) {
            throw new \InvalidArgumentException('invalid length for $day_of_week when calling ServiceSummaryEstimatedArrival., must be bigger than or equal to 1.');
        }

        $this->container['day_of_week'] = $day_of_week;

        return $this;
    }

    /**
     * Gets customer_center_cutoff
     *
     * @return string|null
     */
    public function getCustomerCenterCutoff()
    {
        return $this->container['customer_center_cutoff'];
    }

    /**
     * Sets customer_center_cutoff
     *
     * @param string|null $customer_center_cutoff Customer Service call time. Returned for domestic as well as international requests.
     *
     * @return self
     */
    public function setCustomerCenterCutoff($customer_center_cutoff)
    {
        if (is_null($customer_center_cutoff)) {
            throw new \InvalidArgumentException('non-nullable customer_center_cutoff cannot be null');
        }
        if ((mb_strlen($customer_center_cutoff) > 6)) {
            throw new \InvalidArgumentException('invalid length for $customer_center_cutoff when calling ServiceSummaryEstimatedArrival., must be smaller than or equal to 6.');
        }
        if ((mb_strlen($customer_center_cutoff) < 1)) {
            throw new \InvalidArgumentException('invalid length for $customer_center_cutoff when calling ServiceSummaryEstimatedArrival., must be bigger than or equal to 1.');
        }

        $this->container['customer_center_cutoff'] = $customer_center_cutoff;

        return $this;
    }

    /**
     * Gets delay_count
     *
     * @return string|null
     */
    public function getDelayCount()
    {
        return $this->container['delay_count'];
    }

    /**
     * Sets delay_count
     *
     * @param string|null $delay_count Number of days delayed at customs. Returned for International requests.
     *
     * @return self
     */
    public function setDelayCount($delay_count)
    {
        if (is_null($delay_count)) {
            throw new \InvalidArgumentException('non-nullable delay_count cannot be null');
        }
        if ((mb_strlen($delay_count) > 3)) {
            throw new \InvalidArgumentException('invalid length for $delay_count when calling ServiceSummaryEstimatedArrival., must be smaller than or equal to 3.');
        }
        if ((mb_strlen($delay_count) < 1)) {
            throw new \InvalidArgumentException('invalid length for $delay_count when calling ServiceSummaryEstimatedArrival., must be bigger than or equal to 1.');
        }

        $this->container['delay_count'] = $delay_count;

        return $this;
    }

    /**
     * Gets holiday_count
     *
     * @return string|null
     */
    public function getHolidayCount()
    {
        return $this->container['holiday_count'];
    }

    /**
     * Sets holiday_count
     *
     * @param string|null $holiday_count Number of National holidays during transit. Returned for International requests.
     *
     * @return self
     */
    public function setHolidayCount($holiday_count)
    {
        if (is_null($holiday_count)) {
            throw new \InvalidArgumentException('non-nullable holiday_count cannot be null');
        }
        if ((mb_strlen($holiday_count) > 2)) {
            throw new \InvalidArgumentException('invalid length for $holiday_count when calling ServiceSummaryEstimatedArrival., must be smaller than or equal to 2.');
        }
        if ((mb_strlen($holiday_count) < 1)) {
            throw new \InvalidArgumentException('invalid length for $holiday_count when calling ServiceSummaryEstimatedArrival., must be bigger than or equal to 1.');
        }

        $this->container['holiday_count'] = $holiday_count;

        return $this;
    }

    /**
     * Gets rest_days
     *
     * @return string|null
     */
    public function getRestDays()
    {
        return $this->container['rest_days'];
    }

    /**
     * Sets rest_days
     *
     * @param string|null $rest_days Number of rest days, i.e. non movement. Returned for International requests.
     *
     * @return self
     */
    public function setRestDays($rest_days)
    {
        if (is_null($rest_days)) {
            throw new \InvalidArgumentException('non-nullable rest_days cannot be null');
        }
        if ((mb_strlen($rest_days) > 2)) {
            throw new \InvalidArgumentException('invalid length for $rest_days when calling ServiceSummaryEstimatedArrival., must be smaller than or equal to 2.');
        }
        if ((mb_strlen($rest_days) < 1)) {
            throw new \InvalidArgumentException('invalid length for $rest_days when calling ServiceSummaryEstimatedArrival., must be bigger than or equal to 1.');
        }

        $this->container['rest_days'] = $rest_days;

        return $this;
    }

    /**
     * Gets total_transit_days
     *
     * @return string|null
     */
    public function getTotalTransitDays()
    {
        return $this->container['total_transit_days'];
    }

    /**
     * Sets total_transit_days
     *
     * @param string|null $total_transit_days The total number of days in transit from one location to the next. Returned for International requests.
     *
     * @return self
     */
    public function setTotalTransitDays($total_transit_days)
    {
        if (is_null($total_transit_days)) {
            throw new \InvalidArgumentException('non-nullable total_transit_days cannot be null');
        }
        if ((mb_strlen($total_transit_days) > 5)) {
            throw new \InvalidArgumentException('invalid length for $total_transit_days when calling ServiceSummaryEstimatedArrival., must be smaller than or equal to 5.');
        }
        if ((mb_strlen($total_transit_days) < 1)) {
            throw new \InvalidArgumentException('invalid length for $total_transit_days when calling ServiceSummaryEstimatedArrival., must be bigger than or equal to 1.');
        }

        $this->container['total_transit_days'] = $total_transit_days;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


