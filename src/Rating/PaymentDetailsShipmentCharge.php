<?php
/**
 * PaymentDetailsShipmentCharge
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  AntibodiesOnline\UpsApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Rate
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace AntibodiesOnline\UpsApi\Rating;

use \ArrayAccess;
use \AntibodiesOnline\UpsApi\ObjectSerializer;

/**
 * PaymentDetailsShipmentCharge Class Doc Comment
 *
 * @category Class
 * @description Shipment charge container.  If Duty and Tax charges are applicable to a shipment and a payer is not specified, the default payer of Duty and Tax charges is Bill to Receiver. There will be no default payer of Duty and Tax charges for DDU and DDP service.
 * @package  AntibodiesOnline\UpsApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PaymentDetailsShipmentCharge implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PaymentDetails_ShipmentCharge';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'type' => 'string',
        'bill_shipper' => '\AntibodiesOnline\UpsApi\Rating\ShipmentChargeBillShipper',
        'bill_receiver' => '\AntibodiesOnline\UpsApi\Rating\ShipmentChargeBillReceiver',
        'bill_third_party' => '\AntibodiesOnline\UpsApi\Rating\ShipmentChargeBillThirdParty',
        'consignee_billed_indicator' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'type' => null,
        'bill_shipper' => null,
        'bill_receiver' => null,
        'bill_third_party' => null,
        'consignee_billed_indicator' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'type' => false,
		'bill_shipper' => false,
		'bill_receiver' => false,
		'bill_third_party' => false,
		'consignee_billed_indicator' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'type' => 'Type',
        'bill_shipper' => 'BillShipper',
        'bill_receiver' => 'BillReceiver',
        'bill_third_party' => 'BillThirdParty',
        'consignee_billed_indicator' => 'ConsigneeBilledIndicator'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'type' => 'setType',
        'bill_shipper' => 'setBillShipper',
        'bill_receiver' => 'setBillReceiver',
        'bill_third_party' => 'setBillThirdParty',
        'consignee_billed_indicator' => 'setConsigneeBilledIndicator'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'type' => 'getType',
        'bill_shipper' => 'getBillShipper',
        'bill_receiver' => 'getBillReceiver',
        'bill_third_party' => 'getBillThirdParty',
        'consignee_billed_indicator' => 'getConsigneeBilledIndicator'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('bill_shipper', $data ?? [], null);
        $this->setIfExists('bill_receiver', $data ?? [], null);
        $this->setIfExists('bill_third_party', $data ?? [], null);
        $this->setIfExists('consignee_billed_indicator', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        if ((mb_strlen($this->container['type']) > 2)) {
            $invalidProperties[] = "invalid value for 'type', the character length must be smaller than or equal to 2.";
        }

        if ((mb_strlen($this->container['type']) < 2)) {
            $invalidProperties[] = "invalid value for 'type', the character length must be bigger than or equal to 2.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type Values are 01 = Transportation, 02 = Duties and Taxes
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        if ((mb_strlen($type) > 2)) {
            throw new \InvalidArgumentException('invalid length for $type when calling PaymentDetailsShipmentCharge., must be smaller than or equal to 2.');
        }
        if ((mb_strlen($type) < 2)) {
            throw new \InvalidArgumentException('invalid length for $type when calling PaymentDetailsShipmentCharge., must be bigger than or equal to 2.');
        }

        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets bill_shipper
     *
     * @return \AntibodiesOnline\UpsApi\Rating\ShipmentChargeBillShipper|null
     */
    public function getBillShipper()
    {
        return $this->container['bill_shipper'];
    }

    /**
     * Sets bill_shipper
     *
     * @param \AntibodiesOnline\UpsApi\Rating\ShipmentChargeBillShipper|null $bill_shipper bill_shipper
     *
     * @return self
     */
    public function setBillShipper($bill_shipper)
    {
        if (is_null($bill_shipper)) {
            throw new \InvalidArgumentException('non-nullable bill_shipper cannot be null');
        }
        $this->container['bill_shipper'] = $bill_shipper;

        return $this;
    }

    /**
     * Gets bill_receiver
     *
     * @return \AntibodiesOnline\UpsApi\Rating\ShipmentChargeBillReceiver|null
     */
    public function getBillReceiver()
    {
        return $this->container['bill_receiver'];
    }

    /**
     * Sets bill_receiver
     *
     * @param \AntibodiesOnline\UpsApi\Rating\ShipmentChargeBillReceiver|null $bill_receiver bill_receiver
     *
     * @return self
     */
    public function setBillReceiver($bill_receiver)
    {
        if (is_null($bill_receiver)) {
            throw new \InvalidArgumentException('non-nullable bill_receiver cannot be null');
        }
        $this->container['bill_receiver'] = $bill_receiver;

        return $this;
    }

    /**
     * Gets bill_third_party
     *
     * @return \AntibodiesOnline\UpsApi\Rating\ShipmentChargeBillThirdParty|null
     */
    public function getBillThirdParty()
    {
        return $this->container['bill_third_party'];
    }

    /**
     * Sets bill_third_party
     *
     * @param \AntibodiesOnline\UpsApi\Rating\ShipmentChargeBillThirdParty|null $bill_third_party bill_third_party
     *
     * @return self
     */
    public function setBillThirdParty($bill_third_party)
    {
        if (is_null($bill_third_party)) {
            throw new \InvalidArgumentException('non-nullable bill_third_party cannot be null');
        }
        $this->container['bill_third_party'] = $bill_third_party;

        return $this;
    }

    /**
     * Gets consignee_billed_indicator
     *
     * @return string|null
     */
    public function getConsigneeBilledIndicator()
    {
        return $this->container['consignee_billed_indicator'];
    }

    /**
     * Sets consignee_billed_indicator
     *
     * @param string|null $consignee_billed_indicator Consignee Billing payment option indicator. The presence indicates consignee billing option is selected. The absence indicates one of the other payment options is selected.  Empty Tag. This element or its sibling element, BillShipper, BillReceiver or BillThirdParty, must be present but no more than one can be present. This billing option is valid for a shipment charge type of Transportation only. Only applies to US/PR and PR/US shipment origins and destination.
     *
     * @return self
     */
    public function setConsigneeBilledIndicator($consignee_billed_indicator)
    {
        if (is_null($consignee_billed_indicator)) {
            throw new \InvalidArgumentException('non-nullable consignee_billed_indicator cannot be null');
        }


        $this->container['consignee_billed_indicator'] = $consignee_billed_indicator;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


