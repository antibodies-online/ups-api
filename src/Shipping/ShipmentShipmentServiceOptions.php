<?php
/**
 * ShipmentShipmentServiceOptions
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  AntibodiesOnline\UpsApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Ship
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace AntibodiesOnline\UpsApi\Shipping;

use \ArrayAccess;
use \AntibodiesOnline\UpsApi\ObjectSerializer;

/**
 * ShipmentShipmentServiceOptions Class Doc Comment
 *
 * @category Class
 * @description Container for Shipment Service Options.
 * @package  AntibodiesOnline\UpsApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ShipmentShipmentServiceOptions implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Shipment_ShipmentServiceOptions';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'saturday_delivery_indicator' => 'string',
        'saturday_pickup_indicator' => 'string',
        'cod' => '\AntibodiesOnline\UpsApi\Shipping\ShipmentServiceOptionsCOD',
        'access_point_cod' => '\AntibodiesOnline\UpsApi\Shipping\ShipmentServiceOptionsAccessPointCOD',
        'deliver_to_addressee_only_indicator' => 'string',
        'direct_delivery_only_indicator' => 'string',
        'notification' => '\AntibodiesOnline\UpsApi\Shipping\ShipmentServiceOptionsNotification[]',
        'label_delivery' => '\AntibodiesOnline\UpsApi\Shipping\ShipmentServiceOptionsLabelDelivery',
        'international_forms' => '\AntibodiesOnline\UpsApi\Shipping\ShipmentServiceOptionsInternationalForms',
        'delivery_confirmation' => '\AntibodiesOnline\UpsApi\Shipping\ShipmentServiceOptionsDeliveryConfirmation',
        'return_of_document_indicator' => 'string',
        'import_control_indicator' => 'string',
        'label_method' => '\AntibodiesOnline\UpsApi\Shipping\ShipmentServiceOptionsLabelMethod',
        'commercial_invoice_removal_indicator' => 'string',
        'up_scarbonneutral_indicator' => 'string',
        'pre_alert_notification' => '\AntibodiesOnline\UpsApi\Shipping\ShipmentServiceOptionsPreAlertNotification[]',
        'exchange_forward_indicator' => 'string',
        'hold_for_pickup_indicator' => 'string',
        'dropoff_at_ups_facility_indicator' => 'string',
        'lift_gate_for_pick_up_indicator' => 'string',
        'lift_gate_for_delivery_indicator' => 'string',
        'sdl_shipment_indicator' => 'string',
        'epra_release_code' => 'string',
        'restricted_articles' => '\AntibodiesOnline\UpsApi\Shipping\ShipmentServiceOptionsRestrictedArticles',
        'inside_delivery' => 'string',
        'item_disposal' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'saturday_delivery_indicator' => null,
        'saturday_pickup_indicator' => null,
        'cod' => null,
        'access_point_cod' => null,
        'deliver_to_addressee_only_indicator' => null,
        'direct_delivery_only_indicator' => null,
        'notification' => null,
        'label_delivery' => null,
        'international_forms' => null,
        'delivery_confirmation' => null,
        'return_of_document_indicator' => null,
        'import_control_indicator' => null,
        'label_method' => null,
        'commercial_invoice_removal_indicator' => null,
        'up_scarbonneutral_indicator' => null,
        'pre_alert_notification' => null,
        'exchange_forward_indicator' => null,
        'hold_for_pickup_indicator' => null,
        'dropoff_at_ups_facility_indicator' => null,
        'lift_gate_for_pick_up_indicator' => null,
        'lift_gate_for_delivery_indicator' => null,
        'sdl_shipment_indicator' => null,
        'epra_release_code' => null,
        'restricted_articles' => null,
        'inside_delivery' => null,
        'item_disposal' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'saturday_delivery_indicator' => false,
		'saturday_pickup_indicator' => false,
		'cod' => false,
		'access_point_cod' => false,
		'deliver_to_addressee_only_indicator' => false,
		'direct_delivery_only_indicator' => false,
		'notification' => false,
		'label_delivery' => false,
		'international_forms' => false,
		'delivery_confirmation' => false,
		'return_of_document_indicator' => false,
		'import_control_indicator' => false,
		'label_method' => false,
		'commercial_invoice_removal_indicator' => false,
		'up_scarbonneutral_indicator' => false,
		'pre_alert_notification' => false,
		'exchange_forward_indicator' => false,
		'hold_for_pickup_indicator' => false,
		'dropoff_at_ups_facility_indicator' => false,
		'lift_gate_for_pick_up_indicator' => false,
		'lift_gate_for_delivery_indicator' => false,
		'sdl_shipment_indicator' => false,
		'epra_release_code' => false,
		'restricted_articles' => false,
		'inside_delivery' => false,
		'item_disposal' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'saturday_delivery_indicator' => 'SaturdayDeliveryIndicator',
        'saturday_pickup_indicator' => 'SaturdayPickupIndicator',
        'cod' => 'COD',
        'access_point_cod' => 'AccessPointCOD',
        'deliver_to_addressee_only_indicator' => 'DeliverToAddresseeOnlyIndicator',
        'direct_delivery_only_indicator' => 'DirectDeliveryOnlyIndicator',
        'notification' => 'Notification',
        'label_delivery' => 'LabelDelivery',
        'international_forms' => 'InternationalForms',
        'delivery_confirmation' => 'DeliveryConfirmation',
        'return_of_document_indicator' => 'ReturnOfDocumentIndicator',
        'import_control_indicator' => 'ImportControlIndicator',
        'label_method' => 'LabelMethod',
        'commercial_invoice_removal_indicator' => 'CommercialInvoiceRemovalIndicator',
        'up_scarbonneutral_indicator' => 'UPScarbonneutralIndicator',
        'pre_alert_notification' => 'PreAlertNotification',
        'exchange_forward_indicator' => 'ExchangeForwardIndicator',
        'hold_for_pickup_indicator' => 'HoldForPickupIndicator',
        'dropoff_at_ups_facility_indicator' => 'DropoffAtUPSFacilityIndicator',
        'lift_gate_for_pick_up_indicator' => 'LiftGateForPickUpIndicator',
        'lift_gate_for_delivery_indicator' => 'LiftGateForDeliveryIndicator',
        'sdl_shipment_indicator' => 'SDLShipmentIndicator',
        'epra_release_code' => 'EPRAReleaseCode',
        'restricted_articles' => 'RestrictedArticles',
        'inside_delivery' => 'InsideDelivery',
        'item_disposal' => 'ItemDisposal'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'saturday_delivery_indicator' => 'setSaturdayDeliveryIndicator',
        'saturday_pickup_indicator' => 'setSaturdayPickupIndicator',
        'cod' => 'setCod',
        'access_point_cod' => 'setAccessPointCod',
        'deliver_to_addressee_only_indicator' => 'setDeliverToAddresseeOnlyIndicator',
        'direct_delivery_only_indicator' => 'setDirectDeliveryOnlyIndicator',
        'notification' => 'setNotification',
        'label_delivery' => 'setLabelDelivery',
        'international_forms' => 'setInternationalForms',
        'delivery_confirmation' => 'setDeliveryConfirmation',
        'return_of_document_indicator' => 'setReturnOfDocumentIndicator',
        'import_control_indicator' => 'setImportControlIndicator',
        'label_method' => 'setLabelMethod',
        'commercial_invoice_removal_indicator' => 'setCommercialInvoiceRemovalIndicator',
        'up_scarbonneutral_indicator' => 'setUpScarbonneutralIndicator',
        'pre_alert_notification' => 'setPreAlertNotification',
        'exchange_forward_indicator' => 'setExchangeForwardIndicator',
        'hold_for_pickup_indicator' => 'setHoldForPickupIndicator',
        'dropoff_at_ups_facility_indicator' => 'setDropoffAtUpsFacilityIndicator',
        'lift_gate_for_pick_up_indicator' => 'setLiftGateForPickUpIndicator',
        'lift_gate_for_delivery_indicator' => 'setLiftGateForDeliveryIndicator',
        'sdl_shipment_indicator' => 'setSdlShipmentIndicator',
        'epra_release_code' => 'setEpraReleaseCode',
        'restricted_articles' => 'setRestrictedArticles',
        'inside_delivery' => 'setInsideDelivery',
        'item_disposal' => 'setItemDisposal'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'saturday_delivery_indicator' => 'getSaturdayDeliveryIndicator',
        'saturday_pickup_indicator' => 'getSaturdayPickupIndicator',
        'cod' => 'getCod',
        'access_point_cod' => 'getAccessPointCod',
        'deliver_to_addressee_only_indicator' => 'getDeliverToAddresseeOnlyIndicator',
        'direct_delivery_only_indicator' => 'getDirectDeliveryOnlyIndicator',
        'notification' => 'getNotification',
        'label_delivery' => 'getLabelDelivery',
        'international_forms' => 'getInternationalForms',
        'delivery_confirmation' => 'getDeliveryConfirmation',
        'return_of_document_indicator' => 'getReturnOfDocumentIndicator',
        'import_control_indicator' => 'getImportControlIndicator',
        'label_method' => 'getLabelMethod',
        'commercial_invoice_removal_indicator' => 'getCommercialInvoiceRemovalIndicator',
        'up_scarbonneutral_indicator' => 'getUpScarbonneutralIndicator',
        'pre_alert_notification' => 'getPreAlertNotification',
        'exchange_forward_indicator' => 'getExchangeForwardIndicator',
        'hold_for_pickup_indicator' => 'getHoldForPickupIndicator',
        'dropoff_at_ups_facility_indicator' => 'getDropoffAtUpsFacilityIndicator',
        'lift_gate_for_pick_up_indicator' => 'getLiftGateForPickUpIndicator',
        'lift_gate_for_delivery_indicator' => 'getLiftGateForDeliveryIndicator',
        'sdl_shipment_indicator' => 'getSdlShipmentIndicator',
        'epra_release_code' => 'getEpraReleaseCode',
        'restricted_articles' => 'getRestrictedArticles',
        'inside_delivery' => 'getInsideDelivery',
        'item_disposal' => 'getItemDisposal'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('saturday_delivery_indicator', $data ?? [], null);
        $this->setIfExists('saturday_pickup_indicator', $data ?? [], null);
        $this->setIfExists('cod', $data ?? [], null);
        $this->setIfExists('access_point_cod', $data ?? [], null);
        $this->setIfExists('deliver_to_addressee_only_indicator', $data ?? [], null);
        $this->setIfExists('direct_delivery_only_indicator', $data ?? [], null);
        $this->setIfExists('notification', $data ?? [], null);
        $this->setIfExists('label_delivery', $data ?? [], null);
        $this->setIfExists('international_forms', $data ?? [], null);
        $this->setIfExists('delivery_confirmation', $data ?? [], null);
        $this->setIfExists('return_of_document_indicator', $data ?? [], null);
        $this->setIfExists('import_control_indicator', $data ?? [], null);
        $this->setIfExists('label_method', $data ?? [], null);
        $this->setIfExists('commercial_invoice_removal_indicator', $data ?? [], null);
        $this->setIfExists('up_scarbonneutral_indicator', $data ?? [], null);
        $this->setIfExists('pre_alert_notification', $data ?? [], null);
        $this->setIfExists('exchange_forward_indicator', $data ?? [], null);
        $this->setIfExists('hold_for_pickup_indicator', $data ?? [], null);
        $this->setIfExists('dropoff_at_ups_facility_indicator', $data ?? [], null);
        $this->setIfExists('lift_gate_for_pick_up_indicator', $data ?? [], null);
        $this->setIfExists('lift_gate_for_delivery_indicator', $data ?? [], null);
        $this->setIfExists('sdl_shipment_indicator', $data ?? [], null);
        $this->setIfExists('epra_release_code', $data ?? [], null);
        $this->setIfExists('restricted_articles', $data ?? [], null);
        $this->setIfExists('inside_delivery', $data ?? [], null);
        $this->setIfExists('item_disposal', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['epra_release_code']) && (mb_strlen($this->container['epra_release_code']) > 6)) {
            $invalidProperties[] = "invalid value for 'epra_release_code', the character length must be smaller than or equal to 6.";
        }

        if (!is_null($this->container['epra_release_code']) && (mb_strlen($this->container['epra_release_code']) < 4)) {
            $invalidProperties[] = "invalid value for 'epra_release_code', the character length must be bigger than or equal to 4.";
        }

        if (!is_null($this->container['inside_delivery']) && (mb_strlen($this->container['inside_delivery']) > 2)) {
            $invalidProperties[] = "invalid value for 'inside_delivery', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['inside_delivery']) && (mb_strlen($this->container['inside_delivery']) < 2)) {
            $invalidProperties[] = "invalid value for 'inside_delivery', the character length must be bigger than or equal to 2.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets saturday_delivery_indicator
     *
     * @return string|null
     */
    public function getSaturdayDeliveryIndicator()
    {
        return $this->container['saturday_delivery_indicator'];
    }

    /**
     * Sets saturday_delivery_indicator
     *
     * @param string|null $saturday_delivery_indicator Saturday delivery indicator. The presence indicates Saturday delivery is requested and the absence indicates Saturday delivery is not requested.  This is an empty tag, any value inside is ignored.
     *
     * @return self
     */
    public function setSaturdayDeliveryIndicator($saturday_delivery_indicator)
    {
        if (is_null($saturday_delivery_indicator)) {
            throw new \InvalidArgumentException('non-nullable saturday_delivery_indicator cannot be null');
        }


        $this->container['saturday_delivery_indicator'] = $saturday_delivery_indicator;

        return $this;
    }

    /**
     * Gets saturday_pickup_indicator
     *
     * @return string|null
     */
    public function getSaturdayPickupIndicator()
    {
        return $this->container['saturday_pickup_indicator'];
    }

    /**
     * Sets saturday_pickup_indicator
     *
     * @param string|null $saturday_pickup_indicator Saturday pickup indicator. The presence indicates Saturday pickup is requested and the absence indicates Saturday pickup is not requested.  This is an empty tag, any value inside is ignored.
     *
     * @return self
     */
    public function setSaturdayPickupIndicator($saturday_pickup_indicator)
    {
        if (is_null($saturday_pickup_indicator)) {
            throw new \InvalidArgumentException('non-nullable saturday_pickup_indicator cannot be null');
        }


        $this->container['saturday_pickup_indicator'] = $saturday_pickup_indicator;

        return $this;
    }

    /**
     * Gets cod
     *
     * @return \AntibodiesOnline\UpsApi\Shipping\ShipmentServiceOptionsCOD|null
     */
    public function getCod()
    {
        return $this->container['cod'];
    }

    /**
     * Sets cod
     *
     * @param \AntibodiesOnline\UpsApi\Shipping\ShipmentServiceOptionsCOD|null $cod cod
     *
     * @return self
     */
    public function setCod($cod)
    {
        if (is_null($cod)) {
            throw new \InvalidArgumentException('non-nullable cod cannot be null');
        }
        $this->container['cod'] = $cod;

        return $this;
    }

    /**
     * Gets access_point_cod
     *
     * @return \AntibodiesOnline\UpsApi\Shipping\ShipmentServiceOptionsAccessPointCOD|null
     */
    public function getAccessPointCod()
    {
        return $this->container['access_point_cod'];
    }

    /**
     * Sets access_point_cod
     *
     * @param \AntibodiesOnline\UpsApi\Shipping\ShipmentServiceOptionsAccessPointCOD|null $access_point_cod access_point_cod
     *
     * @return self
     */
    public function setAccessPointCod($access_point_cod)
    {
        if (is_null($access_point_cod)) {
            throw new \InvalidArgumentException('non-nullable access_point_cod cannot be null');
        }
        $this->container['access_point_cod'] = $access_point_cod;

        return $this;
    }

    /**
     * Gets deliver_to_addressee_only_indicator
     *
     * @return string|null
     */
    public function getDeliverToAddresseeOnlyIndicator()
    {
        return $this->container['deliver_to_addressee_only_indicator'];
    }

    /**
     * Sets deliver_to_addressee_only_indicator
     *
     * @param string|null $deliver_to_addressee_only_indicator Presence/Absence Indicator. Any value inside is ignored. DeliverToAddresseeOnlyIndicator is shipper specified restriction that requires the addressee to be the one who takes final delivery of the \"Hold For PickUp at UPS Access Point\" package. Presence of indicator means shipper restriction will apply to the shipment.  Only valid for Shipment Indication type \"01 - Hold For PickUp at UPS Access Point\".
     *
     * @return self
     */
    public function setDeliverToAddresseeOnlyIndicator($deliver_to_addressee_only_indicator)
    {
        if (is_null($deliver_to_addressee_only_indicator)) {
            throw new \InvalidArgumentException('non-nullable deliver_to_addressee_only_indicator cannot be null');
        }


        $this->container['deliver_to_addressee_only_indicator'] = $deliver_to_addressee_only_indicator;

        return $this;
    }

    /**
     * Gets direct_delivery_only_indicator
     *
     * @return string|null
     */
    public function getDirectDeliveryOnlyIndicator()
    {
        return $this->container['direct_delivery_only_indicator'];
    }

    /**
     * Sets direct_delivery_only_indicator
     *
     * @param string|null $direct_delivery_only_indicator Presence/Absence Indicator. Any value inside is ignored. Direct Delivery Only (DDO) accessorial in a request would ensure that delivery is made only to the ship to address on the shipping label.  This accessorial is not valid with Shipment Indication Type \"01 - Hold For Pickup At UPS Access Point\" and \"02 - UPS Access Point Delivery\".
     *
     * @return self
     */
    public function setDirectDeliveryOnlyIndicator($direct_delivery_only_indicator)
    {
        if (is_null($direct_delivery_only_indicator)) {
            throw new \InvalidArgumentException('non-nullable direct_delivery_only_indicator cannot be null');
        }


        $this->container['direct_delivery_only_indicator'] = $direct_delivery_only_indicator;

        return $this;
    }

    /**
     * Gets notification
     *
     * @return \AntibodiesOnline\UpsApi\Shipping\ShipmentServiceOptionsNotification[]|null
     */
    public function getNotification()
    {
        return $this->container['notification'];
    }

    /**
     * Sets notification
     *
     * @param \AntibodiesOnline\UpsApi\Shipping\ShipmentServiceOptionsNotification[]|null $notification notification
     *
     * @return self
     */
    public function setNotification($notification)
    {
        if (is_null($notification)) {
            throw new \InvalidArgumentException('non-nullable notification cannot be null');
        }


        $this->container['notification'] = $notification;

        return $this;
    }

    /**
     * Gets label_delivery
     *
     * @return \AntibodiesOnline\UpsApi\Shipping\ShipmentServiceOptionsLabelDelivery|null
     */
    public function getLabelDelivery()
    {
        return $this->container['label_delivery'];
    }

    /**
     * Sets label_delivery
     *
     * @param \AntibodiesOnline\UpsApi\Shipping\ShipmentServiceOptionsLabelDelivery|null $label_delivery label_delivery
     *
     * @return self
     */
    public function setLabelDelivery($label_delivery)
    {
        if (is_null($label_delivery)) {
            throw new \InvalidArgumentException('non-nullable label_delivery cannot be null');
        }
        $this->container['label_delivery'] = $label_delivery;

        return $this;
    }

    /**
     * Gets international_forms
     *
     * @return \AntibodiesOnline\UpsApi\Shipping\ShipmentServiceOptionsInternationalForms|null
     */
    public function getInternationalForms()
    {
        return $this->container['international_forms'];
    }

    /**
     * Sets international_forms
     *
     * @param \AntibodiesOnline\UpsApi\Shipping\ShipmentServiceOptionsInternationalForms|null $international_forms international_forms
     *
     * @return self
     */
    public function setInternationalForms($international_forms)
    {
        if (is_null($international_forms)) {
            throw new \InvalidArgumentException('non-nullable international_forms cannot be null');
        }
        $this->container['international_forms'] = $international_forms;

        return $this;
    }

    /**
     * Gets delivery_confirmation
     *
     * @return \AntibodiesOnline\UpsApi\Shipping\ShipmentServiceOptionsDeliveryConfirmation|null
     */
    public function getDeliveryConfirmation()
    {
        return $this->container['delivery_confirmation'];
    }

    /**
     * Sets delivery_confirmation
     *
     * @param \AntibodiesOnline\UpsApi\Shipping\ShipmentServiceOptionsDeliveryConfirmation|null $delivery_confirmation delivery_confirmation
     *
     * @return self
     */
    public function setDeliveryConfirmation($delivery_confirmation)
    {
        if (is_null($delivery_confirmation)) {
            throw new \InvalidArgumentException('non-nullable delivery_confirmation cannot be null');
        }
        $this->container['delivery_confirmation'] = $delivery_confirmation;

        return $this;
    }

    /**
     * Gets return_of_document_indicator
     *
     * @return string|null
     */
    public function getReturnOfDocumentIndicator()
    {
        return $this->container['return_of_document_indicator'];
    }

    /**
     * Sets return_of_document_indicator
     *
     * @param string|null $return_of_document_indicator The flag indicates the ReturnOfDocument accessorial has been requested.  Valid for Poland to Poland forward shipment only.
     *
     * @return self
     */
    public function setReturnOfDocumentIndicator($return_of_document_indicator)
    {
        if (is_null($return_of_document_indicator)) {
            throw new \InvalidArgumentException('non-nullable return_of_document_indicator cannot be null');
        }


        $this->container['return_of_document_indicator'] = $return_of_document_indicator;

        return $this;
    }

    /**
     * Gets import_control_indicator
     *
     * @return string|null
     */
    public function getImportControlIndicator()
    {
        return $this->container['import_control_indicator'];
    }

    /**
     * Sets import_control_indicator
     *
     * @param string|null $import_control_indicator Indicates that the Shipment is an ImportControl shipment.
     *
     * @return self
     */
    public function setImportControlIndicator($import_control_indicator)
    {
        if (is_null($import_control_indicator)) {
            throw new \InvalidArgumentException('non-nullable import_control_indicator cannot be null');
        }


        $this->container['import_control_indicator'] = $import_control_indicator;

        return $this;
    }

    /**
     * Gets label_method
     *
     * @return \AntibodiesOnline\UpsApi\Shipping\ShipmentServiceOptionsLabelMethod|null
     */
    public function getLabelMethod()
    {
        return $this->container['label_method'];
    }

    /**
     * Sets label_method
     *
     * @param \AntibodiesOnline\UpsApi\Shipping\ShipmentServiceOptionsLabelMethod|null $label_method label_method
     *
     * @return self
     */
    public function setLabelMethod($label_method)
    {
        if (is_null($label_method)) {
            throw new \InvalidArgumentException('non-nullable label_method cannot be null');
        }
        $this->container['label_method'] = $label_method;

        return $this;
    }

    /**
     * Gets commercial_invoice_removal_indicator
     *
     * @return string|null
     */
    public function getCommercialInvoiceRemovalIndicator()
    {
        return $this->container['commercial_invoice_removal_indicator'];
    }

    /**
     * Sets commercial_invoice_removal_indicator
     *
     * @param string|null $commercial_invoice_removal_indicator CommercialInvoiceRemovalIndicator allows a shipper to dictate UPS to remove the Commercial Invoice from the user's shipment before the shipment is delivered to the ultimate consignee.
     *
     * @return self
     */
    public function setCommercialInvoiceRemovalIndicator($commercial_invoice_removal_indicator)
    {
        if (is_null($commercial_invoice_removal_indicator)) {
            throw new \InvalidArgumentException('non-nullable commercial_invoice_removal_indicator cannot be null');
        }


        $this->container['commercial_invoice_removal_indicator'] = $commercial_invoice_removal_indicator;

        return $this;
    }

    /**
     * Gets up_scarbonneutral_indicator
     *
     * @return string|null
     */
    public function getUpScarbonneutralIndicator()
    {
        return $this->container['up_scarbonneutral_indicator'];
    }

    /**
     * Sets up_scarbonneutral_indicator
     *
     * @param string|null $up_scarbonneutral_indicator UPS carbon neutral indicator presence at shipment level is required to create carbon neutral Shipments.
     *
     * @return self
     */
    public function setUpScarbonneutralIndicator($up_scarbonneutral_indicator)
    {
        if (is_null($up_scarbonneutral_indicator)) {
            throw new \InvalidArgumentException('non-nullable up_scarbonneutral_indicator cannot be null');
        }


        $this->container['up_scarbonneutral_indicator'] = $up_scarbonneutral_indicator;

        return $this;
    }

    /**
     * Gets pre_alert_notification
     *
     * @return \AntibodiesOnline\UpsApi\Shipping\ShipmentServiceOptionsPreAlertNotification[]|null
     */
    public function getPreAlertNotification()
    {
        return $this->container['pre_alert_notification'];
    }

    /**
     * Sets pre_alert_notification
     *
     * @param \AntibodiesOnline\UpsApi\Shipping\ShipmentServiceOptionsPreAlertNotification[]|null $pre_alert_notification pre_alert_notification
     *
     * @return self
     */
    public function setPreAlertNotification($pre_alert_notification)
    {
        if (is_null($pre_alert_notification)) {
            throw new \InvalidArgumentException('non-nullable pre_alert_notification cannot be null');
        }
        $this->container['pre_alert_notification'] = $pre_alert_notification;

        return $this;
    }

    /**
     * Gets exchange_forward_indicator
     *
     * @return string|null
     */
    public function getExchangeForwardIndicator()
    {
        return $this->container['exchange_forward_indicator'];
    }

    /**
     * Sets exchange_forward_indicator
     *
     * @param string|null $exchange_forward_indicator Exchange forward indicator presence at shipment level is required to create exchange forward Shipments.  In the label routing Instruction text will be defaulted to \"EXCHANGE-LIKE ITEM ONLY\".
     *
     * @return self
     */
    public function setExchangeForwardIndicator($exchange_forward_indicator)
    {
        if (is_null($exchange_forward_indicator)) {
            throw new \InvalidArgumentException('non-nullable exchange_forward_indicator cannot be null');
        }


        $this->container['exchange_forward_indicator'] = $exchange_forward_indicator;

        return $this;
    }

    /**
     * Gets hold_for_pickup_indicator
     *
     * @return string|null
     */
    public function getHoldForPickupIndicator()
    {
        return $this->container['hold_for_pickup_indicator'];
    }

    /**
     * Sets hold_for_pickup_indicator
     *
     * @param string|null $hold_for_pickup_indicator Hold For Pickup indicator. The empty tag means indicator is present.  This accessorial is only valid for UPS Worldwide Express Freight and UPS Worldwide Express Freight Midday Shipment.
     *
     * @return self
     */
    public function setHoldForPickupIndicator($hold_for_pickup_indicator)
    {
        if (is_null($hold_for_pickup_indicator)) {
            throw new \InvalidArgumentException('non-nullable hold_for_pickup_indicator cannot be null');
        }


        $this->container['hold_for_pickup_indicator'] = $hold_for_pickup_indicator;

        return $this;
    }

    /**
     * Gets dropoff_at_ups_facility_indicator
     *
     * @return string|null
     */
    public function getDropoffAtUpsFacilityIndicator()
    {
        return $this->container['dropoff_at_ups_facility_indicator'];
    }

    /**
     * Sets dropoff_at_ups_facility_indicator
     *
     * @param string|null $dropoff_at_ups_facility_indicator Drop off At UPS Facility indicator. The empty tag means indicator is present.  This accessorial is only valid for UPS Worldwide Express Freight and UPS Worldwide Express Freight Midday Shipment.
     *
     * @return self
     */
    public function setDropoffAtUpsFacilityIndicator($dropoff_at_ups_facility_indicator)
    {
        if (is_null($dropoff_at_ups_facility_indicator)) {
            throw new \InvalidArgumentException('non-nullable dropoff_at_ups_facility_indicator cannot be null');
        }


        $this->container['dropoff_at_ups_facility_indicator'] = $dropoff_at_ups_facility_indicator;

        return $this;
    }

    /**
     * Gets lift_gate_for_pick_up_indicator
     *
     * @return string|null
     */
    public function getLiftGateForPickUpIndicator()
    {
        return $this->container['lift_gate_for_pick_up_indicator'];
    }

    /**
     * Sets lift_gate_for_pick_up_indicator
     *
     * @param string|null $lift_gate_for_pick_up_indicator Lift Gate For Pick Up indicator. The empty tag means indicator is present.  Lift Gate for Pickup is not allowed with Drop Off At UPS Facility for a UPS Worldwide Express Freight and UPS Worldwide Express Freight Midday shipment.   When both Hold for Pickup and Drop Off At Facility are selected, neither of the Lift Gate accessorial (Pick Up or Delivery) are allowed for a UPS Worldwide Express Freight and UPS Worldwide Express Freight Midday shipment.   This accessorial is only valid for UPS Worldwide Express Freight and UPS Worldwide Express Freight Midday Shipment.
     *
     * @return self
     */
    public function setLiftGateForPickUpIndicator($lift_gate_for_pick_up_indicator)
    {
        if (is_null($lift_gate_for_pick_up_indicator)) {
            throw new \InvalidArgumentException('non-nullable lift_gate_for_pick_up_indicator cannot be null');
        }


        $this->container['lift_gate_for_pick_up_indicator'] = $lift_gate_for_pick_up_indicator;

        return $this;
    }

    /**
     * Gets lift_gate_for_delivery_indicator
     *
     * @return string|null
     */
    public function getLiftGateForDeliveryIndicator()
    {
        return $this->container['lift_gate_for_delivery_indicator'];
    }

    /**
     * Sets lift_gate_for_delivery_indicator
     *
     * @param string|null $lift_gate_for_delivery_indicator Lift Gate For Delivery indicator. The empty tag means indicator is present.  Lift Gate for Delivery is not allowed with Hold For Pickup for a UPS Worldwide Express Freight and UPS Worldwide Express Freight Midday shipment.   When both Hold for Pickup and Drop Off At UPS Facility are selected, neither of the Lift Gate accessorial (Pick Up or Delivery) are allowed for a UPS Worldwide Express Freight and UPS Worldwide Express Freight Midday shipment.   This accessorial is only valid for UPS Worldwide Express Freight and UPS Worldwide Express Freight Midday Shipment.
     *
     * @return self
     */
    public function setLiftGateForDeliveryIndicator($lift_gate_for_delivery_indicator)
    {
        if (is_null($lift_gate_for_delivery_indicator)) {
            throw new \InvalidArgumentException('non-nullable lift_gate_for_delivery_indicator cannot be null');
        }


        $this->container['lift_gate_for_delivery_indicator'] = $lift_gate_for_delivery_indicator;

        return $this;
    }

    /**
     * Gets sdl_shipment_indicator
     *
     * @return string|null
     */
    public function getSdlShipmentIndicator()
    {
        return $this->container['sdl_shipment_indicator'];
    }

    /**
     * Sets sdl_shipment_indicator
     *
     * @param string|null $sdl_shipment_indicator The presence of the tag SDLShipmentIndicator indicates Shipment is SDL. SDLShipmentIndicator presence means EEI form/ EEI Filing option required.
     *
     * @return self
     */
    public function setSdlShipmentIndicator($sdl_shipment_indicator)
    {
        if (is_null($sdl_shipment_indicator)) {
            throw new \InvalidArgumentException('non-nullable sdl_shipment_indicator cannot be null');
        }


        $this->container['sdl_shipment_indicator'] = $sdl_shipment_indicator;

        return $this;
    }

    /**
     * Gets epra_release_code
     *
     * @return string|null
     */
    public function getEpraReleaseCode()
    {
        return $this->container['epra_release_code'];
    }

    /**
     * Sets epra_release_code
     *
     * @param string|null $epra_release_code Package Release code allows the consignee or claimant to pick-up a package at a UPS Access Point. The shipper must provide the Package Release Code to the consignee so that they can provide the code to the UPS Access Point personnel as another item for authentication before the package is released to them. Package Release Code is only valid with ShipmentIndicationType 01 - Hold for Pickup at UPS Access Point.  The release code must be between length 4 and 6 and only contain numbers.
     *
     * @return self
     */
    public function setEpraReleaseCode($epra_release_code)
    {
        if (is_null($epra_release_code)) {
            throw new \InvalidArgumentException('non-nullable epra_release_code cannot be null');
        }
        if ((mb_strlen($epra_release_code) > 6)) {
            throw new \InvalidArgumentException('invalid length for $epra_release_code when calling ShipmentShipmentServiceOptions., must be smaller than or equal to 6.');
        }
        if ((mb_strlen($epra_release_code) < 4)) {
            throw new \InvalidArgumentException('invalid length for $epra_release_code when calling ShipmentShipmentServiceOptions., must be bigger than or equal to 4.');
        }

        $this->container['epra_release_code'] = $epra_release_code;

        return $this;
    }

    /**
     * Gets restricted_articles
     *
     * @return \AntibodiesOnline\UpsApi\Shipping\ShipmentServiceOptionsRestrictedArticles|null
     */
    public function getRestrictedArticles()
    {
        return $this->container['restricted_articles'];
    }

    /**
     * Sets restricted_articles
     *
     * @param \AntibodiesOnline\UpsApi\Shipping\ShipmentServiceOptionsRestrictedArticles|null $restricted_articles restricted_articles
     *
     * @return self
     */
    public function setRestrictedArticles($restricted_articles)
    {
        if (is_null($restricted_articles)) {
            throw new \InvalidArgumentException('non-nullable restricted_articles cannot be null');
        }
        $this->container['restricted_articles'] = $restricted_articles;

        return $this;
    }

    /**
     * Gets inside_delivery
     *
     * @return string|null
     */
    public function getInsideDelivery()
    {
        return $this->container['inside_delivery'];
    }

    /**
     * Sets inside_delivery
     *
     * @param string|null $inside_delivery Inside delivery accessory. Valid values: 01 - White Glove 02 - Room of Choice 03 - Installation Default is Room of Choice.  Shippers account needs to have a valid contract for Heavy Goods Service.
     *
     * @return self
     */
    public function setInsideDelivery($inside_delivery)
    {
        if (is_null($inside_delivery)) {
            throw new \InvalidArgumentException('non-nullable inside_delivery cannot be null');
        }
        if ((mb_strlen($inside_delivery) > 2)) {
            throw new \InvalidArgumentException('invalid length for $inside_delivery when calling ShipmentShipmentServiceOptions., must be smaller than or equal to 2.');
        }
        if ((mb_strlen($inside_delivery) < 2)) {
            throw new \InvalidArgumentException('invalid length for $inside_delivery when calling ShipmentShipmentServiceOptions., must be bigger than or equal to 2.');
        }

        $this->container['inside_delivery'] = $inside_delivery;

        return $this;
    }

    /**
     * Gets item_disposal
     *
     * @return string|null
     */
    public function getItemDisposal()
    {
        return $this->container['item_disposal'];
    }

    /**
     * Sets item_disposal
     *
     * @param string|null $item_disposal Presence/Absence indicator. True if present; false otherwise. Any value is ignored. If present, indicates that the customer would like items disposed.  Shippers account needs to have a valid contract for Heavy Goods Service.
     *
     * @return self
     */
    public function setItemDisposal($item_disposal)
    {
        if (is_null($item_disposal)) {
            throw new \InvalidArgumentException('non-nullable item_disposal cannot be null');
        }


        $this->container['item_disposal'] = $item_disposal;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


