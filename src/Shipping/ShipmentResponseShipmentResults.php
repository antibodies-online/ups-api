<?php
/**
 * ShipmentResponseShipmentResults
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  AntibodiesOnline\UpsApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Ship
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace AntibodiesOnline\UpsApi\Shipping;

use \ArrayAccess;
use \AntibodiesOnline\UpsApi\ObjectSerializer;

/**
 * ShipmentResponseShipmentResults Class Doc Comment
 *
 * @category Class
 * @description Shipment Results container.
 * @package  AntibodiesOnline\UpsApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ShipmentResponseShipmentResults implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ShipmentResponse_ShipmentResults';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'disclaimer' => '\AntibodiesOnline\UpsApi\Shipping\ShipmentResponseShipmentResultsDisclaimer',
        'shipment_charges' => '\AntibodiesOnline\UpsApi\Shipping\ShipmentResultsShipmentCharges',
        'negotiated_rate_charges' => '\AntibodiesOnline\UpsApi\Shipping\ShipmentResultsNegotiatedRateCharges',
        'frs_shipment_data' => '\AntibodiesOnline\UpsApi\Shipping\ShipmentResultsFRSShipmentData',
        'rating_method' => 'string',
        'billable_weight_calculation_method' => 'string',
        'billing_weight' => '\AntibodiesOnline\UpsApi\Shipping\ShipmentResultsBillingWeight',
        'shipment_identification_number' => 'string',
        'mi_dual_return_shipment_key' => 'string',
        'bar_code_image' => 'string',
        'package_results' => '\AntibodiesOnline\UpsApi\Shipping\ShipmentResponseShipmentResultsPackageResults',
        'control_log_receipt' => '\AntibodiesOnline\UpsApi\Shipping\ShipmentResponseShipmentResultsControlLogReceipt',
        'form' => '\AntibodiesOnline\UpsApi\Shipping\ShipmentResultsForm',
        'cod_turn_in_page' => '\AntibodiesOnline\UpsApi\Shipping\ShipmentResultsCODTurnInPage',
        'high_value_report' => '\AntibodiesOnline\UpsApi\Shipping\ShipmentResultsHighValueReport',
        'label_url' => 'string',
        'local_language_label_url' => 'string',
        'receipt_url' => 'string',
        'local_language_receipt_url' => 'string',
        'dg_paper_image' => '\AntibodiesOnline\UpsApi\Shipping\ShipmentResponseShipmentResultsDGPaperImage',
        'master_carton_id' => 'string',
        'roar_rated_indicator' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'disclaimer' => null,
        'shipment_charges' => null,
        'negotiated_rate_charges' => null,
        'frs_shipment_data' => null,
        'rating_method' => null,
        'billable_weight_calculation_method' => null,
        'billing_weight' => null,
        'shipment_identification_number' => null,
        'mi_dual_return_shipment_key' => null,
        'bar_code_image' => null,
        'package_results' => null,
        'control_log_receipt' => null,
        'form' => null,
        'cod_turn_in_page' => null,
        'high_value_report' => null,
        'label_url' => null,
        'local_language_label_url' => null,
        'receipt_url' => null,
        'local_language_receipt_url' => null,
        'dg_paper_image' => null,
        'master_carton_id' => null,
        'roar_rated_indicator' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'disclaimer' => false,
		'shipment_charges' => false,
		'negotiated_rate_charges' => false,
		'frs_shipment_data' => false,
		'rating_method' => false,
		'billable_weight_calculation_method' => false,
		'billing_weight' => false,
		'shipment_identification_number' => false,
		'mi_dual_return_shipment_key' => false,
		'bar_code_image' => false,
		'package_results' => false,
		'control_log_receipt' => false,
		'form' => false,
		'cod_turn_in_page' => false,
		'high_value_report' => false,
		'label_url' => false,
		'local_language_label_url' => false,
		'receipt_url' => false,
		'local_language_receipt_url' => false,
		'dg_paper_image' => false,
		'master_carton_id' => false,
		'roar_rated_indicator' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'disclaimer' => 'Disclaimer',
        'shipment_charges' => 'ShipmentCharges',
        'negotiated_rate_charges' => 'NegotiatedRateCharges',
        'frs_shipment_data' => 'FRSShipmentData',
        'rating_method' => 'RatingMethod',
        'billable_weight_calculation_method' => 'BillableWeightCalculationMethod',
        'billing_weight' => 'BillingWeight',
        'shipment_identification_number' => 'ShipmentIdentificationNumber',
        'mi_dual_return_shipment_key' => 'MIDualReturnShipmentKey',
        'bar_code_image' => 'BarCodeImage',
        'package_results' => 'PackageResults',
        'control_log_receipt' => 'ControlLogReceipt',
        'form' => 'Form',
        'cod_turn_in_page' => 'CODTurnInPage',
        'high_value_report' => 'HighValueReport',
        'label_url' => 'LabelURL',
        'local_language_label_url' => 'LocalLanguageLabelURL',
        'receipt_url' => 'ReceiptURL',
        'local_language_receipt_url' => 'LocalLanguageReceiptURL',
        'dg_paper_image' => 'DGPaperImage',
        'master_carton_id' => 'MasterCartonID',
        'roar_rated_indicator' => 'RoarRatedIndicator'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'disclaimer' => 'setDisclaimer',
        'shipment_charges' => 'setShipmentCharges',
        'negotiated_rate_charges' => 'setNegotiatedRateCharges',
        'frs_shipment_data' => 'setFrsShipmentData',
        'rating_method' => 'setRatingMethod',
        'billable_weight_calculation_method' => 'setBillableWeightCalculationMethod',
        'billing_weight' => 'setBillingWeight',
        'shipment_identification_number' => 'setShipmentIdentificationNumber',
        'mi_dual_return_shipment_key' => 'setMiDualReturnShipmentKey',
        'bar_code_image' => 'setBarCodeImage',
        'package_results' => 'setPackageResults',
        'control_log_receipt' => 'setControlLogReceipt',
        'form' => 'setForm',
        'cod_turn_in_page' => 'setCodTurnInPage',
        'high_value_report' => 'setHighValueReport',
        'label_url' => 'setLabelUrl',
        'local_language_label_url' => 'setLocalLanguageLabelUrl',
        'receipt_url' => 'setReceiptUrl',
        'local_language_receipt_url' => 'setLocalLanguageReceiptUrl',
        'dg_paper_image' => 'setDgPaperImage',
        'master_carton_id' => 'setMasterCartonId',
        'roar_rated_indicator' => 'setRoarRatedIndicator'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'disclaimer' => 'getDisclaimer',
        'shipment_charges' => 'getShipmentCharges',
        'negotiated_rate_charges' => 'getNegotiatedRateCharges',
        'frs_shipment_data' => 'getFrsShipmentData',
        'rating_method' => 'getRatingMethod',
        'billable_weight_calculation_method' => 'getBillableWeightCalculationMethod',
        'billing_weight' => 'getBillingWeight',
        'shipment_identification_number' => 'getShipmentIdentificationNumber',
        'mi_dual_return_shipment_key' => 'getMiDualReturnShipmentKey',
        'bar_code_image' => 'getBarCodeImage',
        'package_results' => 'getPackageResults',
        'control_log_receipt' => 'getControlLogReceipt',
        'form' => 'getForm',
        'cod_turn_in_page' => 'getCodTurnInPage',
        'high_value_report' => 'getHighValueReport',
        'label_url' => 'getLabelUrl',
        'local_language_label_url' => 'getLocalLanguageLabelUrl',
        'receipt_url' => 'getReceiptUrl',
        'local_language_receipt_url' => 'getLocalLanguageReceiptUrl',
        'dg_paper_image' => 'getDgPaperImage',
        'master_carton_id' => 'getMasterCartonId',
        'roar_rated_indicator' => 'getRoarRatedIndicator'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('disclaimer', $data ?? [], null);
        $this->setIfExists('shipment_charges', $data ?? [], null);
        $this->setIfExists('negotiated_rate_charges', $data ?? [], null);
        $this->setIfExists('frs_shipment_data', $data ?? [], null);
        $this->setIfExists('rating_method', $data ?? [], null);
        $this->setIfExists('billable_weight_calculation_method', $data ?? [], null);
        $this->setIfExists('billing_weight', $data ?? [], null);
        $this->setIfExists('shipment_identification_number', $data ?? [], null);
        $this->setIfExists('mi_dual_return_shipment_key', $data ?? [], null);
        $this->setIfExists('bar_code_image', $data ?? [], null);
        $this->setIfExists('package_results', $data ?? [], null);
        $this->setIfExists('control_log_receipt', $data ?? [], null);
        $this->setIfExists('form', $data ?? [], null);
        $this->setIfExists('cod_turn_in_page', $data ?? [], null);
        $this->setIfExists('high_value_report', $data ?? [], null);
        $this->setIfExists('label_url', $data ?? [], null);
        $this->setIfExists('local_language_label_url', $data ?? [], null);
        $this->setIfExists('receipt_url', $data ?? [], null);
        $this->setIfExists('local_language_receipt_url', $data ?? [], null);
        $this->setIfExists('dg_paper_image', $data ?? [], null);
        $this->setIfExists('master_carton_id', $data ?? [], null);
        $this->setIfExists('roar_rated_indicator', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['rating_method']) && (mb_strlen($this->container['rating_method']) > 2)) {
            $invalidProperties[] = "invalid value for 'rating_method', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['rating_method']) && (mb_strlen($this->container['rating_method']) < 2)) {
            $invalidProperties[] = "invalid value for 'rating_method', the character length must be bigger than or equal to 2.";
        }

        if (!is_null($this->container['billable_weight_calculation_method']) && (mb_strlen($this->container['billable_weight_calculation_method']) > 2)) {
            $invalidProperties[] = "invalid value for 'billable_weight_calculation_method', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['billable_weight_calculation_method']) && (mb_strlen($this->container['billable_weight_calculation_method']) < 2)) {
            $invalidProperties[] = "invalid value for 'billable_weight_calculation_method', the character length must be bigger than or equal to 2.";
        }

        if ($this->container['billing_weight'] === null) {
            $invalidProperties[] = "'billing_weight' can't be null";
        }
        if (!is_null($this->container['shipment_identification_number']) && (mb_strlen($this->container['shipment_identification_number']) > 18)) {
            $invalidProperties[] = "invalid value for 'shipment_identification_number', the character length must be smaller than or equal to 18.";
        }

        if (!is_null($this->container['shipment_identification_number']) && (mb_strlen($this->container['shipment_identification_number']) < 18)) {
            $invalidProperties[] = "invalid value for 'shipment_identification_number', the character length must be bigger than or equal to 18.";
        }

        if (!is_null($this->container['mi_dual_return_shipment_key']) && (mb_strlen($this->container['mi_dual_return_shipment_key']) > 50)) {
            $invalidProperties[] = "invalid value for 'mi_dual_return_shipment_key', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['mi_dual_return_shipment_key']) && (mb_strlen($this->container['mi_dual_return_shipment_key']) < 4)) {
            $invalidProperties[] = "invalid value for 'mi_dual_return_shipment_key', the character length must be bigger than or equal to 4.";
        }

        if (!is_null($this->container['master_carton_id']) && (mb_strlen($this->container['master_carton_id']) > 24)) {
            $invalidProperties[] = "invalid value for 'master_carton_id', the character length must be smaller than or equal to 24.";
        }

        if (!is_null($this->container['master_carton_id']) && (mb_strlen($this->container['master_carton_id']) < 1)) {
            $invalidProperties[] = "invalid value for 'master_carton_id', the character length must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets disclaimer
     *
     * @return \AntibodiesOnline\UpsApi\Shipping\ShipmentResponseShipmentResultsDisclaimer|null
     */
    public function getDisclaimer()
    {
        return $this->container['disclaimer'];
    }

    /**
     * Sets disclaimer
     *
     * @param \AntibodiesOnline\UpsApi\Shipping\ShipmentResponseShipmentResultsDisclaimer|null $disclaimer disclaimer
     *
     * @return self
     */
    public function setDisclaimer($disclaimer)
    {
        if (is_null($disclaimer)) {
            throw new \InvalidArgumentException('non-nullable disclaimer cannot be null');
        }
        $this->container['disclaimer'] = $disclaimer;

        return $this;
    }

    /**
     * Gets shipment_charges
     *
     * @return \AntibodiesOnline\UpsApi\Shipping\ShipmentResultsShipmentCharges|null
     */
    public function getShipmentCharges()
    {
        return $this->container['shipment_charges'];
    }

    /**
     * Sets shipment_charges
     *
     * @param \AntibodiesOnline\UpsApi\Shipping\ShipmentResultsShipmentCharges|null $shipment_charges shipment_charges
     *
     * @return self
     */
    public function setShipmentCharges($shipment_charges)
    {
        if (is_null($shipment_charges)) {
            throw new \InvalidArgumentException('non-nullable shipment_charges cannot be null');
        }
        $this->container['shipment_charges'] = $shipment_charges;

        return $this;
    }

    /**
     * Gets negotiated_rate_charges
     *
     * @return \AntibodiesOnline\UpsApi\Shipping\ShipmentResultsNegotiatedRateCharges|null
     */
    public function getNegotiatedRateCharges()
    {
        return $this->container['negotiated_rate_charges'];
    }

    /**
     * Sets negotiated_rate_charges
     *
     * @param \AntibodiesOnline\UpsApi\Shipping\ShipmentResultsNegotiatedRateCharges|null $negotiated_rate_charges negotiated_rate_charges
     *
     * @return self
     */
    public function setNegotiatedRateCharges($negotiated_rate_charges)
    {
        if (is_null($negotiated_rate_charges)) {
            throw new \InvalidArgumentException('non-nullable negotiated_rate_charges cannot be null');
        }
        $this->container['negotiated_rate_charges'] = $negotiated_rate_charges;

        return $this;
    }

    /**
     * Gets frs_shipment_data
     *
     * @return \AntibodiesOnline\UpsApi\Shipping\ShipmentResultsFRSShipmentData|null
     */
    public function getFrsShipmentData()
    {
        return $this->container['frs_shipment_data'];
    }

    /**
     * Sets frs_shipment_data
     *
     * @param \AntibodiesOnline\UpsApi\Shipping\ShipmentResultsFRSShipmentData|null $frs_shipment_data frs_shipment_data
     *
     * @return self
     */
    public function setFrsShipmentData($frs_shipment_data)
    {
        if (is_null($frs_shipment_data)) {
            throw new \InvalidArgumentException('non-nullable frs_shipment_data cannot be null');
        }
        $this->container['frs_shipment_data'] = $frs_shipment_data;

        return $this;
    }

    /**
     * Gets rating_method
     *
     * @return string|null
     */
    public function getRatingMethod()
    {
        return $this->container['rating_method'];
    }

    /**
     * Sets rating_method
     *
     * @param string|null $rating_method RatingMethod is to indicate whether the Shipment was rated as shipment level or package level. This information will be returned only if RatingMethodRequestedIndicator is present in the request.  Valid values: 01 = Shipment level 02 = Package level
     *
     * @return self
     */
    public function setRatingMethod($rating_method)
    {
        if (is_null($rating_method)) {
            throw new \InvalidArgumentException('non-nullable rating_method cannot be null');
        }
        if ((mb_strlen($rating_method) > 2)) {
            throw new \InvalidArgumentException('invalid length for $rating_method when calling ShipmentResponseShipmentResults., must be smaller than or equal to 2.');
        }
        if ((mb_strlen($rating_method) < 2)) {
            throw new \InvalidArgumentException('invalid length for $rating_method when calling ShipmentResponseShipmentResults., must be bigger than or equal to 2.');
        }

        $this->container['rating_method'] = $rating_method;

        return $this;
    }

    /**
     * Gets billable_weight_calculation_method
     *
     * @return string|null
     */
    public function getBillableWeightCalculationMethod()
    {
        return $this->container['billable_weight_calculation_method'];
    }

    /**
     * Sets billable_weight_calculation_method
     *
     * @param string|null $billable_weight_calculation_method BillableWeightCalculationMethod is to indicate whether the billable weight calculation method utilized was - the package level or shipment level. This information will be returned only if RatingMethodRequestedIndicator is present in the request.  Valid values: 01 = Shipment Billable Weight 02 = Package Billable Weight
     *
     * @return self
     */
    public function setBillableWeightCalculationMethod($billable_weight_calculation_method)
    {
        if (is_null($billable_weight_calculation_method)) {
            throw new \InvalidArgumentException('non-nullable billable_weight_calculation_method cannot be null');
        }
        if ((mb_strlen($billable_weight_calculation_method) > 2)) {
            throw new \InvalidArgumentException('invalid length for $billable_weight_calculation_method when calling ShipmentResponseShipmentResults., must be smaller than or equal to 2.');
        }
        if ((mb_strlen($billable_weight_calculation_method) < 2)) {
            throw new \InvalidArgumentException('invalid length for $billable_weight_calculation_method when calling ShipmentResponseShipmentResults., must be bigger than or equal to 2.');
        }

        $this->container['billable_weight_calculation_method'] = $billable_weight_calculation_method;

        return $this;
    }

    /**
     * Gets billing_weight
     *
     * @return \AntibodiesOnline\UpsApi\Shipping\ShipmentResultsBillingWeight
     */
    public function getBillingWeight()
    {
        return $this->container['billing_weight'];
    }

    /**
     * Sets billing_weight
     *
     * @param \AntibodiesOnline\UpsApi\Shipping\ShipmentResultsBillingWeight $billing_weight billing_weight
     *
     * @return self
     */
    public function setBillingWeight($billing_weight)
    {
        if (is_null($billing_weight)) {
            throw new \InvalidArgumentException('non-nullable billing_weight cannot be null');
        }
        $this->container['billing_weight'] = $billing_weight;

        return $this;
    }

    /**
     * Gets shipment_identification_number
     *
     * @return string|null
     */
    public function getShipmentIdentificationNumber()
    {
        return $this->container['shipment_identification_number'];
    }

    /**
     * Sets shipment_identification_number
     *
     * @param string|null $shipment_identification_number Returned UPS shipment ID number.1Z Number of the first package in the shipment.
     *
     * @return self
     */
    public function setShipmentIdentificationNumber($shipment_identification_number)
    {
        if (is_null($shipment_identification_number)) {
            throw new \InvalidArgumentException('non-nullable shipment_identification_number cannot be null');
        }
        if ((mb_strlen($shipment_identification_number) > 18)) {
            throw new \InvalidArgumentException('invalid length for $shipment_identification_number when calling ShipmentResponseShipmentResults., must be smaller than or equal to 18.');
        }
        if ((mb_strlen($shipment_identification_number) < 18)) {
            throw new \InvalidArgumentException('invalid length for $shipment_identification_number when calling ShipmentResponseShipmentResults., must be bigger than or equal to 18.');
        }

        $this->container['shipment_identification_number'] = $shipment_identification_number;

        return $this;
    }

    /**
     * Gets mi_dual_return_shipment_key
     *
     * @return string|null
     */
    public function getMiDualReturnShipmentKey()
    {
        return $this->container['mi_dual_return_shipment_key'];
    }

    /**
     * Sets mi_dual_return_shipment_key
     *
     * @param string|null $mi_dual_return_shipment_key MIDualReturnShipmentKey is unique key required to process Mail Innovations Dual Return Shipment.   The unique identifier (key) would be returned in response of first phase of Mail Innovations Dual Return Shipments.   This unique identifier (key) would be part of request for second phase of Mail Innovations Dual Return Shipments and would be played back in response for second phase of Mail Innovations Dual Return Shipment.  If the shipment is a Package return shipment, the package tracking number will be concatenated with the system time (in the format YYYY-MM-DDHH.MM.SS.NNN) and followed by service code.   If the shipment is an MI Returns shipment, the Mail Manifest ID (MMI) will be concatenated with the system time.
     *
     * @return self
     */
    public function setMiDualReturnShipmentKey($mi_dual_return_shipment_key)
    {
        if (is_null($mi_dual_return_shipment_key)) {
            throw new \InvalidArgumentException('non-nullable mi_dual_return_shipment_key cannot be null');
        }
        if ((mb_strlen($mi_dual_return_shipment_key) > 50)) {
            throw new \InvalidArgumentException('invalid length for $mi_dual_return_shipment_key when calling ShipmentResponseShipmentResults., must be smaller than or equal to 50.');
        }
        if ((mb_strlen($mi_dual_return_shipment_key) < 4)) {
            throw new \InvalidArgumentException('invalid length for $mi_dual_return_shipment_key when calling ShipmentResponseShipmentResults., must be bigger than or equal to 4.');
        }

        $this->container['mi_dual_return_shipment_key'] = $mi_dual_return_shipment_key;

        return $this;
    }

    /**
     * Gets bar_code_image
     *
     * @return string|null
     */
    public function getBarCodeImage()
    {
        return $this->container['bar_code_image'];
    }

    /**
     * Sets bar_code_image
     *
     * @param string|null $bar_code_image Bar Code Image will be returned as Base 64 encoded graphic image. Bar Code Image will be returned if BarCodeImageIndicator or BarCodeAndLabelIndicator is present.
     *
     * @return self
     */
    public function setBarCodeImage($bar_code_image)
    {
        if (is_null($bar_code_image)) {
            throw new \InvalidArgumentException('non-nullable bar_code_image cannot be null');
        }


        $this->container['bar_code_image'] = $bar_code_image;

        return $this;
    }

    /**
     * Gets package_results
     *
     * @return \AntibodiesOnline\UpsApi\Shipping\ShipmentResponseShipmentResultsPackageResults|null
     */
    public function getPackageResults()
    {
        return $this->container['package_results'];
    }

    /**
     * Sets package_results
     *
     * @param \AntibodiesOnline\UpsApi\Shipping\ShipmentResponseShipmentResultsPackageResults|null $package_results package_results
     *
     * @return self
     */
    public function setPackageResults($package_results)
    {
        if (is_null($package_results)) {
            throw new \InvalidArgumentException('non-nullable package_results cannot be null');
        }
        $this->container['package_results'] = $package_results;

        return $this;
    }

    /**
     * Gets control_log_receipt
     *
     * @return \AntibodiesOnline\UpsApi\Shipping\ShipmentResponseShipmentResultsControlLogReceipt|null
     */
    public function getControlLogReceipt()
    {
        return $this->container['control_log_receipt'];
    }

    /**
     * Sets control_log_receipt
     *
     * @param \AntibodiesOnline\UpsApi\Shipping\ShipmentResponseShipmentResultsControlLogReceipt|null $control_log_receipt control_log_receipt
     *
     * @return self
     */
    public function setControlLogReceipt($control_log_receipt)
    {
        if (is_null($control_log_receipt)) {
            throw new \InvalidArgumentException('non-nullable control_log_receipt cannot be null');
        }
        $this->container['control_log_receipt'] = $control_log_receipt;

        return $this;
    }

    /**
     * Gets form
     *
     * @return \AntibodiesOnline\UpsApi\Shipping\ShipmentResultsForm|null
     */
    public function getForm()
    {
        return $this->container['form'];
    }

    /**
     * Sets form
     *
     * @param \AntibodiesOnline\UpsApi\Shipping\ShipmentResultsForm|null $form form
     *
     * @return self
     */
    public function setForm($form)
    {
        if (is_null($form)) {
            throw new \InvalidArgumentException('non-nullable form cannot be null');
        }
        $this->container['form'] = $form;

        return $this;
    }

    /**
     * Gets cod_turn_in_page
     *
     * @return \AntibodiesOnline\UpsApi\Shipping\ShipmentResultsCODTurnInPage|null
     */
    public function getCodTurnInPage()
    {
        return $this->container['cod_turn_in_page'];
    }

    /**
     * Sets cod_turn_in_page
     *
     * @param \AntibodiesOnline\UpsApi\Shipping\ShipmentResultsCODTurnInPage|null $cod_turn_in_page cod_turn_in_page
     *
     * @return self
     */
    public function setCodTurnInPage($cod_turn_in_page)
    {
        if (is_null($cod_turn_in_page)) {
            throw new \InvalidArgumentException('non-nullable cod_turn_in_page cannot be null');
        }
        $this->container['cod_turn_in_page'] = $cod_turn_in_page;

        return $this;
    }

    /**
     * Gets high_value_report
     *
     * @return \AntibodiesOnline\UpsApi\Shipping\ShipmentResultsHighValueReport|null
     */
    public function getHighValueReport()
    {
        return $this->container['high_value_report'];
    }

    /**
     * Sets high_value_report
     *
     * @param \AntibodiesOnline\UpsApi\Shipping\ShipmentResultsHighValueReport|null $high_value_report high_value_report
     *
     * @return self
     */
    public function setHighValueReport($high_value_report)
    {
        if (is_null($high_value_report)) {
            throw new \InvalidArgumentException('non-nullable high_value_report cannot be null');
        }
        $this->container['high_value_report'] = $high_value_report;

        return $this;
    }

    /**
     * Gets label_url
     *
     * @return string|null
     */
    public function getLabelUrl()
    {
        return $this->container['label_url'];
    }

    /**
     * Sets label_url
     *
     * @param string|null $label_url URL will point to a page wherein label, receipt and other documents, if applicable, such as HighValueReport, CustomsInvoice and ImportControl instructions can be requested. LabelURL is returned only if the LabelLinksIndicator is requested for following shipments: Print/Electronic ImportControl shipment Print/Electronic Return shipment.  Forward shipment except for Mail Innovations Forward.
     *
     * @return self
     */
    public function setLabelUrl($label_url)
    {
        if (is_null($label_url)) {
            throw new \InvalidArgumentException('non-nullable label_url cannot be null');
        }


        $this->container['label_url'] = $label_url;

        return $this;
    }

    /**
     * Gets local_language_label_url
     *
     * @return string|null
     */
    public function getLocalLanguageLabelUrl()
    {
        return $this->container['local_language_label_url'];
    }

    /**
     * Sets local_language_label_url
     *
     * @param string|null $local_language_label_url URL will point to a page wherein label, receipt and other documents, if applicable, such as HighValueReport, CustomsInvoice and ImportControl instructions can be requested. LocalLanguageLabelURL is returned only if the LabelLinksIndicator is requested for following shipments: Print/Electronic ImportControl shipment Print/Electronic Return shipment.  Forward shipment except for Mail Innovations Forward.  Not returned if LabelLinksIndicator is requested with Locale element.
     *
     * @return self
     */
    public function setLocalLanguageLabelUrl($local_language_label_url)
    {
        if (is_null($local_language_label_url)) {
            throw new \InvalidArgumentException('non-nullable local_language_label_url cannot be null');
        }


        $this->container['local_language_label_url'] = $local_language_label_url;

        return $this;
    }

    /**
     * Gets receipt_url
     *
     * @return string|null
     */
    public function getReceiptUrl()
    {
        return $this->container['receipt_url'];
    }

    /**
     * Sets receipt_url
     *
     * @param string|null $receipt_url URL will point to a page wherein label, receipt and other documents, if applicable, such as HighValueReport, CustomsInvoice and ImportControl instructions can be requested. ReceiptURL is returned only if the LabelLinksIndicator is requested for following shipments: Print/Electronic ImportControl shipment Print/Electronic Return shipment.
     *
     * @return self
     */
    public function setReceiptUrl($receipt_url)
    {
        if (is_null($receipt_url)) {
            throw new \InvalidArgumentException('non-nullable receipt_url cannot be null');
        }


        $this->container['receipt_url'] = $receipt_url;

        return $this;
    }

    /**
     * Gets local_language_receipt_url
     *
     * @return string|null
     */
    public function getLocalLanguageReceiptUrl()
    {
        return $this->container['local_language_receipt_url'];
    }

    /**
     * Sets local_language_receipt_url
     *
     * @param string|null $local_language_receipt_url URL will point to a page wherein label, receipt and other documents, if applicable, such as HighValueReport, CustomsInvoice and ImportControl instructions can be requested. LocalLanguageReceiptURL is returned only if the LabelLinksIndicator is requested for following shipments: Print/Electronic ImportControl shipment Print/Electronic Return shipment.   Not returned if LabelLinksIndicator is requested with Locale element.
     *
     * @return self
     */
    public function setLocalLanguageReceiptUrl($local_language_receipt_url)
    {
        if (is_null($local_language_receipt_url)) {
            throw new \InvalidArgumentException('non-nullable local_language_receipt_url cannot be null');
        }


        $this->container['local_language_receipt_url'] = $local_language_receipt_url;

        return $this;
    }

    /**
     * Gets dg_paper_image
     *
     * @return \AntibodiesOnline\UpsApi\Shipping\ShipmentResponseShipmentResultsDGPaperImage|null
     */
    public function getDgPaperImage()
    {
        return $this->container['dg_paper_image'];
    }

    /**
     * Sets dg_paper_image
     *
     * @param \AntibodiesOnline\UpsApi\Shipping\ShipmentResponseShipmentResultsDGPaperImage|null $dg_paper_image dg_paper_image
     *
     * @return self
     */
    public function setDgPaperImage($dg_paper_image)
    {
        if (is_null($dg_paper_image)) {
            throw new \InvalidArgumentException('non-nullable dg_paper_image cannot be null');
        }
        $this->container['dg_paper_image'] = $dg_paper_image;

        return $this;
    }

    /**
     * Gets master_carton_id
     *
     * @return string|null
     */
    public function getMasterCartonId()
    {
        return $this->container['master_carton_id'];
    }

    /**
     * Sets master_carton_id
     *
     * @param string|null $master_carton_id Master Carton ID. MasterCartonID will be return if MasterCartonIndicator is present in request.
     *
     * @return self
     */
    public function setMasterCartonId($master_carton_id)
    {
        if (is_null($master_carton_id)) {
            throw new \InvalidArgumentException('non-nullable master_carton_id cannot be null');
        }
        if ((mb_strlen($master_carton_id) > 24)) {
            throw new \InvalidArgumentException('invalid length for $master_carton_id when calling ShipmentResponseShipmentResults., must be smaller than or equal to 24.');
        }
        if ((mb_strlen($master_carton_id) < 1)) {
            throw new \InvalidArgumentException('invalid length for $master_carton_id when calling ShipmentResponseShipmentResults., must be bigger than or equal to 1.');
        }

        $this->container['master_carton_id'] = $master_carton_id;

        return $this;
    }

    /**
     * Gets roar_rated_indicator
     *
     * @return string|null
     */
    public function getRoarRatedIndicator()
    {
        return $this->container['roar_rated_indicator'];
    }

    /**
     * Sets roar_rated_indicator
     *
     * @param string|null $roar_rated_indicator Informational only
     *
     * @return self
     */
    public function setRoarRatedIndicator($roar_rated_indicator)
    {
        if (is_null($roar_rated_indicator)) {
            throw new \InvalidArgumentException('non-nullable roar_rated_indicator cannot be null');
        }
        $this->container['roar_rated_indicator'] = $roar_rated_indicator;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


