<?php
/**
 * ShipmentRequestShipment
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  AntibodiesOnline\UpsApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Ship
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace AntibodiesOnline\UpsApi\Shipping;

use \ArrayAccess;
use \AntibodiesOnline\UpsApi\ObjectSerializer;

/**
 * ShipmentRequestShipment Class Doc Comment
 *
 * @category Class
 * @description Shipment Container
 * @package  AntibodiesOnline\UpsApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ShipmentRequestShipment implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ShipmentRequest_Shipment';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'description' => 'string',
        'return_service' => '\AntibodiesOnline\UpsApi\Shipping\ShipmentReturnService',
        'documents_only_indicator' => 'string',
        'shipper' => '\AntibodiesOnline\UpsApi\Shipping\ShipmentShipper',
        'ship_to' => '\AntibodiesOnline\UpsApi\Shipping\ShipmentShipTo',
        'alternate_delivery_address' => '\AntibodiesOnline\UpsApi\Shipping\ShipmentAlternateDeliveryAddress',
        'ship_from' => '\AntibodiesOnline\UpsApi\Shipping\ShipmentShipFrom',
        'payment_information' => '\AntibodiesOnline\UpsApi\Shipping\ShipmentPaymentInformation',
        'frs_payment_information' => '\AntibodiesOnline\UpsApi\Shipping\ShipmentFRSPaymentInformation',
        'freight_shipment_information' => '\AntibodiesOnline\UpsApi\Shipping\ShipmentFreightShipmentInformation',
        'goods_not_in_free_circulation_indicator' => 'string',
        'promotional_discount_information' => '\AntibodiesOnline\UpsApi\Shipping\ShipmentPromotionalDiscountInformation',
        'dg_signatory_info' => '\AntibodiesOnline\UpsApi\Shipping\ShipmentDGSignatoryInfo',
        'shipment_rating_options' => '\AntibodiesOnline\UpsApi\Shipping\ShipmentShipmentRatingOptions',
        'movement_reference_number' => 'string',
        'reference_number' => '\AntibodiesOnline\UpsApi\Shipping\ShipmentReferenceNumber[]',
        'service' => '\AntibodiesOnline\UpsApi\Shipping\ShipmentService',
        'invoice_line_total' => '\AntibodiesOnline\UpsApi\Shipping\ShipmentInvoiceLineTotal',
        'num_of_pieces_in_shipment' => 'string',
        'usps_endorsement' => 'string',
        'mi_label_cn22_indicator' => 'string',
        'sub_classification' => 'string',
        'cost_center' => 'string',
        'cost_center_barcode_indicator' => 'string',
        'package_id' => 'string',
        'package_id_barcode_indicator' => 'string',
        'irregular_indicator' => 'string',
        'shipment_indication_type' => '\AntibodiesOnline\UpsApi\Shipping\ShipmentShipmentIndicationType[]',
        'mi_dual_return_shipment_key' => 'string',
        'mi_dual_return_shipment_indicator' => 'string',
        'rating_method_requested_indicator' => 'string',
        'tax_information_indicator' => 'string',
        'shipment_service_options' => '\AntibodiesOnline\UpsApi\Shipping\ShipmentShipmentServiceOptions',
        'locale' => 'string',
        'shipment_value_threshold_code' => 'string',
        'master_carton_id' => 'string',
        'master_carton_indicator' => 'string',
        'shipment_date' => 'string',
        'package' => '\AntibodiesOnline\UpsApi\Shipping\ShipmentPackage[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'description' => null,
        'return_service' => null,
        'documents_only_indicator' => null,
        'shipper' => null,
        'ship_to' => null,
        'alternate_delivery_address' => null,
        'ship_from' => null,
        'payment_information' => null,
        'frs_payment_information' => null,
        'freight_shipment_information' => null,
        'goods_not_in_free_circulation_indicator' => null,
        'promotional_discount_information' => null,
        'dg_signatory_info' => null,
        'shipment_rating_options' => null,
        'movement_reference_number' => null,
        'reference_number' => null,
        'service' => null,
        'invoice_line_total' => null,
        'num_of_pieces_in_shipment' => null,
        'usps_endorsement' => null,
        'mi_label_cn22_indicator' => null,
        'sub_classification' => null,
        'cost_center' => null,
        'cost_center_barcode_indicator' => null,
        'package_id' => null,
        'package_id_barcode_indicator' => null,
        'irregular_indicator' => null,
        'shipment_indication_type' => null,
        'mi_dual_return_shipment_key' => null,
        'mi_dual_return_shipment_indicator' => null,
        'rating_method_requested_indicator' => null,
        'tax_information_indicator' => null,
        'shipment_service_options' => null,
        'locale' => null,
        'shipment_value_threshold_code' => null,
        'master_carton_id' => null,
        'master_carton_indicator' => null,
        'shipment_date' => null,
        'package' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'description' => false,
		'return_service' => false,
		'documents_only_indicator' => false,
		'shipper' => false,
		'ship_to' => false,
		'alternate_delivery_address' => false,
		'ship_from' => false,
		'payment_information' => false,
		'frs_payment_information' => false,
		'freight_shipment_information' => false,
		'goods_not_in_free_circulation_indicator' => false,
		'promotional_discount_information' => false,
		'dg_signatory_info' => false,
		'shipment_rating_options' => false,
		'movement_reference_number' => false,
		'reference_number' => false,
		'service' => false,
		'invoice_line_total' => false,
		'num_of_pieces_in_shipment' => false,
		'usps_endorsement' => false,
		'mi_label_cn22_indicator' => false,
		'sub_classification' => false,
		'cost_center' => false,
		'cost_center_barcode_indicator' => false,
		'package_id' => false,
		'package_id_barcode_indicator' => false,
		'irregular_indicator' => false,
		'shipment_indication_type' => false,
		'mi_dual_return_shipment_key' => false,
		'mi_dual_return_shipment_indicator' => false,
		'rating_method_requested_indicator' => false,
		'tax_information_indicator' => false,
		'shipment_service_options' => false,
		'locale' => false,
		'shipment_value_threshold_code' => false,
		'master_carton_id' => false,
		'master_carton_indicator' => false,
		'shipment_date' => false,
		'package' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'description' => 'Description',
        'return_service' => 'ReturnService',
        'documents_only_indicator' => 'DocumentsOnlyIndicator',
        'shipper' => 'Shipper',
        'ship_to' => 'ShipTo',
        'alternate_delivery_address' => 'AlternateDeliveryAddress',
        'ship_from' => 'ShipFrom',
        'payment_information' => 'PaymentInformation',
        'frs_payment_information' => 'FRSPaymentInformation',
        'freight_shipment_information' => 'FreightShipmentInformation',
        'goods_not_in_free_circulation_indicator' => 'GoodsNotInFreeCirculationIndicator',
        'promotional_discount_information' => 'PromotionalDiscountInformation',
        'dg_signatory_info' => 'DGSignatoryInfo',
        'shipment_rating_options' => 'ShipmentRatingOptions',
        'movement_reference_number' => 'MovementReferenceNumber',
        'reference_number' => 'ReferenceNumber',
        'service' => 'Service',
        'invoice_line_total' => 'InvoiceLineTotal',
        'num_of_pieces_in_shipment' => 'NumOfPiecesInShipment',
        'usps_endorsement' => 'USPSEndorsement',
        'mi_label_cn22_indicator' => 'MILabelCN22Indicator',
        'sub_classification' => 'SubClassification',
        'cost_center' => 'CostCenter',
        'cost_center_barcode_indicator' => 'CostCenterBarcodeIndicator',
        'package_id' => 'PackageID',
        'package_id_barcode_indicator' => 'PackageIDBarcodeIndicator',
        'irregular_indicator' => 'IrregularIndicator',
        'shipment_indication_type' => 'ShipmentIndicationType',
        'mi_dual_return_shipment_key' => 'MIDualReturnShipmentKey',
        'mi_dual_return_shipment_indicator' => 'MIDualReturnShipmentIndicator',
        'rating_method_requested_indicator' => 'RatingMethodRequestedIndicator',
        'tax_information_indicator' => 'TaxInformationIndicator',
        'shipment_service_options' => 'ShipmentServiceOptions',
        'locale' => 'Locale',
        'shipment_value_threshold_code' => 'ShipmentValueThresholdCode',
        'master_carton_id' => 'MasterCartonID',
        'master_carton_indicator' => 'MasterCartonIndicator',
        'shipment_date' => 'ShipmentDate',
        'package' => 'Package'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'description' => 'setDescription',
        'return_service' => 'setReturnService',
        'documents_only_indicator' => 'setDocumentsOnlyIndicator',
        'shipper' => 'setShipper',
        'ship_to' => 'setShipTo',
        'alternate_delivery_address' => 'setAlternateDeliveryAddress',
        'ship_from' => 'setShipFrom',
        'payment_information' => 'setPaymentInformation',
        'frs_payment_information' => 'setFrsPaymentInformation',
        'freight_shipment_information' => 'setFreightShipmentInformation',
        'goods_not_in_free_circulation_indicator' => 'setGoodsNotInFreeCirculationIndicator',
        'promotional_discount_information' => 'setPromotionalDiscountInformation',
        'dg_signatory_info' => 'setDgSignatoryInfo',
        'shipment_rating_options' => 'setShipmentRatingOptions',
        'movement_reference_number' => 'setMovementReferenceNumber',
        'reference_number' => 'setReferenceNumber',
        'service' => 'setService',
        'invoice_line_total' => 'setInvoiceLineTotal',
        'num_of_pieces_in_shipment' => 'setNumOfPiecesInShipment',
        'usps_endorsement' => 'setUspsEndorsement',
        'mi_label_cn22_indicator' => 'setMiLabelCn22Indicator',
        'sub_classification' => 'setSubClassification',
        'cost_center' => 'setCostCenter',
        'cost_center_barcode_indicator' => 'setCostCenterBarcodeIndicator',
        'package_id' => 'setPackageId',
        'package_id_barcode_indicator' => 'setPackageIdBarcodeIndicator',
        'irregular_indicator' => 'setIrregularIndicator',
        'shipment_indication_type' => 'setShipmentIndicationType',
        'mi_dual_return_shipment_key' => 'setMiDualReturnShipmentKey',
        'mi_dual_return_shipment_indicator' => 'setMiDualReturnShipmentIndicator',
        'rating_method_requested_indicator' => 'setRatingMethodRequestedIndicator',
        'tax_information_indicator' => 'setTaxInformationIndicator',
        'shipment_service_options' => 'setShipmentServiceOptions',
        'locale' => 'setLocale',
        'shipment_value_threshold_code' => 'setShipmentValueThresholdCode',
        'master_carton_id' => 'setMasterCartonId',
        'master_carton_indicator' => 'setMasterCartonIndicator',
        'shipment_date' => 'setShipmentDate',
        'package' => 'setPackage'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'description' => 'getDescription',
        'return_service' => 'getReturnService',
        'documents_only_indicator' => 'getDocumentsOnlyIndicator',
        'shipper' => 'getShipper',
        'ship_to' => 'getShipTo',
        'alternate_delivery_address' => 'getAlternateDeliveryAddress',
        'ship_from' => 'getShipFrom',
        'payment_information' => 'getPaymentInformation',
        'frs_payment_information' => 'getFrsPaymentInformation',
        'freight_shipment_information' => 'getFreightShipmentInformation',
        'goods_not_in_free_circulation_indicator' => 'getGoodsNotInFreeCirculationIndicator',
        'promotional_discount_information' => 'getPromotionalDiscountInformation',
        'dg_signatory_info' => 'getDgSignatoryInfo',
        'shipment_rating_options' => 'getShipmentRatingOptions',
        'movement_reference_number' => 'getMovementReferenceNumber',
        'reference_number' => 'getReferenceNumber',
        'service' => 'getService',
        'invoice_line_total' => 'getInvoiceLineTotal',
        'num_of_pieces_in_shipment' => 'getNumOfPiecesInShipment',
        'usps_endorsement' => 'getUspsEndorsement',
        'mi_label_cn22_indicator' => 'getMiLabelCn22Indicator',
        'sub_classification' => 'getSubClassification',
        'cost_center' => 'getCostCenter',
        'cost_center_barcode_indicator' => 'getCostCenterBarcodeIndicator',
        'package_id' => 'getPackageId',
        'package_id_barcode_indicator' => 'getPackageIdBarcodeIndicator',
        'irregular_indicator' => 'getIrregularIndicator',
        'shipment_indication_type' => 'getShipmentIndicationType',
        'mi_dual_return_shipment_key' => 'getMiDualReturnShipmentKey',
        'mi_dual_return_shipment_indicator' => 'getMiDualReturnShipmentIndicator',
        'rating_method_requested_indicator' => 'getRatingMethodRequestedIndicator',
        'tax_information_indicator' => 'getTaxInformationIndicator',
        'shipment_service_options' => 'getShipmentServiceOptions',
        'locale' => 'getLocale',
        'shipment_value_threshold_code' => 'getShipmentValueThresholdCode',
        'master_carton_id' => 'getMasterCartonId',
        'master_carton_indicator' => 'getMasterCartonIndicator',
        'shipment_date' => 'getShipmentDate',
        'package' => 'getPackage'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('return_service', $data ?? [], null);
        $this->setIfExists('documents_only_indicator', $data ?? [], null);
        $this->setIfExists('shipper', $data ?? [], null);
        $this->setIfExists('ship_to', $data ?? [], null);
        $this->setIfExists('alternate_delivery_address', $data ?? [], null);
        $this->setIfExists('ship_from', $data ?? [], null);
        $this->setIfExists('payment_information', $data ?? [], null);
        $this->setIfExists('frs_payment_information', $data ?? [], null);
        $this->setIfExists('freight_shipment_information', $data ?? [], null);
        $this->setIfExists('goods_not_in_free_circulation_indicator', $data ?? [], null);
        $this->setIfExists('promotional_discount_information', $data ?? [], null);
        $this->setIfExists('dg_signatory_info', $data ?? [], null);
        $this->setIfExists('shipment_rating_options', $data ?? [], null);
        $this->setIfExists('movement_reference_number', $data ?? [], null);
        $this->setIfExists('reference_number', $data ?? [], null);
        $this->setIfExists('service', $data ?? [], null);
        $this->setIfExists('invoice_line_total', $data ?? [], null);
        $this->setIfExists('num_of_pieces_in_shipment', $data ?? [], null);
        $this->setIfExists('usps_endorsement', $data ?? [], null);
        $this->setIfExists('mi_label_cn22_indicator', $data ?? [], null);
        $this->setIfExists('sub_classification', $data ?? [], null);
        $this->setIfExists('cost_center', $data ?? [], null);
        $this->setIfExists('cost_center_barcode_indicator', $data ?? [], null);
        $this->setIfExists('package_id', $data ?? [], null);
        $this->setIfExists('package_id_barcode_indicator', $data ?? [], null);
        $this->setIfExists('irregular_indicator', $data ?? [], null);
        $this->setIfExists('shipment_indication_type', $data ?? [], null);
        $this->setIfExists('mi_dual_return_shipment_key', $data ?? [], null);
        $this->setIfExists('mi_dual_return_shipment_indicator', $data ?? [], null);
        $this->setIfExists('rating_method_requested_indicator', $data ?? [], null);
        $this->setIfExists('tax_information_indicator', $data ?? [], null);
        $this->setIfExists('shipment_service_options', $data ?? [], null);
        $this->setIfExists('locale', $data ?? [], null);
        $this->setIfExists('shipment_value_threshold_code', $data ?? [], null);
        $this->setIfExists('master_carton_id', $data ?? [], null);
        $this->setIfExists('master_carton_indicator', $data ?? [], null);
        $this->setIfExists('shipment_date', $data ?? [], null);
        $this->setIfExists('package', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['description']) && (mb_strlen($this->container['description']) > 50)) {
            $invalidProperties[] = "invalid value for 'description', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['description']) && (mb_strlen($this->container['description']) < 1)) {
            $invalidProperties[] = "invalid value for 'description', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['shipper'] === null) {
            $invalidProperties[] = "'shipper' can't be null";
        }
        if ($this->container['ship_to'] === null) {
            $invalidProperties[] = "'ship_to' can't be null";
        }
        if (!is_null($this->container['movement_reference_number']) && (mb_strlen($this->container['movement_reference_number']) > 18)) {
            $invalidProperties[] = "invalid value for 'movement_reference_number', the character length must be smaller than or equal to 18.";
        }

        if (!is_null($this->container['movement_reference_number']) && (mb_strlen($this->container['movement_reference_number']) < 18)) {
            $invalidProperties[] = "invalid value for 'movement_reference_number', the character length must be bigger than or equal to 18.";
        }

        if ($this->container['service'] === null) {
            $invalidProperties[] = "'service' can't be null";
        }
        if (!is_null($this->container['num_of_pieces_in_shipment']) && (mb_strlen($this->container['num_of_pieces_in_shipment']) > 5)) {
            $invalidProperties[] = "invalid value for 'num_of_pieces_in_shipment', the character length must be smaller than or equal to 5.";
        }

        if (!is_null($this->container['num_of_pieces_in_shipment']) && (mb_strlen($this->container['num_of_pieces_in_shipment']) < 1)) {
            $invalidProperties[] = "invalid value for 'num_of_pieces_in_shipment', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['usps_endorsement']) && (mb_strlen($this->container['usps_endorsement']) > 1)) {
            $invalidProperties[] = "invalid value for 'usps_endorsement', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['usps_endorsement']) && (mb_strlen($this->container['usps_endorsement']) < 1)) {
            $invalidProperties[] = "invalid value for 'usps_endorsement', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['sub_classification']) && (mb_strlen($this->container['sub_classification']) > 2)) {
            $invalidProperties[] = "invalid value for 'sub_classification', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['sub_classification']) && (mb_strlen($this->container['sub_classification']) < 2)) {
            $invalidProperties[] = "invalid value for 'sub_classification', the character length must be bigger than or equal to 2.";
        }

        if (!is_null($this->container['cost_center']) && (mb_strlen($this->container['cost_center']) > 30)) {
            $invalidProperties[] = "invalid value for 'cost_center', the character length must be smaller than or equal to 30.";
        }

        if (!is_null($this->container['cost_center']) && (mb_strlen($this->container['cost_center']) < 1)) {
            $invalidProperties[] = "invalid value for 'cost_center', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['package_id']) && (mb_strlen($this->container['package_id']) > 30)) {
            $invalidProperties[] = "invalid value for 'package_id', the character length must be smaller than or equal to 30.";
        }

        if (!is_null($this->container['package_id']) && (mb_strlen($this->container['package_id']) < 1)) {
            $invalidProperties[] = "invalid value for 'package_id', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['irregular_indicator']) && (mb_strlen($this->container['irregular_indicator']) > 1)) {
            $invalidProperties[] = "invalid value for 'irregular_indicator', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['irregular_indicator']) && (mb_strlen($this->container['irregular_indicator']) < 1)) {
            $invalidProperties[] = "invalid value for 'irregular_indicator', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['mi_dual_return_shipment_key']) && (mb_strlen($this->container['mi_dual_return_shipment_key']) > 50)) {
            $invalidProperties[] = "invalid value for 'mi_dual_return_shipment_key', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['mi_dual_return_shipment_key']) && (mb_strlen($this->container['mi_dual_return_shipment_key']) < 4)) {
            $invalidProperties[] = "invalid value for 'mi_dual_return_shipment_key', the character length must be bigger than or equal to 4.";
        }

        if (!is_null($this->container['locale']) && (mb_strlen($this->container['locale']) > 5)) {
            $invalidProperties[] = "invalid value for 'locale', the character length must be smaller than or equal to 5.";
        }

        if (!is_null($this->container['locale']) && (mb_strlen($this->container['locale']) < 5)) {
            $invalidProperties[] = "invalid value for 'locale', the character length must be bigger than or equal to 5.";
        }

        if (!is_null($this->container['shipment_value_threshold_code']) && (mb_strlen($this->container['shipment_value_threshold_code']) > 2)) {
            $invalidProperties[] = "invalid value for 'shipment_value_threshold_code', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['shipment_value_threshold_code']) && (mb_strlen($this->container['shipment_value_threshold_code']) < 2)) {
            $invalidProperties[] = "invalid value for 'shipment_value_threshold_code', the character length must be bigger than or equal to 2.";
        }

        if (!is_null($this->container['master_carton_id']) && (mb_strlen($this->container['master_carton_id']) > 24)) {
            $invalidProperties[] = "invalid value for 'master_carton_id', the character length must be smaller than or equal to 24.";
        }

        if (!is_null($this->container['master_carton_id']) && (mb_strlen($this->container['master_carton_id']) < 1)) {
            $invalidProperties[] = "invalid value for 'master_carton_id', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['shipment_date']) && (mb_strlen($this->container['shipment_date']) > 8)) {
            $invalidProperties[] = "invalid value for 'shipment_date', the character length must be smaller than or equal to 8.";
        }

        if (!is_null($this->container['shipment_date']) && (mb_strlen($this->container['shipment_date']) < 8)) {
            $invalidProperties[] = "invalid value for 'shipment_date', the character length must be bigger than or equal to 8.";
        }

        if ($this->container['package'] === null) {
            $invalidProperties[] = "'package' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description The Description of Goods for the shipment. Applies to international and domestic shipments.   Provide a detailed description of items being shipped for documents and non-documents.   Examples: \"annual reports\" and \"9 mm steel screws\".  Required if all of the listed conditions are true:  ShipFrom and ShipTo countries or territories are not the same; The packaging type is not UPS Letter; The ShipFrom and or ShipTo countries or territories are not in the European Union or the ShipFrom and ShipTo countries or territories are both in the European Union and the shipments service type is not UPS Standard.
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        if ((mb_strlen($description) > 50)) {
            throw new \InvalidArgumentException('invalid length for $description when calling ShipmentRequestShipment., must be smaller than or equal to 50.');
        }
        if ((mb_strlen($description) < 1)) {
            throw new \InvalidArgumentException('invalid length for $description when calling ShipmentRequestShipment., must be bigger than or equal to 1.');
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets return_service
     *
     * @return \AntibodiesOnline\UpsApi\Shipping\ShipmentReturnService|null
     */
    public function getReturnService()
    {
        return $this->container['return_service'];
    }

    /**
     * Sets return_service
     *
     * @param \AntibodiesOnline\UpsApi\Shipping\ShipmentReturnService|null $return_service return_service
     *
     * @return self
     */
    public function setReturnService($return_service)
    {
        if (is_null($return_service)) {
            throw new \InvalidArgumentException('non-nullable return_service cannot be null');
        }
        $this->container['return_service'] = $return_service;

        return $this;
    }

    /**
     * Gets documents_only_indicator
     *
     * @return string|null
     */
    public function getDocumentsOnlyIndicator()
    {
        return $this->container['documents_only_indicator'];
    }

    /**
     * Sets documents_only_indicator
     *
     * @param string|null $documents_only_indicator Indicates a shipment contains written, typed, or printed communication of no commercial value.   If DocumentsOnly is not specified then it implies that the shipment contains non documents or documents of commercial value.   Default is a shipment contains non- documents or documents of commercial value.  This is an empty tag, any value inside is ignored.   Valid only for shipments with different origin and destination countries or territories. The origin country or territory is not US, and the destination country or territory is not CA, PR or MX.
     *
     * @return self
     */
    public function setDocumentsOnlyIndicator($documents_only_indicator)
    {
        if (is_null($documents_only_indicator)) {
            throw new \InvalidArgumentException('non-nullable documents_only_indicator cannot be null');
        }


        $this->container['documents_only_indicator'] = $documents_only_indicator;

        return $this;
    }

    /**
     * Gets shipper
     *
     * @return \AntibodiesOnline\UpsApi\Shipping\ShipmentShipper
     */
    public function getShipper()
    {
        return $this->container['shipper'];
    }

    /**
     * Sets shipper
     *
     * @param \AntibodiesOnline\UpsApi\Shipping\ShipmentShipper $shipper shipper
     *
     * @return self
     */
    public function setShipper($shipper)
    {
        if (is_null($shipper)) {
            throw new \InvalidArgumentException('non-nullable shipper cannot be null');
        }
        $this->container['shipper'] = $shipper;

        return $this;
    }

    /**
     * Gets ship_to
     *
     * @return \AntibodiesOnline\UpsApi\Shipping\ShipmentShipTo
     */
    public function getShipTo()
    {
        return $this->container['ship_to'];
    }

    /**
     * Sets ship_to
     *
     * @param \AntibodiesOnline\UpsApi\Shipping\ShipmentShipTo $ship_to ship_to
     *
     * @return self
     */
    public function setShipTo($ship_to)
    {
        if (is_null($ship_to)) {
            throw new \InvalidArgumentException('non-nullable ship_to cannot be null');
        }
        $this->container['ship_to'] = $ship_to;

        return $this;
    }

    /**
     * Gets alternate_delivery_address
     *
     * @return \AntibodiesOnline\UpsApi\Shipping\ShipmentAlternateDeliveryAddress|null
     */
    public function getAlternateDeliveryAddress()
    {
        return $this->container['alternate_delivery_address'];
    }

    /**
     * Sets alternate_delivery_address
     *
     * @param \AntibodiesOnline\UpsApi\Shipping\ShipmentAlternateDeliveryAddress|null $alternate_delivery_address alternate_delivery_address
     *
     * @return self
     */
    public function setAlternateDeliveryAddress($alternate_delivery_address)
    {
        if (is_null($alternate_delivery_address)) {
            throw new \InvalidArgumentException('non-nullable alternate_delivery_address cannot be null');
        }
        $this->container['alternate_delivery_address'] = $alternate_delivery_address;

        return $this;
    }

    /**
     * Gets ship_from
     *
     * @return \AntibodiesOnline\UpsApi\Shipping\ShipmentShipFrom|null
     */
    public function getShipFrom()
    {
        return $this->container['ship_from'];
    }

    /**
     * Sets ship_from
     *
     * @param \AntibodiesOnline\UpsApi\Shipping\ShipmentShipFrom|null $ship_from ship_from
     *
     * @return self
     */
    public function setShipFrom($ship_from)
    {
        if (is_null($ship_from)) {
            throw new \InvalidArgumentException('non-nullable ship_from cannot be null');
        }
        $this->container['ship_from'] = $ship_from;

        return $this;
    }

    /**
     * Gets payment_information
     *
     * @return \AntibodiesOnline\UpsApi\Shipping\ShipmentPaymentInformation|null
     */
    public function getPaymentInformation()
    {
        return $this->container['payment_information'];
    }

    /**
     * Sets payment_information
     *
     * @param \AntibodiesOnline\UpsApi\Shipping\ShipmentPaymentInformation|null $payment_information payment_information
     *
     * @return self
     */
    public function setPaymentInformation($payment_information)
    {
        if (is_null($payment_information)) {
            throw new \InvalidArgumentException('non-nullable payment_information cannot be null');
        }
        $this->container['payment_information'] = $payment_information;

        return $this;
    }

    /**
     * Gets frs_payment_information
     *
     * @return \AntibodiesOnline\UpsApi\Shipping\ShipmentFRSPaymentInformation|null
     */
    public function getFrsPaymentInformation()
    {
        return $this->container['frs_payment_information'];
    }

    /**
     * Sets frs_payment_information
     *
     * @param \AntibodiesOnline\UpsApi\Shipping\ShipmentFRSPaymentInformation|null $frs_payment_information frs_payment_information
     *
     * @return self
     */
    public function setFrsPaymentInformation($frs_payment_information)
    {
        if (is_null($frs_payment_information)) {
            throw new \InvalidArgumentException('non-nullable frs_payment_information cannot be null');
        }
        $this->container['frs_payment_information'] = $frs_payment_information;

        return $this;
    }

    /**
     * Gets freight_shipment_information
     *
     * @return \AntibodiesOnline\UpsApi\Shipping\ShipmentFreightShipmentInformation|null
     */
    public function getFreightShipmentInformation()
    {
        return $this->container['freight_shipment_information'];
    }

    /**
     * Sets freight_shipment_information
     *
     * @param \AntibodiesOnline\UpsApi\Shipping\ShipmentFreightShipmentInformation|null $freight_shipment_information freight_shipment_information
     *
     * @return self
     */
    public function setFreightShipmentInformation($freight_shipment_information)
    {
        if (is_null($freight_shipment_information)) {
            throw new \InvalidArgumentException('non-nullable freight_shipment_information cannot be null');
        }
        $this->container['freight_shipment_information'] = $freight_shipment_information;

        return $this;
    }

    /**
     * Gets goods_not_in_free_circulation_indicator
     *
     * @return string|null
     */
    public function getGoodsNotInFreeCirculationIndicator()
    {
        return $this->container['goods_not_in_free_circulation_indicator'];
    }

    /**
     * Sets goods_not_in_free_circulation_indicator
     *
     * @param string|null $goods_not_in_free_circulation_indicator Goods Not In Free Circulation indicator.  This is an empty tag, any value inside is ignored. This indicator is invalid for a package type of UPS Letter and DocumentsOnly.
     *
     * @return self
     */
    public function setGoodsNotInFreeCirculationIndicator($goods_not_in_free_circulation_indicator)
    {
        if (is_null($goods_not_in_free_circulation_indicator)) {
            throw new \InvalidArgumentException('non-nullable goods_not_in_free_circulation_indicator cannot be null');
        }


        $this->container['goods_not_in_free_circulation_indicator'] = $goods_not_in_free_circulation_indicator;

        return $this;
    }

    /**
     * Gets promotional_discount_information
     *
     * @return \AntibodiesOnline\UpsApi\Shipping\ShipmentPromotionalDiscountInformation|null
     */
    public function getPromotionalDiscountInformation()
    {
        return $this->container['promotional_discount_information'];
    }

    /**
     * Sets promotional_discount_information
     *
     * @param \AntibodiesOnline\UpsApi\Shipping\ShipmentPromotionalDiscountInformation|null $promotional_discount_information promotional_discount_information
     *
     * @return self
     */
    public function setPromotionalDiscountInformation($promotional_discount_information)
    {
        if (is_null($promotional_discount_information)) {
            throw new \InvalidArgumentException('non-nullable promotional_discount_information cannot be null');
        }
        $this->container['promotional_discount_information'] = $promotional_discount_information;

        return $this;
    }

    /**
     * Gets dg_signatory_info
     *
     * @return \AntibodiesOnline\UpsApi\Shipping\ShipmentDGSignatoryInfo|null
     */
    public function getDgSignatoryInfo()
    {
        return $this->container['dg_signatory_info'];
    }

    /**
     * Sets dg_signatory_info
     *
     * @param \AntibodiesOnline\UpsApi\Shipping\ShipmentDGSignatoryInfo|null $dg_signatory_info dg_signatory_info
     *
     * @return self
     */
    public function setDgSignatoryInfo($dg_signatory_info)
    {
        if (is_null($dg_signatory_info)) {
            throw new \InvalidArgumentException('non-nullable dg_signatory_info cannot be null');
        }
        $this->container['dg_signatory_info'] = $dg_signatory_info;

        return $this;
    }

    /**
     * Gets shipment_rating_options
     *
     * @return \AntibodiesOnline\UpsApi\Shipping\ShipmentShipmentRatingOptions|null
     */
    public function getShipmentRatingOptions()
    {
        return $this->container['shipment_rating_options'];
    }

    /**
     * Sets shipment_rating_options
     *
     * @param \AntibodiesOnline\UpsApi\Shipping\ShipmentShipmentRatingOptions|null $shipment_rating_options shipment_rating_options
     *
     * @return self
     */
    public function setShipmentRatingOptions($shipment_rating_options)
    {
        if (is_null($shipment_rating_options)) {
            throw new \InvalidArgumentException('non-nullable shipment_rating_options cannot be null');
        }
        $this->container['shipment_rating_options'] = $shipment_rating_options;

        return $this;
    }

    /**
     * Gets movement_reference_number
     *
     * @return string|null
     */
    public function getMovementReferenceNumber()
    {
        return $this->container['movement_reference_number'];
    }

    /**
     * Sets movement_reference_number
     *
     * @param string|null $movement_reference_number Movement Reference Number (MRN) information.  Must contain alphanumeric characters only. Must be a length of 18 characters. The 3rd and 4th Characters must be the Shipper country or territory ISO Code.
     *
     * @return self
     */
    public function setMovementReferenceNumber($movement_reference_number)
    {
        if (is_null($movement_reference_number)) {
            throw new \InvalidArgumentException('non-nullable movement_reference_number cannot be null');
        }
        if ((mb_strlen($movement_reference_number) > 18)) {
            throw new \InvalidArgumentException('invalid length for $movement_reference_number when calling ShipmentRequestShipment., must be smaller than or equal to 18.');
        }
        if ((mb_strlen($movement_reference_number) < 18)) {
            throw new \InvalidArgumentException('invalid length for $movement_reference_number when calling ShipmentRequestShipment., must be bigger than or equal to 18.');
        }

        $this->container['movement_reference_number'] = $movement_reference_number;

        return $this;
    }

    /**
     * Gets reference_number
     *
     * @return \AntibodiesOnline\UpsApi\Shipping\ShipmentReferenceNumber[]|null
     */
    public function getReferenceNumber()
    {
        return $this->container['reference_number'];
    }

    /**
     * Sets reference_number
     *
     * @param \AntibodiesOnline\UpsApi\Shipping\ShipmentReferenceNumber[]|null $reference_number reference_number
     *
     * @return self
     */
    public function setReferenceNumber($reference_number)
    {
        if (is_null($reference_number)) {
            throw new \InvalidArgumentException('non-nullable reference_number cannot be null');
        }
        $this->container['reference_number'] = $reference_number;

        return $this;
    }

    /**
     * Gets service
     *
     * @return \AntibodiesOnline\UpsApi\Shipping\ShipmentService
     */
    public function getService()
    {
        return $this->container['service'];
    }

    /**
     * Sets service
     *
     * @param \AntibodiesOnline\UpsApi\Shipping\ShipmentService $service service
     *
     * @return self
     */
    public function setService($service)
    {
        if (is_null($service)) {
            throw new \InvalidArgumentException('non-nullable service cannot be null');
        }
        $this->container['service'] = $service;

        return $this;
    }

    /**
     * Gets invoice_line_total
     *
     * @return \AntibodiesOnline\UpsApi\Shipping\ShipmentInvoiceLineTotal|null
     */
    public function getInvoiceLineTotal()
    {
        return $this->container['invoice_line_total'];
    }

    /**
     * Sets invoice_line_total
     *
     * @param \AntibodiesOnline\UpsApi\Shipping\ShipmentInvoiceLineTotal|null $invoice_line_total invoice_line_total
     *
     * @return self
     */
    public function setInvoiceLineTotal($invoice_line_total)
    {
        if (is_null($invoice_line_total)) {
            throw new \InvalidArgumentException('non-nullable invoice_line_total cannot be null');
        }
        $this->container['invoice_line_total'] = $invoice_line_total;

        return $this;
    }

    /**
     * Gets num_of_pieces_in_shipment
     *
     * @return string|null
     */
    public function getNumOfPiecesInShipment()
    {
        return $this->container['num_of_pieces_in_shipment'];
    }

    /**
     * Sets num_of_pieces_in_shipment
     *
     * @param string|null $num_of_pieces_in_shipment Total number of pieces in all pallets in a UPS Worldwide Express Freight Shipment.  It is required for UPS Worldwide Express Freight and UPS Worldwide Express Freight Midday Shipment. Valid values are 1 to 99999.
     *
     * @return self
     */
    public function setNumOfPiecesInShipment($num_of_pieces_in_shipment)
    {
        if (is_null($num_of_pieces_in_shipment)) {
            throw new \InvalidArgumentException('non-nullable num_of_pieces_in_shipment cannot be null');
        }
        if ((mb_strlen($num_of_pieces_in_shipment) > 5)) {
            throw new \InvalidArgumentException('invalid length for $num_of_pieces_in_shipment when calling ShipmentRequestShipment., must be smaller than or equal to 5.');
        }
        if ((mb_strlen($num_of_pieces_in_shipment) < 1)) {
            throw new \InvalidArgumentException('invalid length for $num_of_pieces_in_shipment when calling ShipmentRequestShipment., must be bigger than or equal to 1.');
        }

        $this->container['num_of_pieces_in_shipment'] = $num_of_pieces_in_shipment;

        return $this;
    }

    /**
     * Gets usps_endorsement
     *
     * @return string|null
     */
    public function getUspsEndorsement()
    {
        return $this->container['usps_endorsement'];
    }

    /**
     * Sets usps_endorsement
     *
     * @param string|null $usps_endorsement USPS Endorsement. Valid values:  1 = Return Service Requested  2 = Forwarding Service Requested  3 = Address Service Requested  4 = Change Service Requested and  5 = No Service Selected.  Note: For International Mail Innovations shipments use No Service Selected. International Mail Innovations shipments are applicable for Priority Mail Innovations and Mail Innovations Economy Mail Innovations services only.  Required for Mail Innovations forward shipments.
     *
     * @return self
     */
    public function setUspsEndorsement($usps_endorsement)
    {
        if (is_null($usps_endorsement)) {
            throw new \InvalidArgumentException('non-nullable usps_endorsement cannot be null');
        }
        if ((mb_strlen($usps_endorsement) > 1)) {
            throw new \InvalidArgumentException('invalid length for $usps_endorsement when calling ShipmentRequestShipment., must be smaller than or equal to 1.');
        }
        if ((mb_strlen($usps_endorsement) < 1)) {
            throw new \InvalidArgumentException('invalid length for $usps_endorsement when calling ShipmentRequestShipment., must be bigger than or equal to 1.');
        }

        $this->container['usps_endorsement'] = $usps_endorsement;

        return $this;
    }

    /**
     * Gets mi_label_cn22_indicator
     *
     * @return string|null
     */
    public function getMiLabelCn22Indicator()
    {
        return $this->container['mi_label_cn22_indicator'];
    }

    /**
     * Sets mi_label_cn22_indicator
     *
     * @param string|null $mi_label_cn22_indicator Indicates single label with both MI label and CN22 form.  International CN22 form is required.
     *
     * @return self
     */
    public function setMiLabelCn22Indicator($mi_label_cn22_indicator)
    {
        if (is_null($mi_label_cn22_indicator)) {
            throw new \InvalidArgumentException('non-nullable mi_label_cn22_indicator cannot be null');
        }


        $this->container['mi_label_cn22_indicator'] = $mi_label_cn22_indicator;

        return $this;
    }

    /**
     * Gets sub_classification
     *
     * @return string|null
     */
    public function getSubClassification()
    {
        return $this->container['sub_classification'];
    }

    /**
     * Sets sub_classification
     *
     * @param string|null $sub_classification A component encoded on the barcode of the Mail Innovations label.   Valid values:  IR = Irregular MA = Machineable SubClass is only required if the customer's contract have them subclass the package not UPS.
     *
     * @return self
     */
    public function setSubClassification($sub_classification)
    {
        if (is_null($sub_classification)) {
            throw new \InvalidArgumentException('non-nullable sub_classification cannot be null');
        }
        if ((mb_strlen($sub_classification) > 2)) {
            throw new \InvalidArgumentException('invalid length for $sub_classification when calling ShipmentRequestShipment., must be smaller than or equal to 2.');
        }
        if ((mb_strlen($sub_classification) < 2)) {
            throw new \InvalidArgumentException('invalid length for $sub_classification when calling ShipmentRequestShipment., must be bigger than or equal to 2.');
        }

        $this->container['sub_classification'] = $sub_classification;

        return $this;
    }

    /**
     * Gets cost_center
     *
     * @return string|null
     */
    public function getCostCenter()
    {
        return $this->container['cost_center'];
    }

    /**
     * Sets cost_center
     *
     * @param string|null $cost_center Customer assigned identifier for report and billing summarization displays to the right of the Cost Center title.  Required for Mail Innovations Return shipments. It is shown on the bottom of the shipping label as reference 2.  Cost Center length is alphanumeric with a max length of 30 for Mail Innovations forward shipments.  Cost Center length is numeric with a max length of 4 for Mail Innovations Return shipments.
     *
     * @return self
     */
    public function setCostCenter($cost_center)
    {
        if (is_null($cost_center)) {
            throw new \InvalidArgumentException('non-nullable cost_center cannot be null');
        }
        if ((mb_strlen($cost_center) > 30)) {
            throw new \InvalidArgumentException('invalid length for $cost_center when calling ShipmentRequestShipment., must be smaller than or equal to 30.');
        }
        if ((mb_strlen($cost_center) < 1)) {
            throw new \InvalidArgumentException('invalid length for $cost_center when calling ShipmentRequestShipment., must be bigger than or equal to 1.');
        }

        $this->container['cost_center'] = $cost_center;

        return $this;
    }

    /**
     * Gets cost_center_barcode_indicator
     *
     * @return string|null
     */
    public function getCostCenterBarcodeIndicator()
    {
        return $this->container['cost_center_barcode_indicator'];
    }

    /**
     * Sets cost_center_barcode_indicator
     *
     * @param string|null $cost_center_barcode_indicator Presence/Absence indicator. Presence of this indicator means that the customer is requesting for the CostCenter field to be barcoded at the bottom of the label.
     *
     * @return self
     */
    public function setCostCenterBarcodeIndicator($cost_center_barcode_indicator)
    {
        if (is_null($cost_center_barcode_indicator)) {
            throw new \InvalidArgumentException('non-nullable cost_center_barcode_indicator cannot be null');
        }


        $this->container['cost_center_barcode_indicator'] = $cost_center_barcode_indicator;

        return $this;
    }

    /**
     * Gets package_id
     *
     * @return string|null
     */
    public function getPackageId()
    {
        return $this->container['package_id'];
    }

    /**
     * Sets package_id
     *
     * @param string|null $package_id Customer-assigned unique piece identifier that returns visibility events.  Required only for Mail Innovations forward shipments. Alpha numeric values only. It is shown on the bottom of the shipping label as reference 1.
     *
     * @return self
     */
    public function setPackageId($package_id)
    {
        if (is_null($package_id)) {
            throw new \InvalidArgumentException('non-nullable package_id cannot be null');
        }
        if ((mb_strlen($package_id) > 30)) {
            throw new \InvalidArgumentException('invalid length for $package_id when calling ShipmentRequestShipment., must be smaller than or equal to 30.');
        }
        if ((mb_strlen($package_id) < 1)) {
            throw new \InvalidArgumentException('invalid length for $package_id when calling ShipmentRequestShipment., must be bigger than or equal to 1.');
        }

        $this->container['package_id'] = $package_id;

        return $this;
    }

    /**
     * Gets package_id_barcode_indicator
     *
     * @return string|null
     */
    public function getPackageIdBarcodeIndicator()
    {
        return $this->container['package_id_barcode_indicator'];
    }

    /**
     * Sets package_id_barcode_indicator
     *
     * @param string|null $package_id_barcode_indicator Presence/Absence indicator. Presence of this indicator means that the customer is requesting for the PackageID field to be barcoded at the bottom of the label.
     *
     * @return self
     */
    public function setPackageIdBarcodeIndicator($package_id_barcode_indicator)
    {
        if (is_null($package_id_barcode_indicator)) {
            throw new \InvalidArgumentException('non-nullable package_id_barcode_indicator cannot be null');
        }


        $this->container['package_id_barcode_indicator'] = $package_id_barcode_indicator;

        return $this;
    }

    /**
     * Gets irregular_indicator
     *
     * @return string|null
     */
    public function getIrregularIndicator()
    {
        return $this->container['irregular_indicator'];
    }

    /**
     * Sets irregular_indicator
     *
     * @param string|null $irregular_indicator Mail classification defined by the USPS.   Valid values:  1 = Balloon 2 = Oversize 3 = Not Applicable
     *
     * @return self
     */
    public function setIrregularIndicator($irregular_indicator)
    {
        if (is_null($irregular_indicator)) {
            throw new \InvalidArgumentException('non-nullable irregular_indicator cannot be null');
        }
        if ((mb_strlen($irregular_indicator) > 1)) {
            throw new \InvalidArgumentException('invalid length for $irregular_indicator when calling ShipmentRequestShipment., must be smaller than or equal to 1.');
        }
        if ((mb_strlen($irregular_indicator) < 1)) {
            throw new \InvalidArgumentException('invalid length for $irregular_indicator when calling ShipmentRequestShipment., must be bigger than or equal to 1.');
        }

        $this->container['irregular_indicator'] = $irregular_indicator;

        return $this;
    }

    /**
     * Gets shipment_indication_type
     *
     * @return \AntibodiesOnline\UpsApi\Shipping\ShipmentShipmentIndicationType[]|null
     */
    public function getShipmentIndicationType()
    {
        return $this->container['shipment_indication_type'];
    }

    /**
     * Sets shipment_indication_type
     *
     * @param \AntibodiesOnline\UpsApi\Shipping\ShipmentShipmentIndicationType[]|null $shipment_indication_type shipment_indication_type
     *
     * @return self
     */
    public function setShipmentIndicationType($shipment_indication_type)
    {
        if (is_null($shipment_indication_type)) {
            throw new \InvalidArgumentException('non-nullable shipment_indication_type cannot be null');
        }
        $this->container['shipment_indication_type'] = $shipment_indication_type;

        return $this;
    }

    /**
     * Gets mi_dual_return_shipment_key
     *
     * @return string|null
     */
    public function getMiDualReturnShipmentKey()
    {
        return $this->container['mi_dual_return_shipment_key'];
    }

    /**
     * Sets mi_dual_return_shipment_key
     *
     * @param string|null $mi_dual_return_shipment_key MIDualReturnShipmentKey is unique key required to process Mail Innovations Dual Return Shipment.   The unique identifier (key) would be returned in response of first phase of Mail Innovations Dual Return Shipments.   This unique identifier (key) would be part of request for second phase of Mail Innovations Dual Return Shipments.  Format:  For Package return shipments, the package tracking number is concatenated with the system time (YYYY-MM-DDHH.MM.SS.NNN), followed by service code.   For MI Return shipments, the Mail Manifest ID (MMI) is concatenated with the system time.  The unique identifier (key) is required to link the package and the Mail Innovations portion of Dual Return shipment.   If unique identifier (key) is empty in the request for UPS Mail Innovations Return Service, the request will be treated as the first phase of the Mail Innovations Dual Returns Request.   If the MIDualReturnShipmentIndicator is present with empty or null MIDualReturnShipmentKey in UPS Package Return Shipment, the request will be treated as the first phase of Dual MI Return Label Shipment.   This field would be ignored if MIDualReturnShipmentIndicator is not present in UPS Package Return Shipment request.
     *
     * @return self
     */
    public function setMiDualReturnShipmentKey($mi_dual_return_shipment_key)
    {
        if (is_null($mi_dual_return_shipment_key)) {
            throw new \InvalidArgumentException('non-nullable mi_dual_return_shipment_key cannot be null');
        }
        if ((mb_strlen($mi_dual_return_shipment_key) > 50)) {
            throw new \InvalidArgumentException('invalid length for $mi_dual_return_shipment_key when calling ShipmentRequestShipment., must be smaller than or equal to 50.');
        }
        if ((mb_strlen($mi_dual_return_shipment_key) < 4)) {
            throw new \InvalidArgumentException('invalid length for $mi_dual_return_shipment_key when calling ShipmentRequestShipment., must be bigger than or equal to 4.');
        }

        $this->container['mi_dual_return_shipment_key'] = $mi_dual_return_shipment_key;

        return $this;
    }

    /**
     * Gets mi_dual_return_shipment_indicator
     *
     * @return string|null
     */
    public function getMiDualReturnShipmentIndicator()
    {
        return $this->container['mi_dual_return_shipment_indicator'];
    }

    /**
     * Sets mi_dual_return_shipment_indicator
     *
     * @param string|null $mi_dual_return_shipment_indicator MIDualReturnShipmentIndicator is an indicator to identify a Package Shipment is part of UPS Mail Innovations Dual Label Shipment.   Its presence means Package Shipment is part of UPS Mail Innovations Dual Label shipment.  If the indicator is present in Package Shipment request, shipment would be considered as part of a Dual Mail Innovations Returns.   This indicator is not valid with UPS Mail Innovations Returns Service code.
     *
     * @return self
     */
    public function setMiDualReturnShipmentIndicator($mi_dual_return_shipment_indicator)
    {
        if (is_null($mi_dual_return_shipment_indicator)) {
            throw new \InvalidArgumentException('non-nullable mi_dual_return_shipment_indicator cannot be null');
        }


        $this->container['mi_dual_return_shipment_indicator'] = $mi_dual_return_shipment_indicator;

        return $this;
    }

    /**
     * Gets rating_method_requested_indicator
     *
     * @return string|null
     */
    public function getRatingMethodRequestedIndicator()
    {
        return $this->container['rating_method_requested_indicator'];
    }

    /**
     * Sets rating_method_requested_indicator
     *
     * @param string|null $rating_method_requested_indicator Presence/Absence Indicator. Any value inside is ignored. RatingMethodRequestedIndicator is an indicator. If present, Billable Weight Calculation method information and Rating Method information would be returned in response.
     *
     * @return self
     */
    public function setRatingMethodRequestedIndicator($rating_method_requested_indicator)
    {
        if (is_null($rating_method_requested_indicator)) {
            throw new \InvalidArgumentException('non-nullable rating_method_requested_indicator cannot be null');
        }


        $this->container['rating_method_requested_indicator'] = $rating_method_requested_indicator;

        return $this;
    }

    /**
     * Gets tax_information_indicator
     *
     * @return string|null
     */
    public function getTaxInformationIndicator()
    {
        return $this->container['tax_information_indicator'];
    }

    /**
     * Sets tax_information_indicator
     *
     * @param string|null $tax_information_indicator Presence/Absence Indicator. Any value inside is ignored. TaxInformationIndicator is an indicator. If present, any taxes that may be applicable to a shipment would be returned in response. If this indicator is requested with NegotiatedRatesIndicator, Tax related information, if applicable, would be returned only for Negotiated Rates and not for Published Rates. The Tax related information includes any type of Taxes, corresponding Monetary Values, Total Charges with Taxes and disclaimers (if applicable) would be returned in response.
     *
     * @return self
     */
    public function setTaxInformationIndicator($tax_information_indicator)
    {
        if (is_null($tax_information_indicator)) {
            throw new \InvalidArgumentException('non-nullable tax_information_indicator cannot be null');
        }


        $this->container['tax_information_indicator'] = $tax_information_indicator;

        return $this;
    }

    /**
     * Gets shipment_service_options
     *
     * @return \AntibodiesOnline\UpsApi\Shipping\ShipmentShipmentServiceOptions|null
     */
    public function getShipmentServiceOptions()
    {
        return $this->container['shipment_service_options'];
    }

    /**
     * Sets shipment_service_options
     *
     * @param \AntibodiesOnline\UpsApi\Shipping\ShipmentShipmentServiceOptions|null $shipment_service_options shipment_service_options
     *
     * @return self
     */
    public function setShipmentServiceOptions($shipment_service_options)
    {
        if (is_null($shipment_service_options)) {
            throw new \InvalidArgumentException('non-nullable shipment_service_options cannot be null');
        }
        $this->container['shipment_service_options'] = $shipment_service_options;

        return $this;
    }

    /**
     * Gets locale
     *
     * @return string|null
     */
    public function getLocale()
    {
        return $this->container['locale'];
    }

    /**
     * Sets locale
     *
     * @param string|null $locale Represents 5 character ISO Locale that allows the user to request Reference Number Code on Label, Label instructions and Receipt instructions (if applicable) in desired language.  Locale is specified by the combination of language code and country or territory code - 2 character language code and 2 character country or territory code seperated by an underscore ('_') character.  If Locale element is requested along with LabelLinksIndicator, the URL to retrieve Label and Receipts (if applicable) will be returned in the requested Locale. Please note only LabelURL and ReceiptURL (if applicable) will be returned. LocalLanguageLabelURL and LocalLanguageReceiptURL will not be returned if Locale element is present in request. Queen's English (en_GB) is the default
     *
     * @return self
     */
    public function setLocale($locale)
    {
        if (is_null($locale)) {
            throw new \InvalidArgumentException('non-nullable locale cannot be null');
        }
        if ((mb_strlen($locale) > 5)) {
            throw new \InvalidArgumentException('invalid length for $locale when calling ShipmentRequestShipment., must be smaller than or equal to 5.');
        }
        if ((mb_strlen($locale) < 5)) {
            throw new \InvalidArgumentException('invalid length for $locale when calling ShipmentRequestShipment., must be bigger than or equal to 5.');
        }

        $this->container['locale'] = $locale;

        return $this;
    }

    /**
     * Gets shipment_value_threshold_code
     *
     * @return string|null
     */
    public function getShipmentValueThresholdCode()
    {
        return $this->container['shipment_value_threshold_code'];
    }

    /**
     * Sets shipment_value_threshold_code
     *
     * @param string|null $shipment_value_threshold_code Shipment Value Threshold Code. 01 = Shipment value is below or equals to threshold value 02 = Shipment value is above threshold value.     NA = Not Applicable
     *
     * @return self
     */
    public function setShipmentValueThresholdCode($shipment_value_threshold_code)
    {
        if (is_null($shipment_value_threshold_code)) {
            throw new \InvalidArgumentException('non-nullable shipment_value_threshold_code cannot be null');
        }
        if ((mb_strlen($shipment_value_threshold_code) > 2)) {
            throw new \InvalidArgumentException('invalid length for $shipment_value_threshold_code when calling ShipmentRequestShipment., must be smaller than or equal to 2.');
        }
        if ((mb_strlen($shipment_value_threshold_code) < 2)) {
            throw new \InvalidArgumentException('invalid length for $shipment_value_threshold_code when calling ShipmentRequestShipment., must be bigger than or equal to 2.');
        }

        $this->container['shipment_value_threshold_code'] = $shipment_value_threshold_code;

        return $this;
    }

    /**
     * Gets master_carton_id
     *
     * @return string|null
     */
    public function getMasterCartonId()
    {
        return $this->container['master_carton_id'];
    }

    /**
     * Sets master_carton_id
     *
     * @param string|null $master_carton_id Master Carton ID. If Economy Service (17 or 72) : Economy Shipment will be associated with given Master Carton ID. If Non-Economy Service: Master Carton Shipment will be created for given Master Carton ID.
     *
     * @return self
     */
    public function setMasterCartonId($master_carton_id)
    {
        if (is_null($master_carton_id)) {
            throw new \InvalidArgumentException('non-nullable master_carton_id cannot be null');
        }
        if ((mb_strlen($master_carton_id) > 24)) {
            throw new \InvalidArgumentException('invalid length for $master_carton_id when calling ShipmentRequestShipment., must be smaller than or equal to 24.');
        }
        if ((mb_strlen($master_carton_id) < 1)) {
            throw new \InvalidArgumentException('invalid length for $master_carton_id when calling ShipmentRequestShipment., must be bigger than or equal to 1.');
        }

        $this->container['master_carton_id'] = $master_carton_id;

        return $this;
    }

    /**
     * Gets master_carton_indicator
     *
     * @return string|null
     */
    public function getMasterCartonIndicator()
    {
        return $this->container['master_carton_indicator'];
    }

    /**
     * Sets master_carton_indicator
     *
     * @param string|null $master_carton_indicator Master Carton Indicator. Presence of the indicator means Master Carton ID will be created and returned to client.  This is an empty tag, any value inside is ignored.                                                                  MasterCartonIndicator is only valid with Econmoy Shipment (Service Code 17 or 72). Will be ignored if master carton id present.
     *
     * @return self
     */
    public function setMasterCartonIndicator($master_carton_indicator)
    {
        if (is_null($master_carton_indicator)) {
            throw new \InvalidArgumentException('non-nullable master_carton_indicator cannot be null');
        }


        $this->container['master_carton_indicator'] = $master_carton_indicator;

        return $this;
    }

    /**
     * Gets shipment_date
     *
     * @return string|null
     */
    public function getShipmentDate()
    {
        return $this->container['shipment_date'];
    }

    /**
     * Sets shipment_date
     *
     * @param string|null $shipment_date User can send up to 7 days in the future with current date as day zero. Format: YYYYMMDD
     *
     * @return self
     */
    public function setShipmentDate($shipment_date)
    {
        if (is_null($shipment_date)) {
            throw new \InvalidArgumentException('non-nullable shipment_date cannot be null');
        }
        if ((mb_strlen($shipment_date) > 8)) {
            throw new \InvalidArgumentException('invalid length for $shipment_date when calling ShipmentRequestShipment., must be smaller than or equal to 8.');
        }
        if ((mb_strlen($shipment_date) < 8)) {
            throw new \InvalidArgumentException('invalid length for $shipment_date when calling ShipmentRequestShipment., must be bigger than or equal to 8.');
        }

        $this->container['shipment_date'] = $shipment_date;

        return $this;
    }

    /**
     * Gets package
     *
     * @return \AntibodiesOnline\UpsApi\Shipping\ShipmentPackage[]
     */
    public function getPackage()
    {
        return $this->container['package'];
    }

    /**
     * Sets package
     *
     * @param \AntibodiesOnline\UpsApi\Shipping\ShipmentPackage[] $package package
     *
     * @return self
     */
    public function setPackage($package)
    {
        if (is_null($package)) {
            throw new \InvalidArgumentException('non-nullable package cannot be null');
        }


        $this->container['package'] = $package;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


