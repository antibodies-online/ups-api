<?php
/**
 * ShipmentRequestLabelSpecification
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  AntibodiesOnline\UpsApi\Shipping
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Ship
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace AntibodiesOnline\UpsApi\Shipping\Model;

use \ArrayAccess;
use \AntibodiesOnline\UpsApi\Shipping\ObjectSerializer;

/**
 * ShipmentRequestLabelSpecification Class Doc Comment
 *
 * @category Class
 * @description Container used to define the properties required by the user to print and/or display the UPS shipping label.  Required for shipment without return service or shipments with PRL return service. Required for Electronic Return Label or Electronic Import Control Label shipments with SubVersion greater than or equal to 1707.
 * @package  AntibodiesOnline\UpsApi\Shipping
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ShipmentRequestLabelSpecification implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ShipmentRequest_LabelSpecification';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'label_image_format' => '\AntibodiesOnline\UpsApi\Shipping\Model\LabelSpecificationLabelImageFormat',
        'http_user_agent' => 'string',
        'label_stock_size' => '\AntibodiesOnline\UpsApi\Shipping\Model\LabelSpecificationLabelStockSize',
        'instruction' => '\AntibodiesOnline\UpsApi\Shipping\Model\LabelSpecificationInstruction[]',
        'character_set' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'label_image_format' => null,
        'http_user_agent' => null,
        'label_stock_size' => null,
        'instruction' => null,
        'character_set' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'label_image_format' => false,
		'http_user_agent' => false,
		'label_stock_size' => false,
		'instruction' => false,
		'character_set' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'label_image_format' => 'LabelImageFormat',
        'http_user_agent' => 'HTTPUserAgent',
        'label_stock_size' => 'LabelStockSize',
        'instruction' => 'Instruction',
        'character_set' => 'CharacterSet'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'label_image_format' => 'setLabelImageFormat',
        'http_user_agent' => 'setHttpUserAgent',
        'label_stock_size' => 'setLabelStockSize',
        'instruction' => 'setInstruction',
        'character_set' => 'setCharacterSet'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'label_image_format' => 'getLabelImageFormat',
        'http_user_agent' => 'getHttpUserAgent',
        'label_stock_size' => 'getLabelStockSize',
        'instruction' => 'getInstruction',
        'character_set' => 'getCharacterSet'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('label_image_format', $data ?? [], null);
        $this->setIfExists('http_user_agent', $data ?? [], null);
        $this->setIfExists('label_stock_size', $data ?? [], null);
        $this->setIfExists('instruction', $data ?? [], null);
        $this->setIfExists('character_set', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['label_image_format'] === null) {
            $invalidProperties[] = "'label_image_format' can't be null";
        }
        if (!is_null($this->container['http_user_agent']) && (mb_strlen($this->container['http_user_agent']) > 64)) {
            $invalidProperties[] = "invalid value for 'http_user_agent', the character length must be smaller than or equal to 64.";
        }

        if (!is_null($this->container['http_user_agent']) && (mb_strlen($this->container['http_user_agent']) < 1)) {
            $invalidProperties[] = "invalid value for 'http_user_agent', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['label_stock_size'] === null) {
            $invalidProperties[] = "'label_stock_size' can't be null";
        }
        if (!is_null($this->container['character_set']) && (mb_strlen($this->container['character_set']) > 3)) {
            $invalidProperties[] = "invalid value for 'character_set', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['character_set']) && (mb_strlen($this->container['character_set']) < 3)) {
            $invalidProperties[] = "invalid value for 'character_set', the character length must be bigger than or equal to 3.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets label_image_format
     *
     * @return \AntibodiesOnline\UpsApi\Shipping\Model\LabelSpecificationLabelImageFormat
     */
    public function getLabelImageFormat()
    {
        return $this->container['label_image_format'];
    }

    /**
     * Sets label_image_format
     *
     * @param \AntibodiesOnline\UpsApi\Shipping\Model\LabelSpecificationLabelImageFormat $label_image_format label_image_format
     *
     * @return self
     */
    public function setLabelImageFormat($label_image_format)
    {
        if (is_null($label_image_format)) {
            throw new \InvalidArgumentException('non-nullable label_image_format cannot be null');
        }
        $this->container['label_image_format'] = $label_image_format;

        return $this;
    }

    /**
     * Gets http_user_agent
     *
     * @return string|null
     */
    public function getHttpUserAgent()
    {
        return $this->container['http_user_agent'];
    }

    /**
     * Sets http_user_agent
     *
     * @param string|null $http_user_agent Browser HTTPUserAgent String. This is the preferred way of identifying GIF image type to be generated.  Required if /ShipmentRequest/LabelSpecificationLabelSpecification/LabelImageFormat/Code = Gif. Default to Mozilla/4.5 if this field is missing or has invalid value.
     *
     * @return self
     */
    public function setHttpUserAgent($http_user_agent)
    {
        if (is_null($http_user_agent)) {
            throw new \InvalidArgumentException('non-nullable http_user_agent cannot be null');
        }
        if ((mb_strlen($http_user_agent) > 64)) {
            throw new \InvalidArgumentException('invalid length for $http_user_agent when calling ShipmentRequestLabelSpecification., must be smaller than or equal to 64.');
        }
        if ((mb_strlen($http_user_agent) < 1)) {
            throw new \InvalidArgumentException('invalid length for $http_user_agent when calling ShipmentRequestLabelSpecification., must be bigger than or equal to 1.');
        }

        $this->container['http_user_agent'] = $http_user_agent;

        return $this;
    }

    /**
     * Gets label_stock_size
     *
     * @return \AntibodiesOnline\UpsApi\Shipping\Model\LabelSpecificationLabelStockSize
     */
    public function getLabelStockSize()
    {
        return $this->container['label_stock_size'];
    }

    /**
     * Sets label_stock_size
     *
     * @param \AntibodiesOnline\UpsApi\Shipping\Model\LabelSpecificationLabelStockSize $label_stock_size label_stock_size
     *
     * @return self
     */
    public function setLabelStockSize($label_stock_size)
    {
        if (is_null($label_stock_size)) {
            throw new \InvalidArgumentException('non-nullable label_stock_size cannot be null');
        }
        $this->container['label_stock_size'] = $label_stock_size;

        return $this;
    }

    /**
     * Gets instruction
     *
     * @return \AntibodiesOnline\UpsApi\Shipping\Model\LabelSpecificationInstruction[]|null
     */
    public function getInstruction()
    {
        return $this->container['instruction'];
    }

    /**
     * Sets instruction
     *
     * @param \AntibodiesOnline\UpsApi\Shipping\Model\LabelSpecificationInstruction[]|null $instruction instruction
     *
     * @return self
     */
    public function setInstruction($instruction)
    {
        if (is_null($instruction)) {
            throw new \InvalidArgumentException('non-nullable instruction cannot be null');
        }
        $this->container['instruction'] = $instruction;

        return $this;
    }

    /**
     * Gets character_set
     *
     * @return string|null
     */
    public function getCharacterSet()
    {
        return $this->container['character_set'];
    }

    /**
     * Sets character_set
     *
     * @param string|null $character_set Language character set expected on label. Valid values: dan = Danish (Latin-1) nld = Dutch (Latin-1) fin = Finnish (Latin-1) fra = French (Latin-1) deu = German (Latin-1) itl = Italian (Latin-1) nor = Norwegian (Latin-1) pol  = Polish (Latin-2) por = Poruguese (Latin-1) spa = Spanish (Latin-1)  swe = Swedish (Latin-1)  ces = Czech (Latin-2) hun = Hungarian (Latin-2) slk = Slovak (Latin-2) rus = Russian (Cyrillic) tur = Turkish (Latin-5) ron = Romanian (Latin-2) bul = Bulgarian (Latin-2) est = Estonian (Latin-2) ell = Greek (Latin-2) lav = Latvian (Latin-2) lit = Lithuanian (Latin-2) eng = English (Latin-1)  Default is English (Latin-1).
     *
     * @return self
     */
    public function setCharacterSet($character_set)
    {
        if (is_null($character_set)) {
            throw new \InvalidArgumentException('non-nullable character_set cannot be null');
        }
        if ((mb_strlen($character_set) > 3)) {
            throw new \InvalidArgumentException('invalid length for $character_set when calling ShipmentRequestLabelSpecification., must be smaller than or equal to 3.');
        }
        if ((mb_strlen($character_set) < 3)) {
            throw new \InvalidArgumentException('invalid length for $character_set when calling ShipmentRequestLabelSpecification., must be bigger than or equal to 3.');
        }

        $this->container['character_set'] = $character_set;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


