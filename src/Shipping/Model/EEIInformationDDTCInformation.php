<?php
/**
 * EEIInformationDDTCInformation
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  AntibodiesOnline\UpsApi\Shipping
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Ship
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace AntibodiesOnline\UpsApi\Shipping\Model;

use \ArrayAccess;
use \AntibodiesOnline\UpsApi\Shipping\ObjectSerializer;

/**
 * EEIInformationDDTCInformation Class Doc Comment
 *
 * @category Class
 * @description Department of State/ Directorate of Defense Trade Control Information. This element is a container for additional information that is applicable to SDL products. It will only be evaluated if the provided license code is an SDL code.  Applies to EEI Form only.
 * @package  AntibodiesOnline\UpsApi\Shipping
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class EEIInformationDDTCInformation implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'EEIInformation_DDTCInformation';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'itar_exemption_number' => 'string',
        'usml_category_code' => 'string',
        'eligible_party_indicator' => 'string',
        'registration_number' => 'string',
        'quantity' => 'string',
        'unit_of_measurement' => '\AntibodiesOnline\UpsApi\Shipping\Model\DDTCInformationUnitOfMeasurement',
        'significant_military_equipment_indicator' => 'string',
        'acm_number' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'itar_exemption_number' => null,
        'usml_category_code' => null,
        'eligible_party_indicator' => null,
        'registration_number' => null,
        'quantity' => null,
        'unit_of_measurement' => null,
        'significant_military_equipment_indicator' => null,
        'acm_number' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'itar_exemption_number' => false,
		'usml_category_code' => false,
		'eligible_party_indicator' => false,
		'registration_number' => false,
		'quantity' => false,
		'unit_of_measurement' => false,
		'significant_military_equipment_indicator' => false,
		'acm_number' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'itar_exemption_number' => 'ITARExemptionNumber',
        'usml_category_code' => 'USMLCategoryCode',
        'eligible_party_indicator' => 'EligiblePartyIndicator',
        'registration_number' => 'RegistrationNumber',
        'quantity' => 'Quantity',
        'unit_of_measurement' => 'UnitOfMeasurement',
        'significant_military_equipment_indicator' => 'SignificantMilitaryEquipmentIndicator',
        'acm_number' => 'ACMNumber'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'itar_exemption_number' => 'setItarExemptionNumber',
        'usml_category_code' => 'setUsmlCategoryCode',
        'eligible_party_indicator' => 'setEligiblePartyIndicator',
        'registration_number' => 'setRegistrationNumber',
        'quantity' => 'setQuantity',
        'unit_of_measurement' => 'setUnitOfMeasurement',
        'significant_military_equipment_indicator' => 'setSignificantMilitaryEquipmentIndicator',
        'acm_number' => 'setAcmNumber'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'itar_exemption_number' => 'getItarExemptionNumber',
        'usml_category_code' => 'getUsmlCategoryCode',
        'eligible_party_indicator' => 'getEligiblePartyIndicator',
        'registration_number' => 'getRegistrationNumber',
        'quantity' => 'getQuantity',
        'unit_of_measurement' => 'getUnitOfMeasurement',
        'significant_military_equipment_indicator' => 'getSignificantMilitaryEquipmentIndicator',
        'acm_number' => 'getAcmNumber'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('itar_exemption_number', $data ?? [], null);
        $this->setIfExists('usml_category_code', $data ?? [], null);
        $this->setIfExists('eligible_party_indicator', $data ?? [], null);
        $this->setIfExists('registration_number', $data ?? [], null);
        $this->setIfExists('quantity', $data ?? [], null);
        $this->setIfExists('unit_of_measurement', $data ?? [], null);
        $this->setIfExists('significant_military_equipment_indicator', $data ?? [], null);
        $this->setIfExists('acm_number', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['itar_exemption_number']) && (mb_strlen($this->container['itar_exemption_number']) > 10)) {
            $invalidProperties[] = "invalid value for 'itar_exemption_number', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['itar_exemption_number']) && (mb_strlen($this->container['itar_exemption_number']) < 3)) {
            $invalidProperties[] = "invalid value for 'itar_exemption_number', the character length must be bigger than or equal to 3.";
        }

        if (!is_null($this->container['usml_category_code']) && (mb_strlen($this->container['usml_category_code']) > 2)) {
            $invalidProperties[] = "invalid value for 'usml_category_code', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['usml_category_code']) && (mb_strlen($this->container['usml_category_code']) < 2)) {
            $invalidProperties[] = "invalid value for 'usml_category_code', the character length must be bigger than or equal to 2.";
        }

        if (!is_null($this->container['registration_number']) && (mb_strlen($this->container['registration_number']) > 6)) {
            $invalidProperties[] = "invalid value for 'registration_number', the character length must be smaller than or equal to 6.";
        }

        if (!is_null($this->container['registration_number']) && (mb_strlen($this->container['registration_number']) < 6)) {
            $invalidProperties[] = "invalid value for 'registration_number', the character length must be bigger than or equal to 6.";
        }

        if (!is_null($this->container['quantity']) && (mb_strlen($this->container['quantity']) > 7)) {
            $invalidProperties[] = "invalid value for 'quantity', the character length must be smaller than or equal to 7.";
        }

        if (!is_null($this->container['quantity']) && (mb_strlen($this->container['quantity']) < 1)) {
            $invalidProperties[] = "invalid value for 'quantity', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['acm_number']) && (mb_strlen($this->container['acm_number']) > 11)) {
            $invalidProperties[] = "invalid value for 'acm_number', the character length must be smaller than or equal to 11.";
        }

        if (!is_null($this->container['acm_number']) && (mb_strlen($this->container['acm_number']) < 11)) {
            $invalidProperties[] = "invalid value for 'acm_number', the character length must be bigger than or equal to 11.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets itar_exemption_number
     *
     * @return string|null
     */
    public function getItarExemptionNumber()
    {
        return $this->container['itar_exemption_number'];
    }

    /**
     * Sets itar_exemption_number
     *
     * @param string|null $itar_exemption_number The specific citation (exemption number) under the International Traffic in Arms Regulations (ITAR) from the Code of Federal Register (see 22 CFR 120-130) that exempts the shipment from the requirements for a license or other written authorization from the Directorate of Trade Controls (DDTC).  Refer to EEI License Codes in the Appendix for valid values.  Applies to EEI Form only. This field is applicable for EEIFiling option 1A and 3.
     *
     * @return self
     */
    public function setItarExemptionNumber($itar_exemption_number)
    {
        if (is_null($itar_exemption_number)) {
            throw new \InvalidArgumentException('non-nullable itar_exemption_number cannot be null');
        }
        if ((mb_strlen($itar_exemption_number) > 10)) {
            throw new \InvalidArgumentException('invalid length for $itar_exemption_number when calling EEIInformationDDTCInformation., must be smaller than or equal to 10.');
        }
        if ((mb_strlen($itar_exemption_number) < 3)) {
            throw new \InvalidArgumentException('invalid length for $itar_exemption_number when calling EEIInformationDDTCInformation., must be bigger than or equal to 3.');
        }

        $this->container['itar_exemption_number'] = $itar_exemption_number;

        return $this;
    }

    /**
     * Gets usml_category_code
     *
     * @return string|null
     */
    public function getUsmlCategoryCode()
    {
        return $this->container['usml_category_code'];
    }

    /**
     * Sets usml_category_code
     *
     * @param string|null $usml_category_code Digit numeric code (e.g. 01-18, 20 or 21). Indicates the U.S. Munitions List (USML) category article, service or related technical data as it applies to the article reported.  Applies to EEI form only. It is required for EEIFilingOption code 3.
     *
     * @return self
     */
    public function setUsmlCategoryCode($usml_category_code)
    {
        if (is_null($usml_category_code)) {
            throw new \InvalidArgumentException('non-nullable usml_category_code cannot be null');
        }
        if ((mb_strlen($usml_category_code) > 2)) {
            throw new \InvalidArgumentException('invalid length for $usml_category_code when calling EEIInformationDDTCInformation., must be smaller than or equal to 2.');
        }
        if ((mb_strlen($usml_category_code) < 2)) {
            throw new \InvalidArgumentException('invalid length for $usml_category_code when calling EEIInformationDDTCInformation., must be bigger than or equal to 2.');
        }

        $this->container['usml_category_code'] = $usml_category_code;

        return $this;
    }

    /**
     * Gets eligible_party_indicator
     *
     * @return string|null
     */
    public function getEligiblePartyIndicator()
    {
        return $this->container['eligible_party_indicator'];
    }

    /**
     * Sets eligible_party_indicator
     *
     * @param string|null $eligible_party_indicator Presence/Absent indicator. Certification by the U.S. exporter that the exporter is an eligible party to participate in the defense trade.
     *
     * @return self
     */
    public function setEligiblePartyIndicator($eligible_party_indicator)
    {
        if (is_null($eligible_party_indicator)) {
            throw new \InvalidArgumentException('non-nullable eligible_party_indicator cannot be null');
        }


        $this->container['eligible_party_indicator'] = $eligible_party_indicator;

        return $this;
    }

    /**
     * Gets registration_number
     *
     * @return string|null
     */
    public function getRegistrationNumber()
    {
        return $this->container['registration_number'];
    }

    /**
     * Sets registration_number
     *
     * @param string|null $registration_number It is a unique registration code assigned to the registrant. The DDTC registration code consist of a letter prefix, M (assigned to a manufacturer and/or exporter) or K (assigned to a broker), followed by four or five digits (e.g. K-1234 or M12345).  It is required for EEIFilingOption code 3.
     *
     * @return self
     */
    public function setRegistrationNumber($registration_number)
    {
        if (is_null($registration_number)) {
            throw new \InvalidArgumentException('non-nullable registration_number cannot be null');
        }
        if ((mb_strlen($registration_number) > 6)) {
            throw new \InvalidArgumentException('invalid length for $registration_number when calling EEIInformationDDTCInformation., must be smaller than or equal to 6.');
        }
        if ((mb_strlen($registration_number) < 6)) {
            throw new \InvalidArgumentException('invalid length for $registration_number when calling EEIInformationDDTCInformation., must be bigger than or equal to 6.');
        }

        $this->container['registration_number'] = $registration_number;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return string|null
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param string|null $quantity Export Quantity.  Applies to EEI form only. It is required for EEIFilingOption code 3. Only positive integer value is valid.
     *
     * @return self
     */
    public function setQuantity($quantity)
    {
        if (is_null($quantity)) {
            throw new \InvalidArgumentException('non-nullable quantity cannot be null');
        }
        if ((mb_strlen($quantity) > 7)) {
            throw new \InvalidArgumentException('invalid length for $quantity when calling EEIInformationDDTCInformation., must be smaller than or equal to 7.');
        }
        if ((mb_strlen($quantity) < 1)) {
            throw new \InvalidArgumentException('invalid length for $quantity when calling EEIInformationDDTCInformation., must be bigger than or equal to 1.');
        }

        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets unit_of_measurement
     *
     * @return \AntibodiesOnline\UpsApi\Shipping\Model\DDTCInformationUnitOfMeasurement|null
     */
    public function getUnitOfMeasurement()
    {
        return $this->container['unit_of_measurement'];
    }

    /**
     * Sets unit_of_measurement
     *
     * @param \AntibodiesOnline\UpsApi\Shipping\Model\DDTCInformationUnitOfMeasurement|null $unit_of_measurement unit_of_measurement
     *
     * @return self
     */
    public function setUnitOfMeasurement($unit_of_measurement)
    {
        if (is_null($unit_of_measurement)) {
            throw new \InvalidArgumentException('non-nullable unit_of_measurement cannot be null');
        }
        $this->container['unit_of_measurement'] = $unit_of_measurement;

        return $this;
    }

    /**
     * Gets significant_military_equipment_indicator
     *
     * @return string|null
     */
    public function getSignificantMilitaryEquipmentIndicator()
    {
        return $this->container['significant_military_equipment_indicator'];
    }

    /**
     * Sets significant_military_equipment_indicator
     *
     * @param string|null $significant_military_equipment_indicator Presence/ Absence Indicator.  Applies to EEI form only.
     *
     * @return self
     */
    public function setSignificantMilitaryEquipmentIndicator($significant_military_equipment_indicator)
    {
        if (is_null($significant_military_equipment_indicator)) {
            throw new \InvalidArgumentException('non-nullable significant_military_equipment_indicator cannot be null');
        }


        $this->container['significant_military_equipment_indicator'] = $significant_military_equipment_indicator;

        return $this;
    }

    /**
     * Gets acm_number
     *
     * @return string|null
     */
    public function getAcmNumber()
    {
        return $this->container['acm_number'];
    }

    /**
     * Sets acm_number
     *
     * @param string|null $acm_number Approved Community Member Number (ACM). It is required to be provided along with ITARExemptionNumber for some License code (SGB and SAU). The ACM# for the United Kingdom (License code SGB) must begin with UK followed by 9 numbers.  The ACM# for Australia (License Code SAU) must begin with DTT followed by 8 numbers.  Applies to EEI form only.  It is required for EEIFilingOption code 1A and 3.
     *
     * @return self
     */
    public function setAcmNumber($acm_number)
    {
        if (is_null($acm_number)) {
            throw new \InvalidArgumentException('non-nullable acm_number cannot be null');
        }
        if ((mb_strlen($acm_number) > 11)) {
            throw new \InvalidArgumentException('invalid length for $acm_number when calling EEIInformationDDTCInformation., must be smaller than or equal to 11.');
        }
        if ((mb_strlen($acm_number) < 11)) {
            throw new \InvalidArgumentException('invalid length for $acm_number when calling EEIInformationDDTCInformation., must be bigger than or equal to 11.');
        }

        $this->container['acm_number'] = $acm_number;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


