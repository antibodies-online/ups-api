<?php
/**
 * InternationalFormsProduct
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  AntibodiesOnline\UpsApi\Shipping
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Ship
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace AntibodiesOnline\UpsApi\Shipping\Model;

use \ArrayAccess;
use \AntibodiesOnline\UpsApi\Shipping\ObjectSerializer;

/**
 * InternationalFormsProduct Class Doc Comment
 *
 * @category Class
 * @description Contains the commodity/product information.  Applies to EEI, Invoice, Partial Invoice, CO and NAFTA CO. When any International form is requested, at least one Product must be present.   Maximum number of products allowed for different forms are:  50: Package Packing List  100: Commercial Invoice, NAFTA, CO, EEI  1000: Air Freight packing list  Note: For Partial Invoice this container is optional.
 * @package  AntibodiesOnline\UpsApi\Shipping
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class InternationalFormsProduct implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'InternationalForms_Product';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'description' => 'string[]',
        'unit' => '\AntibodiesOnline\UpsApi\Shipping\Model\ProductUnit',
        'commodity_code' => 'string',
        'part_number' => 'string',
        'origin_country_code' => 'string',
        'joint_production_indicator' => 'string',
        'net_cost_code' => 'string',
        'net_cost_date_range' => '\AntibodiesOnline\UpsApi\Shipping\Model\ProductNetCostDateRange',
        'preference_criteria' => 'string',
        'producer_info' => 'string',
        'marks_and_numbers' => 'string',
        'number_of_packages_per_commodity' => 'string',
        'product_weight' => '\AntibodiesOnline\UpsApi\Shipping\Model\ProductProductWeight',
        'vehicle_id' => 'string',
        'schedule_b' => '\AntibodiesOnline\UpsApi\Shipping\Model\ProductScheduleB',
        'export_type' => 'string',
        'sed_total_value' => 'string',
        'exclude_from_form' => '\AntibodiesOnline\UpsApi\Shipping\Model\ProductExcludeFromForm',
        'packing_list_info' => '\AntibodiesOnline\UpsApi\Shipping\Model\ProductPackingListInfo',
        'eei_information' => '\AntibodiesOnline\UpsApi\Shipping\Model\ProductEEIInformation'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'description' => null,
        'unit' => null,
        'commodity_code' => null,
        'part_number' => null,
        'origin_country_code' => null,
        'joint_production_indicator' => null,
        'net_cost_code' => null,
        'net_cost_date_range' => null,
        'preference_criteria' => null,
        'producer_info' => null,
        'marks_and_numbers' => null,
        'number_of_packages_per_commodity' => null,
        'product_weight' => null,
        'vehicle_id' => null,
        'schedule_b' => null,
        'export_type' => null,
        'sed_total_value' => null,
        'exclude_from_form' => null,
        'packing_list_info' => null,
        'eei_information' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'description' => false,
		'unit' => false,
		'commodity_code' => false,
		'part_number' => false,
		'origin_country_code' => false,
		'joint_production_indicator' => false,
		'net_cost_code' => false,
		'net_cost_date_range' => false,
		'preference_criteria' => false,
		'producer_info' => false,
		'marks_and_numbers' => false,
		'number_of_packages_per_commodity' => false,
		'product_weight' => false,
		'vehicle_id' => false,
		'schedule_b' => false,
		'export_type' => false,
		'sed_total_value' => false,
		'exclude_from_form' => false,
		'packing_list_info' => false,
		'eei_information' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'description' => 'Description',
        'unit' => 'Unit',
        'commodity_code' => 'CommodityCode',
        'part_number' => 'PartNumber',
        'origin_country_code' => 'OriginCountryCode',
        'joint_production_indicator' => 'JointProductionIndicator',
        'net_cost_code' => 'NetCostCode',
        'net_cost_date_range' => 'NetCostDateRange',
        'preference_criteria' => 'PreferenceCriteria',
        'producer_info' => 'ProducerInfo',
        'marks_and_numbers' => 'MarksAndNumbers',
        'number_of_packages_per_commodity' => 'NumberOfPackagesPerCommodity',
        'product_weight' => 'ProductWeight',
        'vehicle_id' => 'VehicleID',
        'schedule_b' => 'ScheduleB',
        'export_type' => 'ExportType',
        'sed_total_value' => 'SEDTotalValue',
        'exclude_from_form' => 'ExcludeFromForm',
        'packing_list_info' => 'PackingListInfo',
        'eei_information' => 'EEIInformation'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'description' => 'setDescription',
        'unit' => 'setUnit',
        'commodity_code' => 'setCommodityCode',
        'part_number' => 'setPartNumber',
        'origin_country_code' => 'setOriginCountryCode',
        'joint_production_indicator' => 'setJointProductionIndicator',
        'net_cost_code' => 'setNetCostCode',
        'net_cost_date_range' => 'setNetCostDateRange',
        'preference_criteria' => 'setPreferenceCriteria',
        'producer_info' => 'setProducerInfo',
        'marks_and_numbers' => 'setMarksAndNumbers',
        'number_of_packages_per_commodity' => 'setNumberOfPackagesPerCommodity',
        'product_weight' => 'setProductWeight',
        'vehicle_id' => 'setVehicleId',
        'schedule_b' => 'setScheduleB',
        'export_type' => 'setExportType',
        'sed_total_value' => 'setSedTotalValue',
        'exclude_from_form' => 'setExcludeFromForm',
        'packing_list_info' => 'setPackingListInfo',
        'eei_information' => 'setEeiInformation'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'description' => 'getDescription',
        'unit' => 'getUnit',
        'commodity_code' => 'getCommodityCode',
        'part_number' => 'getPartNumber',
        'origin_country_code' => 'getOriginCountryCode',
        'joint_production_indicator' => 'getJointProductionIndicator',
        'net_cost_code' => 'getNetCostCode',
        'net_cost_date_range' => 'getNetCostDateRange',
        'preference_criteria' => 'getPreferenceCriteria',
        'producer_info' => 'getProducerInfo',
        'marks_and_numbers' => 'getMarksAndNumbers',
        'number_of_packages_per_commodity' => 'getNumberOfPackagesPerCommodity',
        'product_weight' => 'getProductWeight',
        'vehicle_id' => 'getVehicleId',
        'schedule_b' => 'getScheduleB',
        'export_type' => 'getExportType',
        'sed_total_value' => 'getSedTotalValue',
        'exclude_from_form' => 'getExcludeFromForm',
        'packing_list_info' => 'getPackingListInfo',
        'eei_information' => 'getEeiInformation'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('unit', $data ?? [], null);
        $this->setIfExists('commodity_code', $data ?? [], null);
        $this->setIfExists('part_number', $data ?? [], null);
        $this->setIfExists('origin_country_code', $data ?? [], null);
        $this->setIfExists('joint_production_indicator', $data ?? [], null);
        $this->setIfExists('net_cost_code', $data ?? [], null);
        $this->setIfExists('net_cost_date_range', $data ?? [], null);
        $this->setIfExists('preference_criteria', $data ?? [], null);
        $this->setIfExists('producer_info', $data ?? [], null);
        $this->setIfExists('marks_and_numbers', $data ?? [], null);
        $this->setIfExists('number_of_packages_per_commodity', $data ?? [], null);
        $this->setIfExists('product_weight', $data ?? [], null);
        $this->setIfExists('vehicle_id', $data ?? [], null);
        $this->setIfExists('schedule_b', $data ?? [], null);
        $this->setIfExists('export_type', $data ?? [], null);
        $this->setIfExists('sed_total_value', $data ?? [], null);
        $this->setIfExists('exclude_from_form', $data ?? [], null);
        $this->setIfExists('packing_list_info', $data ?? [], null);
        $this->setIfExists('eei_information', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['description'] === null) {
            $invalidProperties[] = "'description' can't be null";
        }
        if (!is_null($this->container['commodity_code']) && (mb_strlen($this->container['commodity_code']) > 15)) {
            $invalidProperties[] = "invalid value for 'commodity_code', the character length must be smaller than or equal to 15.";
        }

        if (!is_null($this->container['commodity_code']) && (mb_strlen($this->container['commodity_code']) < 6)) {
            $invalidProperties[] = "invalid value for 'commodity_code', the character length must be bigger than or equal to 6.";
        }

        if (!is_null($this->container['part_number']) && (mb_strlen($this->container['part_number']) > 35)) {
            $invalidProperties[] = "invalid value for 'part_number', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['part_number']) && (mb_strlen($this->container['part_number']) < 1)) {
            $invalidProperties[] = "invalid value for 'part_number', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['origin_country_code']) && (mb_strlen($this->container['origin_country_code']) > 2)) {
            $invalidProperties[] = "invalid value for 'origin_country_code', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['origin_country_code']) && (mb_strlen($this->container['origin_country_code']) < 2)) {
            $invalidProperties[] = "invalid value for 'origin_country_code', the character length must be bigger than or equal to 2.";
        }

        if (!is_null($this->container['net_cost_code']) && (mb_strlen($this->container['net_cost_code']) > 2)) {
            $invalidProperties[] = "invalid value for 'net_cost_code', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['net_cost_code']) && (mb_strlen($this->container['net_cost_code']) < 2)) {
            $invalidProperties[] = "invalid value for 'net_cost_code', the character length must be bigger than or equal to 2.";
        }

        if (!is_null($this->container['preference_criteria']) && (mb_strlen($this->container['preference_criteria']) > 1)) {
            $invalidProperties[] = "invalid value for 'preference_criteria', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['preference_criteria']) && (mb_strlen($this->container['preference_criteria']) < 1)) {
            $invalidProperties[] = "invalid value for 'preference_criteria', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['producer_info']) && (mb_strlen($this->container['producer_info']) > 5)) {
            $invalidProperties[] = "invalid value for 'producer_info', the character length must be smaller than or equal to 5.";
        }

        if (!is_null($this->container['producer_info']) && (mb_strlen($this->container['producer_info']) < 3)) {
            $invalidProperties[] = "invalid value for 'producer_info', the character length must be bigger than or equal to 3.";
        }

        if (!is_null($this->container['marks_and_numbers']) && (mb_strlen($this->container['marks_and_numbers']) > 35)) {
            $invalidProperties[] = "invalid value for 'marks_and_numbers', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['marks_and_numbers']) && (mb_strlen($this->container['marks_and_numbers']) < 1)) {
            $invalidProperties[] = "invalid value for 'marks_and_numbers', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['number_of_packages_per_commodity']) && (mb_strlen($this->container['number_of_packages_per_commodity']) > 3)) {
            $invalidProperties[] = "invalid value for 'number_of_packages_per_commodity', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['number_of_packages_per_commodity']) && (mb_strlen($this->container['number_of_packages_per_commodity']) < 1)) {
            $invalidProperties[] = "invalid value for 'number_of_packages_per_commodity', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['vehicle_id']) && (mb_strlen($this->container['vehicle_id']) > 25)) {
            $invalidProperties[] = "invalid value for 'vehicle_id', the character length must be smaller than or equal to 25.";
        }

        if (!is_null($this->container['vehicle_id']) && (mb_strlen($this->container['vehicle_id']) < 1)) {
            $invalidProperties[] = "invalid value for 'vehicle_id', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['export_type']) && (mb_strlen($this->container['export_type']) > 1)) {
            $invalidProperties[] = "invalid value for 'export_type', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['export_type']) && (mb_strlen($this->container['export_type']) < 1)) {
            $invalidProperties[] = "invalid value for 'export_type', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['sed_total_value']) && (mb_strlen($this->container['sed_total_value']) > 15)) {
            $invalidProperties[] = "invalid value for 'sed_total_value', the character length must be smaller than or equal to 15.";
        }

        if (!is_null($this->container['sed_total_value']) && (mb_strlen($this->container['sed_total_value']) < 1)) {
            $invalidProperties[] = "invalid value for 'sed_total_value', the character length must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets description
     *
     * @return string[]
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string[] $description Description of the product.  Applies to all International Forms. Optional for Partial Invoice. Must be present at least once and can occur for a maximum of 3 times.
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }


        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets unit
     *
     * @return \AntibodiesOnline\UpsApi\Shipping\Model\ProductUnit|null
     */
    public function getUnit()
    {
        return $this->container['unit'];
    }

    /**
     * Sets unit
     *
     * @param \AntibodiesOnline\UpsApi\Shipping\Model\ProductUnit|null $unit unit
     *
     * @return self
     */
    public function setUnit($unit)
    {
        if (is_null($unit)) {
            throw new \InvalidArgumentException('non-nullable unit cannot be null');
        }
        $this->container['unit'] = $unit;

        return $this;
    }

    /**
     * Gets commodity_code
     *
     * @return string|null
     */
    public function getCommodityCode()
    {
        return $this->container['commodity_code'];
    }

    /**
     * Sets commodity_code
     *
     * @param string|null $commodity_code 6-to-15-alphanumeric commodity code. Customs uses this code to determine what duties should be assessed on the commodity.  Applies to Invoice, Partial Invoice and NAFTA CO. Required for NAFTA CO and optional for Partial Invoice. Should be at least 6 alphanumeric. For NAFTA CO: For each good described in Description of Goods field, identify the H.S. tariff classification to six digits. If the good is subject to a specific rule of origin in Annex 401 that requires eight digits, identify to eight digits, using the H.S. tariff classification of the country or territory into whose territory the good is imported.
     *
     * @return self
     */
    public function setCommodityCode($commodity_code)
    {
        if (is_null($commodity_code)) {
            throw new \InvalidArgumentException('non-nullable commodity_code cannot be null');
        }
        if ((mb_strlen($commodity_code) > 15)) {
            throw new \InvalidArgumentException('invalid length for $commodity_code when calling InternationalFormsProduct., must be smaller than or equal to 15.');
        }
        if ((mb_strlen($commodity_code) < 6)) {
            throw new \InvalidArgumentException('invalid length for $commodity_code when calling InternationalFormsProduct., must be bigger than or equal to 6.');
        }

        $this->container['commodity_code'] = $commodity_code;

        return $this;
    }

    /**
     * Gets part_number
     *
     * @return string|null
     */
    public function getPartNumber()
    {
        return $this->container['part_number'];
    }

    /**
     * Sets part_number
     *
     * @param string|null $part_number The part number or reference number for the product contained in the invoice line, as indicated on the customs invoice.  Applies to Invoice and Partial Invoice. Required for Invoice forms and optional for Partial Invoice.
     *
     * @return self
     */
    public function setPartNumber($part_number)
    {
        if (is_null($part_number)) {
            throw new \InvalidArgumentException('non-nullable part_number cannot be null');
        }
        if ((mb_strlen($part_number) > 35)) {
            throw new \InvalidArgumentException('invalid length for $part_number when calling InternationalFormsProduct., must be smaller than or equal to 35.');
        }
        if ((mb_strlen($part_number) < 1)) {
            throw new \InvalidArgumentException('invalid length for $part_number when calling InternationalFormsProduct., must be bigger than or equal to 1.');
        }

        $this->container['part_number'] = $part_number;

        return $this;
    }

    /**
     * Gets origin_country_code
     *
     * @return string|null
     */
    public function getOriginCountryCode()
    {
        return $this->container['origin_country_code'];
    }

    /**
     * Sets origin_country_code
     *
     * @param string|null $origin_country_code The country or territory in which the good was manufactured, produced or grown. For detailed information on country or territory of origin, certificate of origin, rules of origin, and any related matters, please refer to the U.S. Customs and Border Protection Web site at www.customs.gov or contact your country or territory's Customs authority.
     *
     * @return self
     */
    public function setOriginCountryCode($origin_country_code)
    {
        if (is_null($origin_country_code)) {
            throw new \InvalidArgumentException('non-nullable origin_country_code cannot be null');
        }
        if ((mb_strlen($origin_country_code) > 2)) {
            throw new \InvalidArgumentException('invalid length for $origin_country_code when calling InternationalFormsProduct., must be smaller than or equal to 2.');
        }
        if ((mb_strlen($origin_country_code) < 2)) {
            throw new \InvalidArgumentException('invalid length for $origin_country_code when calling InternationalFormsProduct., must be bigger than or equal to 2.');
        }

        $this->container['origin_country_code'] = $origin_country_code;

        return $this;
    }

    /**
     * Gets joint_production_indicator
     *
     * @return string|null
     */
    public function getJointProductionIndicator()
    {
        return $this->container['joint_production_indicator'];
    }

    /**
     * Sets joint_production_indicator
     *
     * @param string|null $joint_production_indicator If present, JNT will be used as the origin of country or territory code on the NAFTA form and the Product/Origincountry or territoryCode tag will be ignored.  Applies to NAFTA CO only.
     *
     * @return self
     */
    public function setJointProductionIndicator($joint_production_indicator)
    {
        if (is_null($joint_production_indicator)) {
            throw new \InvalidArgumentException('non-nullable joint_production_indicator cannot be null');
        }


        $this->container['joint_production_indicator'] = $joint_production_indicator;

        return $this;
    }

    /**
     * Gets net_cost_code
     *
     * @return string|null
     */
    public function getNetCostCode()
    {
        return $this->container['net_cost_code'];
    }

    /**
     * Sets net_cost_code
     *
     * @param string|null $net_cost_code For each good described in the Description of Goods field, where the good is subject to a regional value content (RVC) requirement, indicate NC if the RVC is calculated according to the net cost method; otherwise, indicate NO. If the RVC is calculated over a period of time then indicate NC with begin/end date by passing code ND  Applies to NAFTA CO only. Required for NAFTA CO.  Valid values: NC, ND and NO.
     *
     * @return self
     */
    public function setNetCostCode($net_cost_code)
    {
        if (is_null($net_cost_code)) {
            throw new \InvalidArgumentException('non-nullable net_cost_code cannot be null');
        }
        if ((mb_strlen($net_cost_code) > 2)) {
            throw new \InvalidArgumentException('invalid length for $net_cost_code when calling InternationalFormsProduct., must be smaller than or equal to 2.');
        }
        if ((mb_strlen($net_cost_code) < 2)) {
            throw new \InvalidArgumentException('invalid length for $net_cost_code when calling InternationalFormsProduct., must be bigger than or equal to 2.');
        }

        $this->container['net_cost_code'] = $net_cost_code;

        return $this;
    }

    /**
     * Gets net_cost_date_range
     *
     * @return \AntibodiesOnline\UpsApi\Shipping\Model\ProductNetCostDateRange|null
     */
    public function getNetCostDateRange()
    {
        return $this->container['net_cost_date_range'];
    }

    /**
     * Sets net_cost_date_range
     *
     * @param \AntibodiesOnline\UpsApi\Shipping\Model\ProductNetCostDateRange|null $net_cost_date_range net_cost_date_range
     *
     * @return self
     */
    public function setNetCostDateRange($net_cost_date_range)
    {
        if (is_null($net_cost_date_range)) {
            throw new \InvalidArgumentException('non-nullable net_cost_date_range cannot be null');
        }
        $this->container['net_cost_date_range'] = $net_cost_date_range;

        return $this;
    }

    /**
     * Gets preference_criteria
     *
     * @return string|null
     */
    public function getPreferenceCriteria()
    {
        return $this->container['preference_criteria'];
    }

    /**
     * Sets preference_criteria
     *
     * @param string|null $preference_criteria Indicates the criterion (A through F) for each good described in the Description of Goods field if applicable.   The rules of origin are contained in Chapter Four and Annex 401.   Additional rules are described in Annex 703.2 (certain agricultural goods), Annex 300-B, Appendix 6 (certain textile goods) and Annex 308.1 (certain automatic data processing goods and their parts).  Applies to NAFTA CO only.
     *
     * @return self
     */
    public function setPreferenceCriteria($preference_criteria)
    {
        if (is_null($preference_criteria)) {
            throw new \InvalidArgumentException('non-nullable preference_criteria cannot be null');
        }
        if ((mb_strlen($preference_criteria) > 1)) {
            throw new \InvalidArgumentException('invalid length for $preference_criteria when calling InternationalFormsProduct., must be smaller than or equal to 1.');
        }
        if ((mb_strlen($preference_criteria) < 1)) {
            throw new \InvalidArgumentException('invalid length for $preference_criteria when calling InternationalFormsProduct., must be bigger than or equal to 1.');
        }

        $this->container['preference_criteria'] = $preference_criteria;

        return $this;
    }

    /**
     * Gets producer_info
     *
     * @return string|null
     */
    public function getProducerInfo()
    {
        return $this->container['producer_info'];
    }

    /**
     * Sets producer_info
     *
     * @param string|null $producer_info Indicate the following:  Yes - If shipper is the producer of the good. If not, state 02, 03, and 04 depending on whether this certificate was based upon:   No [1] - Knowledge of whether the good qualifies as an originating good.  No [2] - Reliance on the producers written representation (other than a Certificate of Origin) that the good qualifies as an originating good.  No [3] - A completed and signed Certificate for the good voluntarily provided to the exporter by the producer.  Applicable for NAFTA CO and is required. Valid values: Yes, No [1], No [2], and No [3].
     *
     * @return self
     */
    public function setProducerInfo($producer_info)
    {
        if (is_null($producer_info)) {
            throw new \InvalidArgumentException('non-nullable producer_info cannot be null');
        }
        if ((mb_strlen($producer_info) > 5)) {
            throw new \InvalidArgumentException('invalid length for $producer_info when calling InternationalFormsProduct., must be smaller than or equal to 5.');
        }
        if ((mb_strlen($producer_info) < 3)) {
            throw new \InvalidArgumentException('invalid length for $producer_info when calling InternationalFormsProduct., must be bigger than or equal to 3.');
        }

        $this->container['producer_info'] = $producer_info;

        return $this;
    }

    /**
     * Gets marks_and_numbers
     *
     * @return string|null
     */
    public function getMarksAndNumbers()
    {
        return $this->container['marks_and_numbers'];
    }

    /**
     * Sets marks_and_numbers
     *
     * @param string|null $marks_and_numbers Any special marks, codes, and numbers that may appear on package.  Applies to CO Only.
     *
     * @return self
     */
    public function setMarksAndNumbers($marks_and_numbers)
    {
        if (is_null($marks_and_numbers)) {
            throw new \InvalidArgumentException('non-nullable marks_and_numbers cannot be null');
        }
        if ((mb_strlen($marks_and_numbers) > 35)) {
            throw new \InvalidArgumentException('invalid length for $marks_and_numbers when calling InternationalFormsProduct., must be smaller than or equal to 35.');
        }
        if ((mb_strlen($marks_and_numbers) < 1)) {
            throw new \InvalidArgumentException('invalid length for $marks_and_numbers when calling InternationalFormsProduct., must be bigger than or equal to 1.');
        }

        $this->container['marks_and_numbers'] = $marks_and_numbers;

        return $this;
    }

    /**
     * Gets number_of_packages_per_commodity
     *
     * @return string|null
     */
    public function getNumberOfPackagesPerCommodity()
    {
        return $this->container['number_of_packages_per_commodity'];
    }

    /**
     * Sets number_of_packages_per_commodity
     *
     * @param string|null $number_of_packages_per_commodity The total number of packages, cartons, or containers for the commodity.  Applicable for CO and is required. Should be numeric. Valid characters are 0 -9.
     *
     * @return self
     */
    public function setNumberOfPackagesPerCommodity($number_of_packages_per_commodity)
    {
        if (is_null($number_of_packages_per_commodity)) {
            throw new \InvalidArgumentException('non-nullable number_of_packages_per_commodity cannot be null');
        }
        if ((mb_strlen($number_of_packages_per_commodity) > 3)) {
            throw new \InvalidArgumentException('invalid length for $number_of_packages_per_commodity when calling InternationalFormsProduct., must be smaller than or equal to 3.');
        }
        if ((mb_strlen($number_of_packages_per_commodity) < 1)) {
            throw new \InvalidArgumentException('invalid length for $number_of_packages_per_commodity when calling InternationalFormsProduct., must be bigger than or equal to 1.');
        }

        $this->container['number_of_packages_per_commodity'] = $number_of_packages_per_commodity;

        return $this;
    }

    /**
     * Gets product_weight
     *
     * @return \AntibodiesOnline\UpsApi\Shipping\Model\ProductProductWeight|null
     */
    public function getProductWeight()
    {
        return $this->container['product_weight'];
    }

    /**
     * Sets product_weight
     *
     * @param \AntibodiesOnline\UpsApi\Shipping\Model\ProductProductWeight|null $product_weight product_weight
     *
     * @return self
     */
    public function setProductWeight($product_weight)
    {
        if (is_null($product_weight)) {
            throw new \InvalidArgumentException('non-nullable product_weight cannot be null');
        }
        $this->container['product_weight'] = $product_weight;

        return $this;
    }

    /**
     * Gets vehicle_id
     *
     * @return string|null
     */
    public function getVehicleId()
    {
        return $this->container['vehicle_id'];
    }

    /**
     * Sets vehicle_id
     *
     * @param string|null $vehicle_id Includes the following information for used self-propelled vehicles as defined in Customs regulations 19 CFR 192.1: The unique Vehicle Identification Number (VIN) in the proper format. Or The Product Identification Number (PIN) for those used self-propelled vehicles for which there are no VINs.  Or the Vehicle Title Number.  Applies to EEI forms only.
     *
     * @return self
     */
    public function setVehicleId($vehicle_id)
    {
        if (is_null($vehicle_id)) {
            throw new \InvalidArgumentException('non-nullable vehicle_id cannot be null');
        }
        if ((mb_strlen($vehicle_id) > 25)) {
            throw new \InvalidArgumentException('invalid length for $vehicle_id when calling InternationalFormsProduct., must be smaller than or equal to 25.');
        }
        if ((mb_strlen($vehicle_id) < 1)) {
            throw new \InvalidArgumentException('invalid length for $vehicle_id when calling InternationalFormsProduct., must be bigger than or equal to 1.');
        }

        $this->container['vehicle_id'] = $vehicle_id;

        return $this;
    }

    /**
     * Gets schedule_b
     *
     * @return \AntibodiesOnline\UpsApi\Shipping\Model\ProductScheduleB|null
     */
    public function getScheduleB()
    {
        return $this->container['schedule_b'];
    }

    /**
     * Sets schedule_b
     *
     * @param \AntibodiesOnline\UpsApi\Shipping\Model\ProductScheduleB|null $schedule_b schedule_b
     *
     * @return self
     */
    public function setScheduleB($schedule_b)
    {
        if (is_null($schedule_b)) {
            throw new \InvalidArgumentException('non-nullable schedule_b cannot be null');
        }
        $this->container['schedule_b'] = $schedule_b;

        return $this;
    }

    /**
     * Gets export_type
     *
     * @return string|null
     */
    public function getExportType()
    {
        return $this->container['export_type'];
    }

    /**
     * Sets export_type
     *
     * @param string|null $export_type Code indicating Domestic: Exports that have been produced, manufactured, or grown in the United States or Puerto Rico. This includes imported merchandise which has been enhanced in value or changed from the form in which imported by further manufacture or processing in the United States or Puerto Rico. Foreign: Merchandise that has entered the United States and is being exported again in the same condition as when imported.   Applies to EEI forms only. Required for EEI form.  Valid values:  D: Domestic; F: Foreign.
     *
     * @return self
     */
    public function setExportType($export_type)
    {
        if (is_null($export_type)) {
            throw new \InvalidArgumentException('non-nullable export_type cannot be null');
        }
        if ((mb_strlen($export_type) > 1)) {
            throw new \InvalidArgumentException('invalid length for $export_type when calling InternationalFormsProduct., must be smaller than or equal to 1.');
        }
        if ((mb_strlen($export_type) < 1)) {
            throw new \InvalidArgumentException('invalid length for $export_type when calling InternationalFormsProduct., must be bigger than or equal to 1.');
        }

        $this->container['export_type'] = $export_type;

        return $this;
    }

    /**
     * Gets sed_total_value
     *
     * @return string|null
     */
    public function getSedTotalValue()
    {
        return $this->container['sed_total_value'];
    }

    /**
     * Sets sed_total_value
     *
     * @param string|null $sed_total_value This amount will always be USD.  Applies to EEI forms only. Required for EEI form. Valid characters are 0-9 and \".\". (Decimal point). Limit to 2 digit after the decimal. The maximum length of the field is 15 including \".\" and can hold up to 2 decimal places.  Note: This value is calculated based on the Product/Unit/Value and /Product/Unit/Number (Number of Units * Price per Unit). If the total value is incorrect it will be replaced by the actual calculated total value.
     *
     * @return self
     */
    public function setSedTotalValue($sed_total_value)
    {
        if (is_null($sed_total_value)) {
            throw new \InvalidArgumentException('non-nullable sed_total_value cannot be null');
        }
        if ((mb_strlen($sed_total_value) > 15)) {
            throw new \InvalidArgumentException('invalid length for $sed_total_value when calling InternationalFormsProduct., must be smaller than or equal to 15.');
        }
        if ((mb_strlen($sed_total_value) < 1)) {
            throw new \InvalidArgumentException('invalid length for $sed_total_value when calling InternationalFormsProduct., must be bigger than or equal to 1.');
        }

        $this->container['sed_total_value'] = $sed_total_value;

        return $this;
    }

    /**
     * Gets exclude_from_form
     *
     * @return \AntibodiesOnline\UpsApi\Shipping\Model\ProductExcludeFromForm|null
     */
    public function getExcludeFromForm()
    {
        return $this->container['exclude_from_form'];
    }

    /**
     * Sets exclude_from_form
     *
     * @param \AntibodiesOnline\UpsApi\Shipping\Model\ProductExcludeFromForm|null $exclude_from_form exclude_from_form
     *
     * @return self
     */
    public function setExcludeFromForm($exclude_from_form)
    {
        if (is_null($exclude_from_form)) {
            throw new \InvalidArgumentException('non-nullable exclude_from_form cannot be null');
        }
        $this->container['exclude_from_form'] = $exclude_from_form;

        return $this;
    }

    /**
     * Gets packing_list_info
     *
     * @return \AntibodiesOnline\UpsApi\Shipping\Model\ProductPackingListInfo|null
     */
    public function getPackingListInfo()
    {
        return $this->container['packing_list_info'];
    }

    /**
     * Sets packing_list_info
     *
     * @param \AntibodiesOnline\UpsApi\Shipping\Model\ProductPackingListInfo|null $packing_list_info packing_list_info
     *
     * @return self
     */
    public function setPackingListInfo($packing_list_info)
    {
        if (is_null($packing_list_info)) {
            throw new \InvalidArgumentException('non-nullable packing_list_info cannot be null');
        }
        $this->container['packing_list_info'] = $packing_list_info;

        return $this;
    }

    /**
     * Gets eei_information
     *
     * @return \AntibodiesOnline\UpsApi\Shipping\Model\ProductEEIInformation|null
     */
    public function getEeiInformation()
    {
        return $this->container['eei_information'];
    }

    /**
     * Sets eei_information
     *
     * @param \AntibodiesOnline\UpsApi\Shipping\Model\ProductEEIInformation|null $eei_information eei_information
     *
     * @return self
     */
    public function setEeiInformation($eei_information)
    {
        if (is_null($eei_information)) {
            throw new \InvalidArgumentException('non-nullable eei_information cannot be null');
        }
        $this->container['eei_information'] = $eei_information;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


