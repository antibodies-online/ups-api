<?php
/**
 * ShipmentServiceOptionsInternationalForms
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  AntibodiesOnline\UpsApi\Shipping
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Ship
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace AntibodiesOnline\UpsApi\Shipping\Model;

use \ArrayAccess;
use \AntibodiesOnline\UpsApi\Shipping\ObjectSerializer;

/**
 * ShipmentServiceOptionsInternationalForms Class Doc Comment
 *
 * @category Class
 * @description International Forms information.
 * @package  AntibodiesOnline\UpsApi\Shipping
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ShipmentServiceOptionsInternationalForms implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ShipmentServiceOptions_InternationalForms';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'form_type' => 'string[]',
        'user_created_form' => '\AntibodiesOnline\UpsApi\Shipping\Model\InternationalFormsUserCreatedForm',
        'ups_premium_care_form' => '\AntibodiesOnline\UpsApi\Shipping\Model\InternationalFormsUPSPremiumCareForm',
        'cn22_form' => '\AntibodiesOnline\UpsApi\Shipping\Model\InternationalFormsCN22Form',
        'additional_document_indicator' => 'string',
        'form_group_id_name' => 'string',
        'eei_filing_option' => '\AntibodiesOnline\UpsApi\Shipping\Model\InternationalFormsEEIFilingOption',
        'contacts' => '\AntibodiesOnline\UpsApi\Shipping\Model\InternationalFormsContacts',
        'product' => '\AntibodiesOnline\UpsApi\Shipping\Model\InternationalFormsProduct[]',
        'invoice_number' => 'string',
        'invoice_date' => 'string',
        'purchase_order_number' => 'string',
        'terms_of_shipment' => 'string',
        'reason_for_export' => 'string',
        'comments' => 'string',
        'declaration_statement' => 'string',
        'discount' => '\AntibodiesOnline\UpsApi\Shipping\Model\InternationalFormsDiscount',
        'freight_charges' => '\AntibodiesOnline\UpsApi\Shipping\Model\InternationalFormsFreightCharges',
        'insurance_charges' => '\AntibodiesOnline\UpsApi\Shipping\Model\InternationalFormsInsuranceCharges',
        'other_charges' => '\AntibodiesOnline\UpsApi\Shipping\Model\InternationalFormsOtherCharges',
        'currency_code' => 'string',
        'blanket_period' => '\AntibodiesOnline\UpsApi\Shipping\Model\InternationalFormsBlanketPeriod',
        'export_date' => 'string',
        'exporting_carrier' => 'string',
        'carrier_id' => 'string',
        'in_bond_code' => 'string',
        'entry_number' => 'string',
        'point_of_origin' => 'string',
        'point_of_origin_type' => 'string',
        'mode_of_transport' => 'string',
        'port_of_export' => 'string',
        'port_of_unloading' => 'string',
        'loading_pier' => 'string',
        'parties_to_transaction' => 'string',
        'routed_export_transaction_indicator' => 'string',
        'containerized_indicator' => 'string',
        'override_paperless_indicator' => 'string',
        'shipper_memo' => 'string',
        'hazardous_materials_indicator' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'form_type' => null,
        'user_created_form' => null,
        'ups_premium_care_form' => null,
        'cn22_form' => null,
        'additional_document_indicator' => null,
        'form_group_id_name' => null,
        'eei_filing_option' => null,
        'contacts' => null,
        'product' => null,
        'invoice_number' => null,
        'invoice_date' => null,
        'purchase_order_number' => null,
        'terms_of_shipment' => null,
        'reason_for_export' => null,
        'comments' => null,
        'declaration_statement' => null,
        'discount' => null,
        'freight_charges' => null,
        'insurance_charges' => null,
        'other_charges' => null,
        'currency_code' => null,
        'blanket_period' => null,
        'export_date' => null,
        'exporting_carrier' => null,
        'carrier_id' => null,
        'in_bond_code' => null,
        'entry_number' => null,
        'point_of_origin' => null,
        'point_of_origin_type' => null,
        'mode_of_transport' => null,
        'port_of_export' => null,
        'port_of_unloading' => null,
        'loading_pier' => null,
        'parties_to_transaction' => null,
        'routed_export_transaction_indicator' => null,
        'containerized_indicator' => null,
        'override_paperless_indicator' => null,
        'shipper_memo' => null,
        'hazardous_materials_indicator' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'form_type' => false,
		'user_created_form' => false,
		'ups_premium_care_form' => false,
		'cn22_form' => false,
		'additional_document_indicator' => false,
		'form_group_id_name' => false,
		'eei_filing_option' => false,
		'contacts' => false,
		'product' => false,
		'invoice_number' => false,
		'invoice_date' => false,
		'purchase_order_number' => false,
		'terms_of_shipment' => false,
		'reason_for_export' => false,
		'comments' => false,
		'declaration_statement' => false,
		'discount' => false,
		'freight_charges' => false,
		'insurance_charges' => false,
		'other_charges' => false,
		'currency_code' => false,
		'blanket_period' => false,
		'export_date' => false,
		'exporting_carrier' => false,
		'carrier_id' => false,
		'in_bond_code' => false,
		'entry_number' => false,
		'point_of_origin' => false,
		'point_of_origin_type' => false,
		'mode_of_transport' => false,
		'port_of_export' => false,
		'port_of_unloading' => false,
		'loading_pier' => false,
		'parties_to_transaction' => false,
		'routed_export_transaction_indicator' => false,
		'containerized_indicator' => false,
		'override_paperless_indicator' => false,
		'shipper_memo' => false,
		'hazardous_materials_indicator' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'form_type' => 'FormType',
        'user_created_form' => 'UserCreatedForm',
        'ups_premium_care_form' => 'UPSPremiumCareForm',
        'cn22_form' => 'CN22Form',
        'additional_document_indicator' => 'AdditionalDocumentIndicator',
        'form_group_id_name' => 'FormGroupIdName',
        'eei_filing_option' => 'EEIFilingOption',
        'contacts' => 'Contacts',
        'product' => 'Product',
        'invoice_number' => 'InvoiceNumber',
        'invoice_date' => 'InvoiceDate',
        'purchase_order_number' => 'PurchaseOrderNumber',
        'terms_of_shipment' => 'TermsOfShipment',
        'reason_for_export' => 'ReasonForExport',
        'comments' => 'Comments',
        'declaration_statement' => 'DeclarationStatement',
        'discount' => 'Discount',
        'freight_charges' => 'FreightCharges',
        'insurance_charges' => 'InsuranceCharges',
        'other_charges' => 'OtherCharges',
        'currency_code' => 'CurrencyCode',
        'blanket_period' => 'BlanketPeriod',
        'export_date' => 'ExportDate',
        'exporting_carrier' => 'ExportingCarrier',
        'carrier_id' => 'CarrierID',
        'in_bond_code' => 'InBondCode',
        'entry_number' => 'EntryNumber',
        'point_of_origin' => 'PointOfOrigin',
        'point_of_origin_type' => 'PointOfOriginType',
        'mode_of_transport' => 'ModeOfTransport',
        'port_of_export' => 'PortOfExport',
        'port_of_unloading' => 'PortOfUnloading',
        'loading_pier' => 'LoadingPier',
        'parties_to_transaction' => 'PartiesToTransaction',
        'routed_export_transaction_indicator' => 'RoutedExportTransactionIndicator',
        'containerized_indicator' => 'ContainerizedIndicator',
        'override_paperless_indicator' => 'OverridePaperlessIndicator',
        'shipper_memo' => 'ShipperMemo',
        'hazardous_materials_indicator' => 'HazardousMaterialsIndicator'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'form_type' => 'setFormType',
        'user_created_form' => 'setUserCreatedForm',
        'ups_premium_care_form' => 'setUpsPremiumCareForm',
        'cn22_form' => 'setCn22Form',
        'additional_document_indicator' => 'setAdditionalDocumentIndicator',
        'form_group_id_name' => 'setFormGroupIdName',
        'eei_filing_option' => 'setEeiFilingOption',
        'contacts' => 'setContacts',
        'product' => 'setProduct',
        'invoice_number' => 'setInvoiceNumber',
        'invoice_date' => 'setInvoiceDate',
        'purchase_order_number' => 'setPurchaseOrderNumber',
        'terms_of_shipment' => 'setTermsOfShipment',
        'reason_for_export' => 'setReasonForExport',
        'comments' => 'setComments',
        'declaration_statement' => 'setDeclarationStatement',
        'discount' => 'setDiscount',
        'freight_charges' => 'setFreightCharges',
        'insurance_charges' => 'setInsuranceCharges',
        'other_charges' => 'setOtherCharges',
        'currency_code' => 'setCurrencyCode',
        'blanket_period' => 'setBlanketPeriod',
        'export_date' => 'setExportDate',
        'exporting_carrier' => 'setExportingCarrier',
        'carrier_id' => 'setCarrierId',
        'in_bond_code' => 'setInBondCode',
        'entry_number' => 'setEntryNumber',
        'point_of_origin' => 'setPointOfOrigin',
        'point_of_origin_type' => 'setPointOfOriginType',
        'mode_of_transport' => 'setModeOfTransport',
        'port_of_export' => 'setPortOfExport',
        'port_of_unloading' => 'setPortOfUnloading',
        'loading_pier' => 'setLoadingPier',
        'parties_to_transaction' => 'setPartiesToTransaction',
        'routed_export_transaction_indicator' => 'setRoutedExportTransactionIndicator',
        'containerized_indicator' => 'setContainerizedIndicator',
        'override_paperless_indicator' => 'setOverridePaperlessIndicator',
        'shipper_memo' => 'setShipperMemo',
        'hazardous_materials_indicator' => 'setHazardousMaterialsIndicator'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'form_type' => 'getFormType',
        'user_created_form' => 'getUserCreatedForm',
        'ups_premium_care_form' => 'getUpsPremiumCareForm',
        'cn22_form' => 'getCn22Form',
        'additional_document_indicator' => 'getAdditionalDocumentIndicator',
        'form_group_id_name' => 'getFormGroupIdName',
        'eei_filing_option' => 'getEeiFilingOption',
        'contacts' => 'getContacts',
        'product' => 'getProduct',
        'invoice_number' => 'getInvoiceNumber',
        'invoice_date' => 'getInvoiceDate',
        'purchase_order_number' => 'getPurchaseOrderNumber',
        'terms_of_shipment' => 'getTermsOfShipment',
        'reason_for_export' => 'getReasonForExport',
        'comments' => 'getComments',
        'declaration_statement' => 'getDeclarationStatement',
        'discount' => 'getDiscount',
        'freight_charges' => 'getFreightCharges',
        'insurance_charges' => 'getInsuranceCharges',
        'other_charges' => 'getOtherCharges',
        'currency_code' => 'getCurrencyCode',
        'blanket_period' => 'getBlanketPeriod',
        'export_date' => 'getExportDate',
        'exporting_carrier' => 'getExportingCarrier',
        'carrier_id' => 'getCarrierId',
        'in_bond_code' => 'getInBondCode',
        'entry_number' => 'getEntryNumber',
        'point_of_origin' => 'getPointOfOrigin',
        'point_of_origin_type' => 'getPointOfOriginType',
        'mode_of_transport' => 'getModeOfTransport',
        'port_of_export' => 'getPortOfExport',
        'port_of_unloading' => 'getPortOfUnloading',
        'loading_pier' => 'getLoadingPier',
        'parties_to_transaction' => 'getPartiesToTransaction',
        'routed_export_transaction_indicator' => 'getRoutedExportTransactionIndicator',
        'containerized_indicator' => 'getContainerizedIndicator',
        'override_paperless_indicator' => 'getOverridePaperlessIndicator',
        'shipper_memo' => 'getShipperMemo',
        'hazardous_materials_indicator' => 'getHazardousMaterialsIndicator'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('form_type', $data ?? [], null);
        $this->setIfExists('user_created_form', $data ?? [], null);
        $this->setIfExists('ups_premium_care_form', $data ?? [], null);
        $this->setIfExists('cn22_form', $data ?? [], null);
        $this->setIfExists('additional_document_indicator', $data ?? [], null);
        $this->setIfExists('form_group_id_name', $data ?? [], null);
        $this->setIfExists('eei_filing_option', $data ?? [], null);
        $this->setIfExists('contacts', $data ?? [], null);
        $this->setIfExists('product', $data ?? [], null);
        $this->setIfExists('invoice_number', $data ?? [], null);
        $this->setIfExists('invoice_date', $data ?? [], null);
        $this->setIfExists('purchase_order_number', $data ?? [], null);
        $this->setIfExists('terms_of_shipment', $data ?? [], null);
        $this->setIfExists('reason_for_export', $data ?? [], null);
        $this->setIfExists('comments', $data ?? [], null);
        $this->setIfExists('declaration_statement', $data ?? [], null);
        $this->setIfExists('discount', $data ?? [], null);
        $this->setIfExists('freight_charges', $data ?? [], null);
        $this->setIfExists('insurance_charges', $data ?? [], null);
        $this->setIfExists('other_charges', $data ?? [], null);
        $this->setIfExists('currency_code', $data ?? [], null);
        $this->setIfExists('blanket_period', $data ?? [], null);
        $this->setIfExists('export_date', $data ?? [], null);
        $this->setIfExists('exporting_carrier', $data ?? [], null);
        $this->setIfExists('carrier_id', $data ?? [], null);
        $this->setIfExists('in_bond_code', $data ?? [], null);
        $this->setIfExists('entry_number', $data ?? [], null);
        $this->setIfExists('point_of_origin', $data ?? [], null);
        $this->setIfExists('point_of_origin_type', $data ?? [], null);
        $this->setIfExists('mode_of_transport', $data ?? [], null);
        $this->setIfExists('port_of_export', $data ?? [], null);
        $this->setIfExists('port_of_unloading', $data ?? [], null);
        $this->setIfExists('loading_pier', $data ?? [], null);
        $this->setIfExists('parties_to_transaction', $data ?? [], null);
        $this->setIfExists('routed_export_transaction_indicator', $data ?? [], null);
        $this->setIfExists('containerized_indicator', $data ?? [], null);
        $this->setIfExists('override_paperless_indicator', $data ?? [], null);
        $this->setIfExists('shipper_memo', $data ?? [], null);
        $this->setIfExists('hazardous_materials_indicator', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['form_type'] === null) {
            $invalidProperties[] = "'form_type' can't be null";
        }
        if (!is_null($this->container['form_group_id_name']) && (mb_strlen($this->container['form_group_id_name']) > 50)) {
            $invalidProperties[] = "invalid value for 'form_group_id_name', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['form_group_id_name']) && (mb_strlen($this->container['form_group_id_name']) < 1)) {
            $invalidProperties[] = "invalid value for 'form_group_id_name', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['product'] === null) {
            $invalidProperties[] = "'product' can't be null";
        }
        if (!is_null($this->container['invoice_number']) && (mb_strlen($this->container['invoice_number']) > 35)) {
            $invalidProperties[] = "invalid value for 'invoice_number', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['invoice_number']) && (mb_strlen($this->container['invoice_number']) < 1)) {
            $invalidProperties[] = "invalid value for 'invoice_number', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['invoice_date']) && (mb_strlen($this->container['invoice_date']) > 8)) {
            $invalidProperties[] = "invalid value for 'invoice_date', the character length must be smaller than or equal to 8.";
        }

        if (!is_null($this->container['invoice_date']) && (mb_strlen($this->container['invoice_date']) < 8)) {
            $invalidProperties[] = "invalid value for 'invoice_date', the character length must be bigger than or equal to 8.";
        }

        if (!is_null($this->container['purchase_order_number']) && (mb_strlen($this->container['purchase_order_number']) > 35)) {
            $invalidProperties[] = "invalid value for 'purchase_order_number', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['purchase_order_number']) && (mb_strlen($this->container['purchase_order_number']) < 1)) {
            $invalidProperties[] = "invalid value for 'purchase_order_number', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['terms_of_shipment']) && (mb_strlen($this->container['terms_of_shipment']) > 3)) {
            $invalidProperties[] = "invalid value for 'terms_of_shipment', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['terms_of_shipment']) && (mb_strlen($this->container['terms_of_shipment']) < 3)) {
            $invalidProperties[] = "invalid value for 'terms_of_shipment', the character length must be bigger than or equal to 3.";
        }

        if (!is_null($this->container['reason_for_export']) && (mb_strlen($this->container['reason_for_export']) > 20)) {
            $invalidProperties[] = "invalid value for 'reason_for_export', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['reason_for_export']) && (mb_strlen($this->container['reason_for_export']) < 1)) {
            $invalidProperties[] = "invalid value for 'reason_for_export', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['comments']) && (mb_strlen($this->container['comments']) > 150)) {
            $invalidProperties[] = "invalid value for 'comments', the character length must be smaller than or equal to 150.";
        }

        if (!is_null($this->container['comments']) && (mb_strlen($this->container['comments']) < 1)) {
            $invalidProperties[] = "invalid value for 'comments', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['declaration_statement']) && (mb_strlen($this->container['declaration_statement']) > 550)) {
            $invalidProperties[] = "invalid value for 'declaration_statement', the character length must be smaller than or equal to 550.";
        }

        if (!is_null($this->container['declaration_statement']) && (mb_strlen($this->container['declaration_statement']) < 1)) {
            $invalidProperties[] = "invalid value for 'declaration_statement', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['currency_code']) && (mb_strlen($this->container['currency_code']) > 3)) {
            $invalidProperties[] = "invalid value for 'currency_code', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['currency_code']) && (mb_strlen($this->container['currency_code']) < 3)) {
            $invalidProperties[] = "invalid value for 'currency_code', the character length must be bigger than or equal to 3.";
        }

        if (!is_null($this->container['export_date']) && (mb_strlen($this->container['export_date']) > 35)) {
            $invalidProperties[] = "invalid value for 'export_date', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['export_date']) && (mb_strlen($this->container['export_date']) < 1)) {
            $invalidProperties[] = "invalid value for 'export_date', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['exporting_carrier']) && (mb_strlen($this->container['exporting_carrier']) > 35)) {
            $invalidProperties[] = "invalid value for 'exporting_carrier', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['exporting_carrier']) && (mb_strlen($this->container['exporting_carrier']) < 1)) {
            $invalidProperties[] = "invalid value for 'exporting_carrier', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['carrier_id']) && (mb_strlen($this->container['carrier_id']) > 17)) {
            $invalidProperties[] = "invalid value for 'carrier_id', the character length must be smaller than or equal to 17.";
        }

        if (!is_null($this->container['carrier_id']) && (mb_strlen($this->container['carrier_id']) < 1)) {
            $invalidProperties[] = "invalid value for 'carrier_id', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['in_bond_code']) && (mb_strlen($this->container['in_bond_code']) > 2)) {
            $invalidProperties[] = "invalid value for 'in_bond_code', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['in_bond_code']) && (mb_strlen($this->container['in_bond_code']) < 2)) {
            $invalidProperties[] = "invalid value for 'in_bond_code', the character length must be bigger than or equal to 2.";
        }

        if (!is_null($this->container['entry_number']) && (mb_strlen($this->container['entry_number']) > 25)) {
            $invalidProperties[] = "invalid value for 'entry_number', the character length must be smaller than or equal to 25.";
        }

        if (!is_null($this->container['entry_number']) && (mb_strlen($this->container['entry_number']) < 1)) {
            $invalidProperties[] = "invalid value for 'entry_number', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['point_of_origin']) && (mb_strlen($this->container['point_of_origin']) > 5)) {
            $invalidProperties[] = "invalid value for 'point_of_origin', the character length must be smaller than or equal to 5.";
        }

        if (!is_null($this->container['point_of_origin']) && (mb_strlen($this->container['point_of_origin']) < 1)) {
            $invalidProperties[] = "invalid value for 'point_of_origin', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['point_of_origin_type']) && (mb_strlen($this->container['point_of_origin_type']) > 1)) {
            $invalidProperties[] = "invalid value for 'point_of_origin_type', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['point_of_origin_type']) && (mb_strlen($this->container['point_of_origin_type']) < 1)) {
            $invalidProperties[] = "invalid value for 'point_of_origin_type', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['mode_of_transport']) && (mb_strlen($this->container['mode_of_transport']) > 35)) {
            $invalidProperties[] = "invalid value for 'mode_of_transport', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['mode_of_transport']) && (mb_strlen($this->container['mode_of_transport']) < 1)) {
            $invalidProperties[] = "invalid value for 'mode_of_transport', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['port_of_export']) && (mb_strlen($this->container['port_of_export']) > 35)) {
            $invalidProperties[] = "invalid value for 'port_of_export', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['port_of_export']) && (mb_strlen($this->container['port_of_export']) < 1)) {
            $invalidProperties[] = "invalid value for 'port_of_export', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['port_of_unloading']) && (mb_strlen($this->container['port_of_unloading']) > 35)) {
            $invalidProperties[] = "invalid value for 'port_of_unloading', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['port_of_unloading']) && (mb_strlen($this->container['port_of_unloading']) < 1)) {
            $invalidProperties[] = "invalid value for 'port_of_unloading', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['loading_pier']) && (mb_strlen($this->container['loading_pier']) > 35)) {
            $invalidProperties[] = "invalid value for 'loading_pier', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['loading_pier']) && (mb_strlen($this->container['loading_pier']) < 1)) {
            $invalidProperties[] = "invalid value for 'loading_pier', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['parties_to_transaction']) && (mb_strlen($this->container['parties_to_transaction']) > 1)) {
            $invalidProperties[] = "invalid value for 'parties_to_transaction', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['parties_to_transaction']) && (mb_strlen($this->container['parties_to_transaction']) < 1)) {
            $invalidProperties[] = "invalid value for 'parties_to_transaction', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['shipper_memo']) && (mb_strlen($this->container['shipper_memo']) > 300)) {
            $invalidProperties[] = "invalid value for 'shipper_memo', the character length must be smaller than or equal to 300.";
        }

        if (!is_null($this->container['shipper_memo']) && (mb_strlen($this->container['shipper_memo']) < 1)) {
            $invalidProperties[] = "invalid value for 'shipper_memo', the character length must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets form_type
     *
     * @return string[]
     */
    public function getFormType()
    {
        return $this->container['form_type'];
    }

    /**
     * Sets form_type
     *
     * @param string[] $form_type Indicates the name of the International Form requested. Valid values:   01 - Invoice 03 - CO 04 - NAFTA CO 05 - Partial Invoice 06 - Packinglist 07 - Customer Generated Forms 08 - Air Freight Packing List 09 - CN22 Form 10 - UPS Premium Care Form 11 - EEI For shipment with return service, 01, 05 or 10 are the only valid values.  Note: 01 and 05 are mutually exclusive and 05 are only valid for return shipments only.
     *
     * @return self
     */
    public function setFormType($form_type)
    {
        if (is_null($form_type)) {
            throw new \InvalidArgumentException('non-nullable form_type cannot be null');
        }


        $this->container['form_type'] = $form_type;

        return $this;
    }

    /**
     * Gets user_created_form
     *
     * @return \AntibodiesOnline\UpsApi\Shipping\Model\InternationalFormsUserCreatedForm|null
     */
    public function getUserCreatedForm()
    {
        return $this->container['user_created_form'];
    }

    /**
     * Sets user_created_form
     *
     * @param \AntibodiesOnline\UpsApi\Shipping\Model\InternationalFormsUserCreatedForm|null $user_created_form user_created_form
     *
     * @return self
     */
    public function setUserCreatedForm($user_created_form)
    {
        if (is_null($user_created_form)) {
            throw new \InvalidArgumentException('non-nullable user_created_form cannot be null');
        }
        $this->container['user_created_form'] = $user_created_form;

        return $this;
    }

    /**
     * Gets ups_premium_care_form
     *
     * @return \AntibodiesOnline\UpsApi\Shipping\Model\InternationalFormsUPSPremiumCareForm|null
     */
    public function getUpsPremiumCareForm()
    {
        return $this->container['ups_premium_care_form'];
    }

    /**
     * Sets ups_premium_care_form
     *
     * @param \AntibodiesOnline\UpsApi\Shipping\Model\InternationalFormsUPSPremiumCareForm|null $ups_premium_care_form ups_premium_care_form
     *
     * @return self
     */
    public function setUpsPremiumCareForm($ups_premium_care_form)
    {
        if (is_null($ups_premium_care_form)) {
            throw new \InvalidArgumentException('non-nullable ups_premium_care_form cannot be null');
        }
        $this->container['ups_premium_care_form'] = $ups_premium_care_form;

        return $this;
    }

    /**
     * Gets cn22_form
     *
     * @return \AntibodiesOnline\UpsApi\Shipping\Model\InternationalFormsCN22Form|null
     */
    public function getCn22Form()
    {
        return $this->container['cn22_form'];
    }

    /**
     * Sets cn22_form
     *
     * @param \AntibodiesOnline\UpsApi\Shipping\Model\InternationalFormsCN22Form|null $cn22_form cn22_form
     *
     * @return self
     */
    public function setCn22Form($cn22_form)
    {
        if (is_null($cn22_form)) {
            throw new \InvalidArgumentException('non-nullable cn22_form cannot be null');
        }
        $this->container['cn22_form'] = $cn22_form;

        return $this;
    }

    /**
     * Gets additional_document_indicator
     *
     * @return string|null
     */
    public function getAdditionalDocumentIndicator()
    {
        return $this->container['additional_document_indicator'];
    }

    /**
     * Sets additional_document_indicator
     *
     * @param string|null $additional_document_indicator Presence of the indicator means user will supply additional document, such as EEI, NAFTA_CO or CO.  This indicator should be set when the shipper intends to utilize UPS paperless invoice functionality AND the shipper has SELF-PREPARED other International Forms (EEI, CO, NAFTACO) to accompany the shipment.  It is evaluated only when:  1. Account is paperless enabled.  2. Movement requires an invoice. 3. Destination country or territory accepts paperless invoice.  4. Invoice data is supplied by the client and the data passes validation.
     *
     * @return self
     */
    public function setAdditionalDocumentIndicator($additional_document_indicator)
    {
        if (is_null($additional_document_indicator)) {
            throw new \InvalidArgumentException('non-nullable additional_document_indicator cannot be null');
        }


        $this->container['additional_document_indicator'] = $additional_document_indicator;

        return $this;
    }

    /**
     * Gets form_group_id_name
     *
     * @return string|null
     */
    public function getFormGroupIdName()
    {
        return $this->container['form_group_id_name'];
    }

    /**
     * Sets form_group_id_name
     *
     * @param string|null $form_group_id_name Contains description text which identifies the group of International forms. This element does not appear on the forms.
     *
     * @return self
     */
    public function setFormGroupIdName($form_group_id_name)
    {
        if (is_null($form_group_id_name)) {
            throw new \InvalidArgumentException('non-nullable form_group_id_name cannot be null');
        }
        if ((mb_strlen($form_group_id_name) > 50)) {
            throw new \InvalidArgumentException('invalid length for $form_group_id_name when calling ShipmentServiceOptionsInternationalForms., must be smaller than or equal to 50.');
        }
        if ((mb_strlen($form_group_id_name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $form_group_id_name when calling ShipmentServiceOptionsInternationalForms., must be bigger than or equal to 1.');
        }

        $this->container['form_group_id_name'] = $form_group_id_name;

        return $this;
    }

    /**
     * Gets eei_filing_option
     *
     * @return \AntibodiesOnline\UpsApi\Shipping\Model\InternationalFormsEEIFilingOption|null
     */
    public function getEeiFilingOption()
    {
        return $this->container['eei_filing_option'];
    }

    /**
     * Sets eei_filing_option
     *
     * @param \AntibodiesOnline\UpsApi\Shipping\Model\InternationalFormsEEIFilingOption|null $eei_filing_option eei_filing_option
     *
     * @return self
     */
    public function setEeiFilingOption($eei_filing_option)
    {
        if (is_null($eei_filing_option)) {
            throw new \InvalidArgumentException('non-nullable eei_filing_option cannot be null');
        }
        $this->container['eei_filing_option'] = $eei_filing_option;

        return $this;
    }

    /**
     * Gets contacts
     *
     * @return \AntibodiesOnline\UpsApi\Shipping\Model\InternationalFormsContacts|null
     */
    public function getContacts()
    {
        return $this->container['contacts'];
    }

    /**
     * Sets contacts
     *
     * @param \AntibodiesOnline\UpsApi\Shipping\Model\InternationalFormsContacts|null $contacts contacts
     *
     * @return self
     */
    public function setContacts($contacts)
    {
        if (is_null($contacts)) {
            throw new \InvalidArgumentException('non-nullable contacts cannot be null');
        }
        $this->container['contacts'] = $contacts;

        return $this;
    }

    /**
     * Gets product
     *
     * @return \AntibodiesOnline\UpsApi\Shipping\Model\InternationalFormsProduct[]
     */
    public function getProduct()
    {
        return $this->container['product'];
    }

    /**
     * Sets product
     *
     * @param \AntibodiesOnline\UpsApi\Shipping\Model\InternationalFormsProduct[] $product product
     *
     * @return self
     */
    public function setProduct($product)
    {
        if (is_null($product)) {
            throw new \InvalidArgumentException('non-nullable product cannot be null');
        }


        $this->container['product'] = $product;

        return $this;
    }

    /**
     * Gets invoice_number
     *
     * @return string|null
     */
    public function getInvoiceNumber()
    {
        return $this->container['invoice_number'];
    }

    /**
     * Sets invoice_number
     *
     * @param string|null $invoice_number Commercial Invoice number assigned by the exporter.  Applies to Invoice and Partial Invoice forms only. Required for Invoice forms and optional for Partial Invoice.
     *
     * @return self
     */
    public function setInvoiceNumber($invoice_number)
    {
        if (is_null($invoice_number)) {
            throw new \InvalidArgumentException('non-nullable invoice_number cannot be null');
        }
        if ((mb_strlen($invoice_number) > 35)) {
            throw new \InvalidArgumentException('invalid length for $invoice_number when calling ShipmentServiceOptionsInternationalForms., must be smaller than or equal to 35.');
        }
        if ((mb_strlen($invoice_number) < 1)) {
            throw new \InvalidArgumentException('invalid length for $invoice_number when calling ShipmentServiceOptionsInternationalForms., must be bigger than or equal to 1.');
        }

        $this->container['invoice_number'] = $invoice_number;

        return $this;
    }

    /**
     * Gets invoice_date
     *
     * @return string|null
     */
    public function getInvoiceDate()
    {
        return $this->container['invoice_date'];
    }

    /**
     * Sets invoice_date
     *
     * @param string|null $invoice_date Date when the Invoice is created. Ideally this is the same as the ship date.  Applies to Invoice and Partial Invoice forms only. Required for Invoice forms and optional for Partial Invoice. Required for Invoice form for forward shipments. For shipment with return service, the user input will be ignored, and the field will be blank on the invoice. Format is yyyyMMdd.
     *
     * @return self
     */
    public function setInvoiceDate($invoice_date)
    {
        if (is_null($invoice_date)) {
            throw new \InvalidArgumentException('non-nullable invoice_date cannot be null');
        }
        if ((mb_strlen($invoice_date) > 8)) {
            throw new \InvalidArgumentException('invalid length for $invoice_date when calling ShipmentServiceOptionsInternationalForms., must be smaller than or equal to 8.');
        }
        if ((mb_strlen($invoice_date) < 8)) {
            throw new \InvalidArgumentException('invalid length for $invoice_date when calling ShipmentServiceOptionsInternationalForms., must be bigger than or equal to 8.');
        }

        $this->container['invoice_date'] = $invoice_date;

        return $this;
    }

    /**
     * Gets purchase_order_number
     *
     * @return string|null
     */
    public function getPurchaseOrderNumber()
    {
        return $this->container['purchase_order_number'];
    }

    /**
     * Sets purchase_order_number
     *
     * @param string|null $purchase_order_number The customer's order reference number.  Applies to Invoice and Partial Invoice forms only.
     *
     * @return self
     */
    public function setPurchaseOrderNumber($purchase_order_number)
    {
        if (is_null($purchase_order_number)) {
            throw new \InvalidArgumentException('non-nullable purchase_order_number cannot be null');
        }
        if ((mb_strlen($purchase_order_number) > 35)) {
            throw new \InvalidArgumentException('invalid length for $purchase_order_number when calling ShipmentServiceOptionsInternationalForms., must be smaller than or equal to 35.');
        }
        if ((mb_strlen($purchase_order_number) < 1)) {
            throw new \InvalidArgumentException('invalid length for $purchase_order_number when calling ShipmentServiceOptionsInternationalForms., must be bigger than or equal to 1.');
        }

        $this->container['purchase_order_number'] = $purchase_order_number;

        return $this;
    }

    /**
     * Gets terms_of_shipment
     *
     * @return string|null
     */
    public function getTermsOfShipment()
    {
        return $this->container['terms_of_shipment'];
    }

    /**
     * Sets terms_of_shipment
     *
     * @param string|null $terms_of_shipment Indicates the rights to the seller from the buyer. Also, it refers to Terms of Sale.  Applies to Invoice and Partial Invoice forms only.   Valid values:  CFR: Cost and Freight  CIF: Cost Insurance and Freight  CIP: Carriage and Insurance Paid  CPT: Carriage Paid To  DAF: Delivered at Frontier  DDP: Delivery Duty Paid  DDU: Delivery Duty Unpaid  DEQ: Delivered Ex Quay  DES: Delivered Ex Ship  EXW: Ex Works  FAS: Free Alongside Ship  FCA: Free Carrier  FOB: Free On Board
     *
     * @return self
     */
    public function setTermsOfShipment($terms_of_shipment)
    {
        if (is_null($terms_of_shipment)) {
            throw new \InvalidArgumentException('non-nullable terms_of_shipment cannot be null');
        }
        if ((mb_strlen($terms_of_shipment) > 3)) {
            throw new \InvalidArgumentException('invalid length for $terms_of_shipment when calling ShipmentServiceOptionsInternationalForms., must be smaller than or equal to 3.');
        }
        if ((mb_strlen($terms_of_shipment) < 3)) {
            throw new \InvalidArgumentException('invalid length for $terms_of_shipment when calling ShipmentServiceOptionsInternationalForms., must be bigger than or equal to 3.');
        }

        $this->container['terms_of_shipment'] = $terms_of_shipment;

        return $this;
    }

    /**
     * Gets reason_for_export
     *
     * @return string|null
     */
    public function getReasonForExport()
    {
        return $this->container['reason_for_export'];
    }

    /**
     * Sets reason_for_export
     *
     * @param string|null $reason_for_export A reason to export the current international shipment. Valid values: SALE, GIFT, SAMPLE, RETURN, REPAIR, INTERCOMPANYDATA, Any other reason.  Applies to Invoice and Partial Invoice forms only. Required for Invoice forms and Optional for Partial Invoice. No validation.
     *
     * @return self
     */
    public function setReasonForExport($reason_for_export)
    {
        if (is_null($reason_for_export)) {
            throw new \InvalidArgumentException('non-nullable reason_for_export cannot be null');
        }
        if ((mb_strlen($reason_for_export) > 20)) {
            throw new \InvalidArgumentException('invalid length for $reason_for_export when calling ShipmentServiceOptionsInternationalForms., must be smaller than or equal to 20.');
        }
        if ((mb_strlen($reason_for_export) < 1)) {
            throw new \InvalidArgumentException('invalid length for $reason_for_export when calling ShipmentServiceOptionsInternationalForms., must be bigger than or equal to 1.');
        }

        $this->container['reason_for_export'] = $reason_for_export;

        return $this;
    }

    /**
     * Gets comments
     *
     * @return string|null
     */
    public function getComments()
    {
        return $this->container['comments'];
    }

    /**
     * Sets comments
     *
     * @param string|null $comments Any extra information about the current shipment.  Applies to Invoice and Partial Invoice forms only.
     *
     * @return self
     */
    public function setComments($comments)
    {
        if (is_null($comments)) {
            throw new \InvalidArgumentException('non-nullable comments cannot be null');
        }
        if ((mb_strlen($comments) > 150)) {
            throw new \InvalidArgumentException('invalid length for $comments when calling ShipmentServiceOptionsInternationalForms., must be smaller than or equal to 150.');
        }
        if ((mb_strlen($comments) < 1)) {
            throw new \InvalidArgumentException('invalid length for $comments when calling ShipmentServiceOptionsInternationalForms., must be bigger than or equal to 1.');
        }

        $this->container['comments'] = $comments;

        return $this;
    }

    /**
     * Gets declaration_statement
     *
     * @return string|null
     */
    public function getDeclarationStatement()
    {
        return $this->container['declaration_statement'];
    }

    /**
     * Sets declaration_statement
     *
     * @param string|null $declaration_statement This is the legal explanation, used by Customs, for the delivering of this shipment. It must be identical to the set of declarations actually used by Customs. Examples of declarations that might be entered in this field are: I hereby certify that the goods covered by this shipment qualify as originating goods for purposes of preferential tariff treatment under the NAFTA. I hereby certify that the information on this invoice is true and correct and the contents and value of this shipment is as stated above.  EEA statement:  The exporter of the products covered by this document declares that except where otherwise clearly indicated these products are of EEA preferential origin.  Applies to Invoice and Partial Invoice forms only. On the invoice for return shipment, the verbiage is as follows (user input is ignored): The exporter of the products covered by this document declares that except where otherwise clearly indicated these products are of EEA preferential origin
     *
     * @return self
     */
    public function setDeclarationStatement($declaration_statement)
    {
        if (is_null($declaration_statement)) {
            throw new \InvalidArgumentException('non-nullable declaration_statement cannot be null');
        }
        if ((mb_strlen($declaration_statement) > 550)) {
            throw new \InvalidArgumentException('invalid length for $declaration_statement when calling ShipmentServiceOptionsInternationalForms., must be smaller than or equal to 550.');
        }
        if ((mb_strlen($declaration_statement) < 1)) {
            throw new \InvalidArgumentException('invalid length for $declaration_statement when calling ShipmentServiceOptionsInternationalForms., must be bigger than or equal to 1.');
        }

        $this->container['declaration_statement'] = $declaration_statement;

        return $this;
    }

    /**
     * Gets discount
     *
     * @return \AntibodiesOnline\UpsApi\Shipping\Model\InternationalFormsDiscount|null
     */
    public function getDiscount()
    {
        return $this->container['discount'];
    }

    /**
     * Sets discount
     *
     * @param \AntibodiesOnline\UpsApi\Shipping\Model\InternationalFormsDiscount|null $discount discount
     *
     * @return self
     */
    public function setDiscount($discount)
    {
        if (is_null($discount)) {
            throw new \InvalidArgumentException('non-nullable discount cannot be null');
        }
        $this->container['discount'] = $discount;

        return $this;
    }

    /**
     * Gets freight_charges
     *
     * @return \AntibodiesOnline\UpsApi\Shipping\Model\InternationalFormsFreightCharges|null
     */
    public function getFreightCharges()
    {
        return $this->container['freight_charges'];
    }

    /**
     * Sets freight_charges
     *
     * @param \AntibodiesOnline\UpsApi\Shipping\Model\InternationalFormsFreightCharges|null $freight_charges freight_charges
     *
     * @return self
     */
    public function setFreightCharges($freight_charges)
    {
        if (is_null($freight_charges)) {
            throw new \InvalidArgumentException('non-nullable freight_charges cannot be null');
        }
        $this->container['freight_charges'] = $freight_charges;

        return $this;
    }

    /**
     * Gets insurance_charges
     *
     * @return \AntibodiesOnline\UpsApi\Shipping\Model\InternationalFormsInsuranceCharges|null
     */
    public function getInsuranceCharges()
    {
        return $this->container['insurance_charges'];
    }

    /**
     * Sets insurance_charges
     *
     * @param \AntibodiesOnline\UpsApi\Shipping\Model\InternationalFormsInsuranceCharges|null $insurance_charges insurance_charges
     *
     * @return self
     */
    public function setInsuranceCharges($insurance_charges)
    {
        if (is_null($insurance_charges)) {
            throw new \InvalidArgumentException('non-nullable insurance_charges cannot be null');
        }
        $this->container['insurance_charges'] = $insurance_charges;

        return $this;
    }

    /**
     * Gets other_charges
     *
     * @return \AntibodiesOnline\UpsApi\Shipping\Model\InternationalFormsOtherCharges|null
     */
    public function getOtherCharges()
    {
        return $this->container['other_charges'];
    }

    /**
     * Sets other_charges
     *
     * @param \AntibodiesOnline\UpsApi\Shipping\Model\InternationalFormsOtherCharges|null $other_charges other_charges
     *
     * @return self
     */
    public function setOtherCharges($other_charges)
    {
        if (is_null($other_charges)) {
            throw new \InvalidArgumentException('non-nullable other_charges cannot be null');
        }
        $this->container['other_charges'] = $other_charges;

        return $this;
    }

    /**
     * Gets currency_code
     *
     * @return string|null
     */
    public function getCurrencyCode()
    {
        return $this->container['currency_code'];
    }

    /**
     * Sets currency_code
     *
     * @param string|null $currency_code Currency code for all the monetary values of the Invoice form.  Applies to Invoice and Partial Invoice forms only.
     *
     * @return self
     */
    public function setCurrencyCode($currency_code)
    {
        if (is_null($currency_code)) {
            throw new \InvalidArgumentException('non-nullable currency_code cannot be null');
        }
        if ((mb_strlen($currency_code) > 3)) {
            throw new \InvalidArgumentException('invalid length for $currency_code when calling ShipmentServiceOptionsInternationalForms., must be smaller than or equal to 3.');
        }
        if ((mb_strlen($currency_code) < 3)) {
            throw new \InvalidArgumentException('invalid length for $currency_code when calling ShipmentServiceOptionsInternationalForms., must be bigger than or equal to 3.');
        }

        $this->container['currency_code'] = $currency_code;

        return $this;
    }

    /**
     * Gets blanket_period
     *
     * @return \AntibodiesOnline\UpsApi\Shipping\Model\InternationalFormsBlanketPeriod|null
     */
    public function getBlanketPeriod()
    {
        return $this->container['blanket_period'];
    }

    /**
     * Sets blanket_period
     *
     * @param \AntibodiesOnline\UpsApi\Shipping\Model\InternationalFormsBlanketPeriod|null $blanket_period blanket_period
     *
     * @return self
     */
    public function setBlanketPeriod($blanket_period)
    {
        if (is_null($blanket_period)) {
            throw new \InvalidArgumentException('non-nullable blanket_period cannot be null');
        }
        $this->container['blanket_period'] = $blanket_period;

        return $this;
    }

    /**
     * Gets export_date
     *
     * @return string|null
     */
    public function getExportDate()
    {
        return $this->container['export_date'];
    }

    /**
     * Sets export_date
     *
     * @param string|null $export_date The date the goods will be exiting the country or territory.  Applies to CO and EEI forms only. Required for CO and EEI forms. Format is yyyyMMdd.
     *
     * @return self
     */
    public function setExportDate($export_date)
    {
        if (is_null($export_date)) {
            throw new \InvalidArgumentException('non-nullable export_date cannot be null');
        }
        if ((mb_strlen($export_date) > 35)) {
            throw new \InvalidArgumentException('invalid length for $export_date when calling ShipmentServiceOptionsInternationalForms., must be smaller than or equal to 35.');
        }
        if ((mb_strlen($export_date) < 1)) {
            throw new \InvalidArgumentException('invalid length for $export_date when calling ShipmentServiceOptionsInternationalForms., must be bigger than or equal to 1.');
        }

        $this->container['export_date'] = $export_date;

        return $this;
    }

    /**
     * Gets exporting_carrier
     *
     * @return string|null
     */
    public function getExportingCarrier()
    {
        return $this->container['exporting_carrier'];
    }

    /**
     * Sets exporting_carrier
     *
     * @param string|null $exporting_carrier The name of the carrier that is exporting the shipment. The vessels flag number should also be entered, if the carrier is a vessel.  Applies to CO and EEI forms only. Required for CO and EEI forms.
     *
     * @return self
     */
    public function setExportingCarrier($exporting_carrier)
    {
        if (is_null($exporting_carrier)) {
            throw new \InvalidArgumentException('non-nullable exporting_carrier cannot be null');
        }
        if ((mb_strlen($exporting_carrier) > 35)) {
            throw new \InvalidArgumentException('invalid length for $exporting_carrier when calling ShipmentServiceOptionsInternationalForms., must be smaller than or equal to 35.');
        }
        if ((mb_strlen($exporting_carrier) < 1)) {
            throw new \InvalidArgumentException('invalid length for $exporting_carrier when calling ShipmentServiceOptionsInternationalForms., must be bigger than or equal to 1.');
        }

        $this->container['exporting_carrier'] = $exporting_carrier;

        return $this;
    }

    /**
     * Gets carrier_id
     *
     * @return string|null
     */
    public function getCarrierId()
    {
        return $this->container['carrier_id'];
    }

    /**
     * Sets carrier_id
     *
     * @param string|null $carrier_id The four-character Standard Carrier Alpha Code (SCAC) for vessel, rail, and truck shipments. For air shipment, enter the two or three character International Air Transport Association (IATA) code.  Applies to EEI forms only. No Validations.
     *
     * @return self
     */
    public function setCarrierId($carrier_id)
    {
        if (is_null($carrier_id)) {
            throw new \InvalidArgumentException('non-nullable carrier_id cannot be null');
        }
        if ((mb_strlen($carrier_id) > 17)) {
            throw new \InvalidArgumentException('invalid length for $carrier_id when calling ShipmentServiceOptionsInternationalForms., must be smaller than or equal to 17.');
        }
        if ((mb_strlen($carrier_id) < 1)) {
            throw new \InvalidArgumentException('invalid length for $carrier_id when calling ShipmentServiceOptionsInternationalForms., must be bigger than or equal to 1.');
        }

        $this->container['carrier_id'] = $carrier_id;

        return $this;
    }

    /**
     * Gets in_bond_code
     *
     * @return string|null
     */
    public function getInBondCode()
    {
        return $this->container['in_bond_code'];
    }

    /**
     * Sets in_bond_code
     *
     * @param string|null $in_bond_code The two-character In Bond Code.  Applies to EEI forms only. Required for EEI forms. Valid values for EEI are: 70: Not in bond; 67: IE from a FTZ; 68: T&E from a FTZ.
     *
     * @return self
     */
    public function setInBondCode($in_bond_code)
    {
        if (is_null($in_bond_code)) {
            throw new \InvalidArgumentException('non-nullable in_bond_code cannot be null');
        }
        if ((mb_strlen($in_bond_code) > 2)) {
            throw new \InvalidArgumentException('invalid length for $in_bond_code when calling ShipmentServiceOptionsInternationalForms., must be smaller than or equal to 2.');
        }
        if ((mb_strlen($in_bond_code) < 2)) {
            throw new \InvalidArgumentException('invalid length for $in_bond_code when calling ShipmentServiceOptionsInternationalForms., must be bigger than or equal to 2.');
        }

        $this->container['in_bond_code'] = $in_bond_code;

        return $this;
    }

    /**
     * Gets entry_number
     *
     * @return string|null
     */
    public function getEntryNumber()
    {
        return $this->container['entry_number'];
    }

    /**
     * Sets entry_number
     *
     * @param string|null $entry_number The Import Entry Number when the export transaction is used as proof of export for import transactions (examples: In Bond, Temporary Import Bond or Drawbacks).  Applies to EEI forms only. Conditionally Required for EEI forms when In bond code value is other than 70 (Not In Bond)
     *
     * @return self
     */
    public function setEntryNumber($entry_number)
    {
        if (is_null($entry_number)) {
            throw new \InvalidArgumentException('non-nullable entry_number cannot be null');
        }
        if ((mb_strlen($entry_number) > 25)) {
            throw new \InvalidArgumentException('invalid length for $entry_number when calling ShipmentServiceOptionsInternationalForms., must be smaller than or equal to 25.');
        }
        if ((mb_strlen($entry_number) < 1)) {
            throw new \InvalidArgumentException('invalid length for $entry_number when calling ShipmentServiceOptionsInternationalForms., must be bigger than or equal to 1.');
        }

        $this->container['entry_number'] = $entry_number;

        return $this;
    }

    /**
     * Gets point_of_origin
     *
     * @return string|null
     */
    public function getPointOfOrigin()
    {
        return $this->container['point_of_origin'];
    }

    /**
     * Sets point_of_origin
     *
     * @param string|null $point_of_origin Contains one of the following:  The two-digit U.S. Postal Service abbreviation for the state from which the goods were shipped to the port of export. The state that is the source for the good with the highest value. The state of consolidation. The Foreign Trade Zone number of the zone from where the exports are leaving.  If the goods were shipped from Puerto Rico, enter PR.  Applies to EEI forms only. Required for EEI.
     *
     * @return self
     */
    public function setPointOfOrigin($point_of_origin)
    {
        if (is_null($point_of_origin)) {
            throw new \InvalidArgumentException('non-nullable point_of_origin cannot be null');
        }
        if ((mb_strlen($point_of_origin) > 5)) {
            throw new \InvalidArgumentException('invalid length for $point_of_origin when calling ShipmentServiceOptionsInternationalForms., must be smaller than or equal to 5.');
        }
        if ((mb_strlen($point_of_origin) < 1)) {
            throw new \InvalidArgumentException('invalid length for $point_of_origin when calling ShipmentServiceOptionsInternationalForms., must be bigger than or equal to 1.');
        }

        $this->container['point_of_origin'] = $point_of_origin;

        return $this;
    }

    /**
     * Gets point_of_origin_type
     *
     * @return string|null
     */
    public function getPointOfOriginType()
    {
        return $this->container['point_of_origin_type'];
    }

    /**
     * Sets point_of_origin_type
     *
     * @param string|null $point_of_origin_type Valid values are : S (for state postal code abbreviation) , F : FTZ Identifier  Applies EEI forms only. Required for EEI form.
     *
     * @return self
     */
    public function setPointOfOriginType($point_of_origin_type)
    {
        if (is_null($point_of_origin_type)) {
            throw new \InvalidArgumentException('non-nullable point_of_origin_type cannot be null');
        }
        if ((mb_strlen($point_of_origin_type) > 1)) {
            throw new \InvalidArgumentException('invalid length for $point_of_origin_type when calling ShipmentServiceOptionsInternationalForms., must be smaller than or equal to 1.');
        }
        if ((mb_strlen($point_of_origin_type) < 1)) {
            throw new \InvalidArgumentException('invalid length for $point_of_origin_type when calling ShipmentServiceOptionsInternationalForms., must be bigger than or equal to 1.');
        }

        $this->container['point_of_origin_type'] = $point_of_origin_type;

        return $this;
    }

    /**
     * Gets mode_of_transport
     *
     * @return string|null
     */
    public function getModeOfTransport()
    {
        return $this->container['mode_of_transport'];
    }

    /**
     * Sets mode_of_transport
     *
     * @param string|null $mode_of_transport Mode of transport by which the goods are exported. Valid values: Air, AirContainerized, Auto, FixedTransportInstallations, Mail, PassengerHandcarried, Pedestrian, Rail, Rail, Containerized, RoadOther, SeaBarge, SeaContainerized, SeaNoncontainerized, Truck, TruckContainerized.  Applies to EEI forms only.  Required for EEI.  Only allowed values can be entered. Only 10 Characters can appear on the form. Anything greater than 10 characters will be truncated on the form.
     *
     * @return self
     */
    public function setModeOfTransport($mode_of_transport)
    {
        if (is_null($mode_of_transport)) {
            throw new \InvalidArgumentException('non-nullable mode_of_transport cannot be null');
        }
        if ((mb_strlen($mode_of_transport) > 35)) {
            throw new \InvalidArgumentException('invalid length for $mode_of_transport when calling ShipmentServiceOptionsInternationalForms., must be smaller than or equal to 35.');
        }
        if ((mb_strlen($mode_of_transport) < 1)) {
            throw new \InvalidArgumentException('invalid length for $mode_of_transport when calling ShipmentServiceOptionsInternationalForms., must be bigger than or equal to 1.');
        }

        $this->container['mode_of_transport'] = $mode_of_transport;

        return $this;
    }

    /**
     * Gets port_of_export
     *
     * @return string|null
     */
    public function getPortOfExport()
    {
        return $this->container['port_of_export'];
    }

    /**
     * Sets port_of_export
     *
     * @param string|null $port_of_export Should be one of the following-Overland: The U.S. Customs port where the carrier crosses the U.S. border, Vessel and Air: The U.S. Customs port where the goods are loaded on the carrier to be exported from the U.S., Postal: The U.S. Postal Office from where the goods are mailed.  Applies to EEI forms only. No validation is performed.
     *
     * @return self
     */
    public function setPortOfExport($port_of_export)
    {
        if (is_null($port_of_export)) {
            throw new \InvalidArgumentException('non-nullable port_of_export cannot be null');
        }
        if ((mb_strlen($port_of_export) > 35)) {
            throw new \InvalidArgumentException('invalid length for $port_of_export when calling ShipmentServiceOptionsInternationalForms., must be smaller than or equal to 35.');
        }
        if ((mb_strlen($port_of_export) < 1)) {
            throw new \InvalidArgumentException('invalid length for $port_of_export when calling ShipmentServiceOptionsInternationalForms., must be bigger than or equal to 1.');
        }

        $this->container['port_of_export'] = $port_of_export;

        return $this;
    }

    /**
     * Gets port_of_unloading
     *
     * @return string|null
     */
    public function getPortOfUnloading()
    {
        return $this->container['port_of_unloading'];
    }

    /**
     * Sets port_of_unloading
     *
     * @param string|null $port_of_unloading The country or territory and the port where the goods will be unloaded from the exporting carrier. For vessel and air shipments only.  Applies to EEI forms only. No validation is performed.
     *
     * @return self
     */
    public function setPortOfUnloading($port_of_unloading)
    {
        if (is_null($port_of_unloading)) {
            throw new \InvalidArgumentException('non-nullable port_of_unloading cannot be null');
        }
        if ((mb_strlen($port_of_unloading) > 35)) {
            throw new \InvalidArgumentException('invalid length for $port_of_unloading when calling ShipmentServiceOptionsInternationalForms., must be smaller than or equal to 35.');
        }
        if ((mb_strlen($port_of_unloading) < 1)) {
            throw new \InvalidArgumentException('invalid length for $port_of_unloading when calling ShipmentServiceOptionsInternationalForms., must be bigger than or equal to 1.');
        }

        $this->container['port_of_unloading'] = $port_of_unloading;

        return $this;
    }

    /**
     * Gets loading_pier
     *
     * @return string|null
     */
    public function getLoadingPier()
    {
        return $this->container['loading_pier'];
    }

    /**
     * Sets loading_pier
     *
     * @param string|null $loading_pier Pier where goods are loaded. For vessel shipments only.  Applies to EEI forms only. No validation is performed.
     *
     * @return self
     */
    public function setLoadingPier($loading_pier)
    {
        if (is_null($loading_pier)) {
            throw new \InvalidArgumentException('non-nullable loading_pier cannot be null');
        }
        if ((mb_strlen($loading_pier) > 35)) {
            throw new \InvalidArgumentException('invalid length for $loading_pier when calling ShipmentServiceOptionsInternationalForms., must be smaller than or equal to 35.');
        }
        if ((mb_strlen($loading_pier) < 1)) {
            throw new \InvalidArgumentException('invalid length for $loading_pier when calling ShipmentServiceOptionsInternationalForms., must be bigger than or equal to 1.');
        }

        $this->container['loading_pier'] = $loading_pier;

        return $this;
    }

    /**
     * Gets parties_to_transaction
     *
     * @return string|null
     */
    public function getPartiesToTransaction()
    {
        return $this->container['parties_to_transaction'];
    }

    /**
     * Sets parties_to_transaction
     *
     * @param string|null $parties_to_transaction Information about parties to transaction. Use Related, if the parties to the transaction are related. A related party is an export from a U.S. businessperson or business to a foreign business or from a U.S. business to a foreign person or business where the person has at least 10 percent of the voting shares of the business during the fiscal year. If unincorporated, then an equivalent interest in the business.  Applies to EEI forms only.   Valid values: R - Related, N - Non-related.
     *
     * @return self
     */
    public function setPartiesToTransaction($parties_to_transaction)
    {
        if (is_null($parties_to_transaction)) {
            throw new \InvalidArgumentException('non-nullable parties_to_transaction cannot be null');
        }
        if ((mb_strlen($parties_to_transaction) > 1)) {
            throw new \InvalidArgumentException('invalid length for $parties_to_transaction when calling ShipmentServiceOptionsInternationalForms., must be smaller than or equal to 1.');
        }
        if ((mb_strlen($parties_to_transaction) < 1)) {
            throw new \InvalidArgumentException('invalid length for $parties_to_transaction when calling ShipmentServiceOptionsInternationalForms., must be bigger than or equal to 1.');
        }

        $this->container['parties_to_transaction'] = $parties_to_transaction;

        return $this;
    }

    /**
     * Gets routed_export_transaction_indicator
     *
     * @return string|null
     */
    public function getRoutedExportTransactionIndicator()
    {
        return $this->container['routed_export_transaction_indicator'];
    }

    /**
     * Sets routed_export_transaction_indicator
     *
     * @param string|null $routed_export_transaction_indicator If Present, indicates that it is a routed export transaction. A routed export transaction is one, where the foreign principal party in interest authorizes a U.S. forwarding (or other) agent to export the merchandise outside the U.S.  Applies to EEI forms only.
     *
     * @return self
     */
    public function setRoutedExportTransactionIndicator($routed_export_transaction_indicator)
    {
        if (is_null($routed_export_transaction_indicator)) {
            throw new \InvalidArgumentException('non-nullable routed_export_transaction_indicator cannot be null');
        }


        $this->container['routed_export_transaction_indicator'] = $routed_export_transaction_indicator;

        return $this;
    }

    /**
     * Gets containerized_indicator
     *
     * @return string|null
     */
    public function getContainerizedIndicator()
    {
        return $this->container['containerized_indicator'];
    }

    /**
     * Sets containerized_indicator
     *
     * @param string|null $containerized_indicator If present indicates that the goods are containerized. This applies to vessel shipments only.  Applies to EEI forms only.
     *
     * @return self
     */
    public function setContainerizedIndicator($containerized_indicator)
    {
        if (is_null($containerized_indicator)) {
            throw new \InvalidArgumentException('non-nullable containerized_indicator cannot be null');
        }


        $this->container['containerized_indicator'] = $containerized_indicator;

        return $this;
    }

    /**
     * Gets override_paperless_indicator
     *
     * @return string|null
     */
    public function getOverridePaperlessIndicator()
    {
        return $this->container['override_paperless_indicator'];
    }

    /**
     * Sets override_paperless_indicator
     *
     * @param string|null $override_paperless_indicator The application will automatically provide a copy of the invoice or NAFTA/CO with each response regardless of whether the user has enabled Paperless account. The user now has the option to print or ignore the copy provided.
     *
     * @return self
     */
    public function setOverridePaperlessIndicator($override_paperless_indicator)
    {
        if (is_null($override_paperless_indicator)) {
            throw new \InvalidArgumentException('non-nullable override_paperless_indicator cannot be null');
        }


        $this->container['override_paperless_indicator'] = $override_paperless_indicator;

        return $this;
    }

    /**
     * Gets shipper_memo
     *
     * @return string|null
     */
    public function getShipperMemo()
    {
        return $this->container['shipper_memo'];
    }

    /**
     * Sets shipper_memo
     *
     * @param string|null $shipper_memo Text for the shipper to add additional information.  Forward shipment only.
     *
     * @return self
     */
    public function setShipperMemo($shipper_memo)
    {
        if (is_null($shipper_memo)) {
            throw new \InvalidArgumentException('non-nullable shipper_memo cannot be null');
        }
        if ((mb_strlen($shipper_memo) > 300)) {
            throw new \InvalidArgumentException('invalid length for $shipper_memo when calling ShipmentServiceOptionsInternationalForms., must be smaller than or equal to 300.');
        }
        if ((mb_strlen($shipper_memo) < 1)) {
            throw new \InvalidArgumentException('invalid length for $shipper_memo when calling ShipmentServiceOptionsInternationalForms., must be bigger than or equal to 1.');
        }

        $this->container['shipper_memo'] = $shipper_memo;

        return $this;
    }

    /**
     * Gets hazardous_materials_indicator
     *
     * @return string|null
     */
    public function getHazardousMaterialsIndicator()
    {
        return $this->container['hazardous_materials_indicator'];
    }

    /**
     * Sets hazardous_materials_indicator
     *
     * @param string|null $hazardous_materials_indicator This is an empty tag. Presence of the indicator for EEI form means shipment contains hazardous material.
     *
     * @return self
     */
    public function setHazardousMaterialsIndicator($hazardous_materials_indicator)
    {
        if (is_null($hazardous_materials_indicator)) {
            throw new \InvalidArgumentException('non-nullable hazardous_materials_indicator cannot be null');
        }


        $this->container['hazardous_materials_indicator'] = $hazardous_materials_indicator;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


