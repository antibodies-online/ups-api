<?php
/**
 * PackageServiceOptionsHazMat
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  AntibodiesOnline\UpsApi\Shipping
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Ship
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace AntibodiesOnline\UpsApi\Shipping\Model;

use \ArrayAccess;
use \AntibodiesOnline\UpsApi\Shipping\ObjectSerializer;

/**
 * PackageServiceOptionsHazMat Class Doc Comment
 *
 * @category Class
 * @description Container to hold HazMat Chemical Records.
 * @package  AntibodiesOnline\UpsApi\Shipping
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PackageServiceOptionsHazMat implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PackageServiceOptions_HazMat';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'packaging_type_quantity' => 'string',
        'record_identifier1' => 'string',
        'record_identifier2' => 'string',
        'record_identifier3' => 'string',
        'sub_risk_class' => 'string',
        'a_dr_item_number' => 'string',
        'a_dr_packing_group_letter' => 'string',
        'technical_name' => 'string',
        'hazard_label_required' => 'string',
        'class_division_number' => 'string',
        'reference_number' => 'string',
        'quantity' => 'string',
        'uom' => 'string',
        'packaging_type' => 'string',
        'id_number' => 'string',
        'proper_shipping_name' => 'string',
        'additional_description' => 'string',
        'packaging_group_type' => 'string',
        'packaging_instruction_code' => 'string',
        'emergency_phone' => 'string',
        'emergency_contact' => 'string',
        'reportable_quantity' => 'string',
        'regulation_set' => 'string',
        'transportation_mode' => 'string',
        'commodity_regulated_level_code' => 'string',
        'transport_category' => 'string',
        'tunnel_restriction_code' => 'string',
        'chemical_record_identifier' => 'string',
        'local_technical_name' => 'string',
        'local_proper_shipping_name' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'packaging_type_quantity' => null,
        'record_identifier1' => null,
        'record_identifier2' => null,
        'record_identifier3' => null,
        'sub_risk_class' => null,
        'a_dr_item_number' => null,
        'a_dr_packing_group_letter' => null,
        'technical_name' => null,
        'hazard_label_required' => null,
        'class_division_number' => null,
        'reference_number' => null,
        'quantity' => null,
        'uom' => null,
        'packaging_type' => null,
        'id_number' => null,
        'proper_shipping_name' => null,
        'additional_description' => null,
        'packaging_group_type' => null,
        'packaging_instruction_code' => null,
        'emergency_phone' => null,
        'emergency_contact' => null,
        'reportable_quantity' => null,
        'regulation_set' => null,
        'transportation_mode' => null,
        'commodity_regulated_level_code' => null,
        'transport_category' => null,
        'tunnel_restriction_code' => null,
        'chemical_record_identifier' => null,
        'local_technical_name' => null,
        'local_proper_shipping_name' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'packaging_type_quantity' => false,
		'record_identifier1' => false,
		'record_identifier2' => false,
		'record_identifier3' => false,
		'sub_risk_class' => false,
		'a_dr_item_number' => false,
		'a_dr_packing_group_letter' => false,
		'technical_name' => false,
		'hazard_label_required' => false,
		'class_division_number' => false,
		'reference_number' => false,
		'quantity' => false,
		'uom' => false,
		'packaging_type' => false,
		'id_number' => false,
		'proper_shipping_name' => false,
		'additional_description' => false,
		'packaging_group_type' => false,
		'packaging_instruction_code' => false,
		'emergency_phone' => false,
		'emergency_contact' => false,
		'reportable_quantity' => false,
		'regulation_set' => false,
		'transportation_mode' => false,
		'commodity_regulated_level_code' => false,
		'transport_category' => false,
		'tunnel_restriction_code' => false,
		'chemical_record_identifier' => false,
		'local_technical_name' => false,
		'local_proper_shipping_name' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'packaging_type_quantity' => 'PackagingTypeQuantity',
        'record_identifier1' => 'RecordIdentifier1',
        'record_identifier2' => 'RecordIdentifier2',
        'record_identifier3' => 'RecordIdentifier3',
        'sub_risk_class' => 'SubRiskClass',
        'a_dr_item_number' => 'aDRItemNumber',
        'a_dr_packing_group_letter' => 'aDRPackingGroupLetter',
        'technical_name' => 'TechnicalName',
        'hazard_label_required' => 'HazardLabelRequired',
        'class_division_number' => 'ClassDivisionNumber',
        'reference_number' => 'ReferenceNumber',
        'quantity' => 'Quantity',
        'uom' => 'UOM',
        'packaging_type' => 'PackagingType',
        'id_number' => 'IDNumber',
        'proper_shipping_name' => 'ProperShippingName',
        'additional_description' => 'AdditionalDescription',
        'packaging_group_type' => 'PackagingGroupType',
        'packaging_instruction_code' => 'PackagingInstructionCode',
        'emergency_phone' => 'EmergencyPhone',
        'emergency_contact' => 'EmergencyContact',
        'reportable_quantity' => 'ReportableQuantity',
        'regulation_set' => 'RegulationSet',
        'transportation_mode' => 'TransportationMode',
        'commodity_regulated_level_code' => 'CommodityRegulatedLevelCode',
        'transport_category' => 'TransportCategory',
        'tunnel_restriction_code' => 'TunnelRestrictionCode',
        'chemical_record_identifier' => 'ChemicalRecordIdentifier',
        'local_technical_name' => 'LocalTechnicalName',
        'local_proper_shipping_name' => 'LocalProperShippingName'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'packaging_type_quantity' => 'setPackagingTypeQuantity',
        'record_identifier1' => 'setRecordIdentifier1',
        'record_identifier2' => 'setRecordIdentifier2',
        'record_identifier3' => 'setRecordIdentifier3',
        'sub_risk_class' => 'setSubRiskClass',
        'a_dr_item_number' => 'setADrItemNumber',
        'a_dr_packing_group_letter' => 'setADrPackingGroupLetter',
        'technical_name' => 'setTechnicalName',
        'hazard_label_required' => 'setHazardLabelRequired',
        'class_division_number' => 'setClassDivisionNumber',
        'reference_number' => 'setReferenceNumber',
        'quantity' => 'setQuantity',
        'uom' => 'setUom',
        'packaging_type' => 'setPackagingType',
        'id_number' => 'setIdNumber',
        'proper_shipping_name' => 'setProperShippingName',
        'additional_description' => 'setAdditionalDescription',
        'packaging_group_type' => 'setPackagingGroupType',
        'packaging_instruction_code' => 'setPackagingInstructionCode',
        'emergency_phone' => 'setEmergencyPhone',
        'emergency_contact' => 'setEmergencyContact',
        'reportable_quantity' => 'setReportableQuantity',
        'regulation_set' => 'setRegulationSet',
        'transportation_mode' => 'setTransportationMode',
        'commodity_regulated_level_code' => 'setCommodityRegulatedLevelCode',
        'transport_category' => 'setTransportCategory',
        'tunnel_restriction_code' => 'setTunnelRestrictionCode',
        'chemical_record_identifier' => 'setChemicalRecordIdentifier',
        'local_technical_name' => 'setLocalTechnicalName',
        'local_proper_shipping_name' => 'setLocalProperShippingName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'packaging_type_quantity' => 'getPackagingTypeQuantity',
        'record_identifier1' => 'getRecordIdentifier1',
        'record_identifier2' => 'getRecordIdentifier2',
        'record_identifier3' => 'getRecordIdentifier3',
        'sub_risk_class' => 'getSubRiskClass',
        'a_dr_item_number' => 'getADrItemNumber',
        'a_dr_packing_group_letter' => 'getADrPackingGroupLetter',
        'technical_name' => 'getTechnicalName',
        'hazard_label_required' => 'getHazardLabelRequired',
        'class_division_number' => 'getClassDivisionNumber',
        'reference_number' => 'getReferenceNumber',
        'quantity' => 'getQuantity',
        'uom' => 'getUom',
        'packaging_type' => 'getPackagingType',
        'id_number' => 'getIdNumber',
        'proper_shipping_name' => 'getProperShippingName',
        'additional_description' => 'getAdditionalDescription',
        'packaging_group_type' => 'getPackagingGroupType',
        'packaging_instruction_code' => 'getPackagingInstructionCode',
        'emergency_phone' => 'getEmergencyPhone',
        'emergency_contact' => 'getEmergencyContact',
        'reportable_quantity' => 'getReportableQuantity',
        'regulation_set' => 'getRegulationSet',
        'transportation_mode' => 'getTransportationMode',
        'commodity_regulated_level_code' => 'getCommodityRegulatedLevelCode',
        'transport_category' => 'getTransportCategory',
        'tunnel_restriction_code' => 'getTunnelRestrictionCode',
        'chemical_record_identifier' => 'getChemicalRecordIdentifier',
        'local_technical_name' => 'getLocalTechnicalName',
        'local_proper_shipping_name' => 'getLocalProperShippingName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('packaging_type_quantity', $data ?? [], null);
        $this->setIfExists('record_identifier1', $data ?? [], null);
        $this->setIfExists('record_identifier2', $data ?? [], null);
        $this->setIfExists('record_identifier3', $data ?? [], null);
        $this->setIfExists('sub_risk_class', $data ?? [], null);
        $this->setIfExists('a_dr_item_number', $data ?? [], null);
        $this->setIfExists('a_dr_packing_group_letter', $data ?? [], null);
        $this->setIfExists('technical_name', $data ?? [], null);
        $this->setIfExists('hazard_label_required', $data ?? [], null);
        $this->setIfExists('class_division_number', $data ?? [], null);
        $this->setIfExists('reference_number', $data ?? [], null);
        $this->setIfExists('quantity', $data ?? [], null);
        $this->setIfExists('uom', $data ?? [], null);
        $this->setIfExists('packaging_type', $data ?? [], null);
        $this->setIfExists('id_number', $data ?? [], null);
        $this->setIfExists('proper_shipping_name', $data ?? [], null);
        $this->setIfExists('additional_description', $data ?? [], null);
        $this->setIfExists('packaging_group_type', $data ?? [], null);
        $this->setIfExists('packaging_instruction_code', $data ?? [], null);
        $this->setIfExists('emergency_phone', $data ?? [], null);
        $this->setIfExists('emergency_contact', $data ?? [], null);
        $this->setIfExists('reportable_quantity', $data ?? [], null);
        $this->setIfExists('regulation_set', $data ?? [], null);
        $this->setIfExists('transportation_mode', $data ?? [], null);
        $this->setIfExists('commodity_regulated_level_code', $data ?? [], null);
        $this->setIfExists('transport_category', $data ?? [], null);
        $this->setIfExists('tunnel_restriction_code', $data ?? [], null);
        $this->setIfExists('chemical_record_identifier', $data ?? [], null);
        $this->setIfExists('local_technical_name', $data ?? [], null);
        $this->setIfExists('local_proper_shipping_name', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['packaging_type_quantity']) && (mb_strlen($this->container['packaging_type_quantity']) > 3)) {
            $invalidProperties[] = "invalid value for 'packaging_type_quantity', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['packaging_type_quantity']) && (mb_strlen($this->container['packaging_type_quantity']) < 1)) {
            $invalidProperties[] = "invalid value for 'packaging_type_quantity', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['sub_risk_class']) && (mb_strlen($this->container['sub_risk_class']) > 7)) {
            $invalidProperties[] = "invalid value for 'sub_risk_class', the character length must be smaller than or equal to 7.";
        }

        if (!is_null($this->container['sub_risk_class']) && (mb_strlen($this->container['sub_risk_class']) < 7)) {
            $invalidProperties[] = "invalid value for 'sub_risk_class', the character length must be bigger than or equal to 7.";
        }

        if (!is_null($this->container['a_dr_item_number']) && (mb_strlen($this->container['a_dr_item_number']) > 10)) {
            $invalidProperties[] = "invalid value for 'a_dr_item_number', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['a_dr_item_number']) && (mb_strlen($this->container['a_dr_item_number']) < 10)) {
            $invalidProperties[] = "invalid value for 'a_dr_item_number', the character length must be bigger than or equal to 10.";
        }

        if (!is_null($this->container['a_dr_packing_group_letter']) && (mb_strlen($this->container['a_dr_packing_group_letter']) > 1)) {
            $invalidProperties[] = "invalid value for 'a_dr_packing_group_letter', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['a_dr_packing_group_letter']) && (mb_strlen($this->container['a_dr_packing_group_letter']) < 1)) {
            $invalidProperties[] = "invalid value for 'a_dr_packing_group_letter', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['technical_name']) && (mb_strlen($this->container['technical_name']) > 200)) {
            $invalidProperties[] = "invalid value for 'technical_name', the character length must be smaller than or equal to 200.";
        }

        if (!is_null($this->container['technical_name']) && (mb_strlen($this->container['technical_name']) < 200)) {
            $invalidProperties[] = "invalid value for 'technical_name', the character length must be bigger than or equal to 200.";
        }

        if (!is_null($this->container['hazard_label_required']) && (mb_strlen($this->container['hazard_label_required']) > 50)) {
            $invalidProperties[] = "invalid value for 'hazard_label_required', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['hazard_label_required']) && (mb_strlen($this->container['hazard_label_required']) < 50)) {
            $invalidProperties[] = "invalid value for 'hazard_label_required', the character length must be bigger than or equal to 50.";
        }

        if (!is_null($this->container['class_division_number']) && (mb_strlen($this->container['class_division_number']) > 7)) {
            $invalidProperties[] = "invalid value for 'class_division_number', the character length must be smaller than or equal to 7.";
        }

        if (!is_null($this->container['class_division_number']) && (mb_strlen($this->container['class_division_number']) < 1)) {
            $invalidProperties[] = "invalid value for 'class_division_number', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['reference_number']) && (mb_strlen($this->container['reference_number']) > 15)) {
            $invalidProperties[] = "invalid value for 'reference_number', the character length must be smaller than or equal to 15.";
        }

        if (!is_null($this->container['reference_number']) && (mb_strlen($this->container['reference_number']) < 1)) {
            $invalidProperties[] = "invalid value for 'reference_number', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['quantity']) && (mb_strlen($this->container['quantity']) > 5)) {
            $invalidProperties[] = "invalid value for 'quantity', the character length must be smaller than or equal to 5.";
        }

        if (!is_null($this->container['quantity']) && (mb_strlen($this->container['quantity']) < 1)) {
            $invalidProperties[] = "invalid value for 'quantity', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['uom']) && (mb_strlen($this->container['uom']) > 10)) {
            $invalidProperties[] = "invalid value for 'uom', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['uom']) && (mb_strlen($this->container['uom']) < 1)) {
            $invalidProperties[] = "invalid value for 'uom', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['packaging_type']) && (mb_strlen($this->container['packaging_type']) > 255)) {
            $invalidProperties[] = "invalid value for 'packaging_type', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['packaging_type']) && (mb_strlen($this->container['packaging_type']) < 1)) {
            $invalidProperties[] = "invalid value for 'packaging_type', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['id_number']) && (mb_strlen($this->container['id_number']) > 6)) {
            $invalidProperties[] = "invalid value for 'id_number', the character length must be smaller than or equal to 6.";
        }

        if (!is_null($this->container['id_number']) && (mb_strlen($this->container['id_number']) < 1)) {
            $invalidProperties[] = "invalid value for 'id_number', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['proper_shipping_name'] === null) {
            $invalidProperties[] = "'proper_shipping_name' can't be null";
        }
        if ((mb_strlen($this->container['proper_shipping_name']) > 150)) {
            $invalidProperties[] = "invalid value for 'proper_shipping_name', the character length must be smaller than or equal to 150.";
        }

        if ((mb_strlen($this->container['proper_shipping_name']) < 1)) {
            $invalidProperties[] = "invalid value for 'proper_shipping_name', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['additional_description']) && (mb_strlen($this->container['additional_description']) > 255)) {
            $invalidProperties[] = "invalid value for 'additional_description', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['additional_description']) && (mb_strlen($this->container['additional_description']) < 1)) {
            $invalidProperties[] = "invalid value for 'additional_description', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['packaging_group_type']) && (mb_strlen($this->container['packaging_group_type']) > 5)) {
            $invalidProperties[] = "invalid value for 'packaging_group_type', the character length must be smaller than or equal to 5.";
        }

        if (!is_null($this->container['packaging_group_type']) && (mb_strlen($this->container['packaging_group_type']) < 1)) {
            $invalidProperties[] = "invalid value for 'packaging_group_type', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['packaging_instruction_code']) && (mb_strlen($this->container['packaging_instruction_code']) > 4)) {
            $invalidProperties[] = "invalid value for 'packaging_instruction_code', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['packaging_instruction_code']) && (mb_strlen($this->container['packaging_instruction_code']) < 1)) {
            $invalidProperties[] = "invalid value for 'packaging_instruction_code', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['emergency_phone']) && (mb_strlen($this->container['emergency_phone']) > 25)) {
            $invalidProperties[] = "invalid value for 'emergency_phone', the character length must be smaller than or equal to 25.";
        }

        if (!is_null($this->container['emergency_phone']) && (mb_strlen($this->container['emergency_phone']) < 1)) {
            $invalidProperties[] = "invalid value for 'emergency_phone', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['emergency_contact']) && (mb_strlen($this->container['emergency_contact']) > 35)) {
            $invalidProperties[] = "invalid value for 'emergency_contact', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['emergency_contact']) && (mb_strlen($this->container['emergency_contact']) < 1)) {
            $invalidProperties[] = "invalid value for 'emergency_contact', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['reportable_quantity']) && (mb_strlen($this->container['reportable_quantity']) > 2)) {
            $invalidProperties[] = "invalid value for 'reportable_quantity', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['reportable_quantity']) && (mb_strlen($this->container['reportable_quantity']) < 1)) {
            $invalidProperties[] = "invalid value for 'reportable_quantity', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['regulation_set'] === null) {
            $invalidProperties[] = "'regulation_set' can't be null";
        }
        if ((mb_strlen($this->container['regulation_set']) > 4)) {
            $invalidProperties[] = "invalid value for 'regulation_set', the character length must be smaller than or equal to 4.";
        }

        if ((mb_strlen($this->container['regulation_set']) < 3)) {
            $invalidProperties[] = "invalid value for 'regulation_set', the character length must be bigger than or equal to 3.";
        }

        if ($this->container['transportation_mode'] === null) {
            $invalidProperties[] = "'transportation_mode' can't be null";
        }
        if ((mb_strlen($this->container['transportation_mode']) > 30)) {
            $invalidProperties[] = "invalid value for 'transportation_mode', the character length must be smaller than or equal to 30.";
        }

        if ((mb_strlen($this->container['transportation_mode']) < 3)) {
            $invalidProperties[] = "invalid value for 'transportation_mode', the character length must be bigger than or equal to 3.";
        }

        if (!is_null($this->container['commodity_regulated_level_code']) && (mb_strlen($this->container['commodity_regulated_level_code']) > 2)) {
            $invalidProperties[] = "invalid value for 'commodity_regulated_level_code', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['commodity_regulated_level_code']) && (mb_strlen($this->container['commodity_regulated_level_code']) < 2)) {
            $invalidProperties[] = "invalid value for 'commodity_regulated_level_code', the character length must be bigger than or equal to 2.";
        }

        if (!is_null($this->container['transport_category']) && (mb_strlen($this->container['transport_category']) > 1)) {
            $invalidProperties[] = "invalid value for 'transport_category', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['transport_category']) && (mb_strlen($this->container['transport_category']) < 1)) {
            $invalidProperties[] = "invalid value for 'transport_category', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['tunnel_restriction_code']) && (mb_strlen($this->container['tunnel_restriction_code']) > 10)) {
            $invalidProperties[] = "invalid value for 'tunnel_restriction_code', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['tunnel_restriction_code']) && (mb_strlen($this->container['tunnel_restriction_code']) < 1)) {
            $invalidProperties[] = "invalid value for 'tunnel_restriction_code', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['chemical_record_identifier']) && (mb_strlen($this->container['chemical_record_identifier']) > 3)) {
            $invalidProperties[] = "invalid value for 'chemical_record_identifier', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['chemical_record_identifier']) && (mb_strlen($this->container['chemical_record_identifier']) < 1)) {
            $invalidProperties[] = "invalid value for 'chemical_record_identifier', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['local_technical_name']) && (mb_strlen($this->container['local_technical_name']) > 200)) {
            $invalidProperties[] = "invalid value for 'local_technical_name', the character length must be smaller than or equal to 200.";
        }

        if (!is_null($this->container['local_technical_name']) && (mb_strlen($this->container['local_technical_name']) < 1)) {
            $invalidProperties[] = "invalid value for 'local_technical_name', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['local_proper_shipping_name']) && (mb_strlen($this->container['local_proper_shipping_name']) > 150)) {
            $invalidProperties[] = "invalid value for 'local_proper_shipping_name', the character length must be smaller than or equal to 150.";
        }

        if (!is_null($this->container['local_proper_shipping_name']) && (mb_strlen($this->container['local_proper_shipping_name']) < 1)) {
            $invalidProperties[] = "invalid value for 'local_proper_shipping_name', the character length must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets packaging_type_quantity
     *
     * @return string|null
     */
    public function getPackagingTypeQuantity()
    {
        return $this->container['packaging_type_quantity'];
    }

    /**
     * Sets packaging_type_quantity
     *
     * @param string|null $packaging_type_quantity The number of pieces of the specific commodity. Required if CommodityRegulatedLevelCode = LQ or FR.  Valid values are 1 to 999.
     *
     * @return self
     */
    public function setPackagingTypeQuantity($packaging_type_quantity)
    {
        if (is_null($packaging_type_quantity)) {
            throw new \InvalidArgumentException('non-nullable packaging_type_quantity cannot be null');
        }
        if ((mb_strlen($packaging_type_quantity) > 3)) {
            throw new \InvalidArgumentException('invalid length for $packaging_type_quantity when calling PackageServiceOptionsHazMat., must be smaller than or equal to 3.');
        }
        if ((mb_strlen($packaging_type_quantity) < 1)) {
            throw new \InvalidArgumentException('invalid length for $packaging_type_quantity when calling PackageServiceOptionsHazMat., must be bigger than or equal to 1.');
        }

        $this->container['packaging_type_quantity'] = $packaging_type_quantity;

        return $this;
    }

    /**
     * Gets record_identifier1
     *
     * @return string|null
     */
    public function getRecordIdentifier1()
    {
        return $this->container['record_identifier1'];
    }

    /**
     * Sets record_identifier1
     *
     * @param string|null $record_identifier1 Reserved for future use.
     *
     * @return self
     */
    public function setRecordIdentifier1($record_identifier1)
    {
        if (is_null($record_identifier1)) {
            throw new \InvalidArgumentException('non-nullable record_identifier1 cannot be null');
        }


        $this->container['record_identifier1'] = $record_identifier1;

        return $this;
    }

    /**
     * Gets record_identifier2
     *
     * @return string|null
     */
    public function getRecordIdentifier2()
    {
        return $this->container['record_identifier2'];
    }

    /**
     * Sets record_identifier2
     *
     * @param string|null $record_identifier2 Reserved for future use.
     *
     * @return self
     */
    public function setRecordIdentifier2($record_identifier2)
    {
        if (is_null($record_identifier2)) {
            throw new \InvalidArgumentException('non-nullable record_identifier2 cannot be null');
        }


        $this->container['record_identifier2'] = $record_identifier2;

        return $this;
    }

    /**
     * Gets record_identifier3
     *
     * @return string|null
     */
    public function getRecordIdentifier3()
    {
        return $this->container['record_identifier3'];
    }

    /**
     * Sets record_identifier3
     *
     * @param string|null $record_identifier3 Reserved for future use.
     *
     * @return self
     */
    public function setRecordIdentifier3($record_identifier3)
    {
        if (is_null($record_identifier3)) {
            throw new \InvalidArgumentException('non-nullable record_identifier3 cannot be null');
        }


        $this->container['record_identifier3'] = $record_identifier3;

        return $this;
    }

    /**
     * Gets sub_risk_class
     *
     * @return string|null
     */
    public function getSubRiskClass()
    {
        return $this->container['sub_risk_class'];
    }

    /**
     * Sets sub_risk_class
     *
     * @param string|null $sub_risk_class Recommended if CommodityRegulatedLevelCode = LQ or FR and if the field applies to the material by regulation.   Secondary hazardous characteristics of a package. (There can be more than one separate each with a comma).
     *
     * @return self
     */
    public function setSubRiskClass($sub_risk_class)
    {
        if (is_null($sub_risk_class)) {
            throw new \InvalidArgumentException('non-nullable sub_risk_class cannot be null');
        }
        if ((mb_strlen($sub_risk_class) > 7)) {
            throw new \InvalidArgumentException('invalid length for $sub_risk_class when calling PackageServiceOptionsHazMat., must be smaller than or equal to 7.');
        }
        if ((mb_strlen($sub_risk_class) < 7)) {
            throw new \InvalidArgumentException('invalid length for $sub_risk_class when calling PackageServiceOptionsHazMat., must be bigger than or equal to 7.');
        }

        $this->container['sub_risk_class'] = $sub_risk_class;

        return $this;
    }

    /**
     * Gets a_dr_item_number
     *
     * @return string|null
     */
    public function getADrItemNumber()
    {
        return $this->container['a_dr_item_number'];
    }

    /**
     * Sets a_dr_item_number
     *
     * @param string|null $a_dr_item_number The type of regulated good for an ADR package where ADR is for Europe to Europe ground movement.
     *
     * @return self
     */
    public function setADrItemNumber($a_dr_item_number)
    {
        if (is_null($a_dr_item_number)) {
            throw new \InvalidArgumentException('non-nullable a_dr_item_number cannot be null');
        }
        if ((mb_strlen($a_dr_item_number) > 10)) {
            throw new \InvalidArgumentException('invalid length for $a_dr_item_number when calling PackageServiceOptionsHazMat., must be smaller than or equal to 10.');
        }
        if ((mb_strlen($a_dr_item_number) < 10)) {
            throw new \InvalidArgumentException('invalid length for $a_dr_item_number when calling PackageServiceOptionsHazMat., must be bigger than or equal to 10.');
        }

        $this->container['a_dr_item_number'] = $a_dr_item_number;

        return $this;
    }

    /**
     * Gets a_dr_packing_group_letter
     *
     * @return string|null
     */
    public function getADrPackingGroupLetter()
    {
        return $this->container['a_dr_packing_group_letter'];
    }

    /**
     * Sets a_dr_packing_group_letter
     *
     * @param string|null $a_dr_packing_group_letter Required if the field applies to the material by regulation. Field input is Arabic numerals, output is Roman numerals. Will be shown in Roman Numerals.  Valid values:  1 = I,  2 = II,  3 = III,  and blank.
     *
     * @return self
     */
    public function setADrPackingGroupLetter($a_dr_packing_group_letter)
    {
        if (is_null($a_dr_packing_group_letter)) {
            throw new \InvalidArgumentException('non-nullable a_dr_packing_group_letter cannot be null');
        }
        if ((mb_strlen($a_dr_packing_group_letter) > 1)) {
            throw new \InvalidArgumentException('invalid length for $a_dr_packing_group_letter when calling PackageServiceOptionsHazMat., must be smaller than or equal to 1.');
        }
        if ((mb_strlen($a_dr_packing_group_letter) < 1)) {
            throw new \InvalidArgumentException('invalid length for $a_dr_packing_group_letter when calling PackageServiceOptionsHazMat., must be bigger than or equal to 1.');
        }

        $this->container['a_dr_packing_group_letter'] = $a_dr_packing_group_letter;

        return $this;
    }

    /**
     * Gets technical_name
     *
     * @return string|null
     */
    public function getTechnicalName()
    {
        return $this->container['technical_name'];
    }

    /**
     * Sets technical_name
     *
     * @param string|null $technical_name The technical name (when required) for the specified commodity. Recommended if CommodityRegulatedLevelCode = LQ or FR and if the field applies to the material by regulation.
     *
     * @return self
     */
    public function setTechnicalName($technical_name)
    {
        if (is_null($technical_name)) {
            throw new \InvalidArgumentException('non-nullable technical_name cannot be null');
        }
        if ((mb_strlen($technical_name) > 200)) {
            throw new \InvalidArgumentException('invalid length for $technical_name when calling PackageServiceOptionsHazMat., must be smaller than or equal to 200.');
        }
        if ((mb_strlen($technical_name) < 200)) {
            throw new \InvalidArgumentException('invalid length for $technical_name when calling PackageServiceOptionsHazMat., must be bigger than or equal to 200.');
        }

        $this->container['technical_name'] = $technical_name;

        return $this;
    }

    /**
     * Gets hazard_label_required
     *
     * @return string|null
     */
    public function getHazardLabelRequired()
    {
        return $this->container['hazard_label_required'];
    }

    /**
     * Sets hazard_label_required
     *
     * @param string|null $hazard_label_required Defines the type of label that is required on the package for the commodity.   Not applicable if CommodityRegulatedLevelCode = LR or EQ.
     *
     * @return self
     */
    public function setHazardLabelRequired($hazard_label_required)
    {
        if (is_null($hazard_label_required)) {
            throw new \InvalidArgumentException('non-nullable hazard_label_required cannot be null');
        }
        if ((mb_strlen($hazard_label_required) > 50)) {
            throw new \InvalidArgumentException('invalid length for $hazard_label_required when calling PackageServiceOptionsHazMat., must be smaller than or equal to 50.');
        }
        if ((mb_strlen($hazard_label_required) < 50)) {
            throw new \InvalidArgumentException('invalid length for $hazard_label_required when calling PackageServiceOptionsHazMat., must be bigger than or equal to 50.');
        }

        $this->container['hazard_label_required'] = $hazard_label_required;

        return $this;
    }

    /**
     * Gets class_division_number
     *
     * @return string|null
     */
    public function getClassDivisionNumber()
    {
        return $this->container['class_division_number'];
    }

    /**
     * Sets class_division_number
     *
     * @param string|null $class_division_number This is the hazard class associated to the specified commodity.   Required if CommodityRegulatedLevelCode is 'EQ', 'LQ' or 'FR'
     *
     * @return self
     */
    public function setClassDivisionNumber($class_division_number)
    {
        if (is_null($class_division_number)) {
            throw new \InvalidArgumentException('non-nullable class_division_number cannot be null');
        }
        if ((mb_strlen($class_division_number) > 7)) {
            throw new \InvalidArgumentException('invalid length for $class_division_number when calling PackageServiceOptionsHazMat., must be smaller than or equal to 7.');
        }
        if ((mb_strlen($class_division_number) < 1)) {
            throw new \InvalidArgumentException('invalid length for $class_division_number when calling PackageServiceOptionsHazMat., must be bigger than or equal to 1.');
        }

        $this->container['class_division_number'] = $class_division_number;

        return $this;
    }

    /**
     * Gets reference_number
     *
     * @return string|null
     */
    public function getReferenceNumber()
    {
        return $this->container['reference_number'];
    }

    /**
     * Sets reference_number
     *
     * @param string|null $reference_number Optional reference number. It will be displayed only on label.
     *
     * @return self
     */
    public function setReferenceNumber($reference_number)
    {
        if (is_null($reference_number)) {
            throw new \InvalidArgumentException('non-nullable reference_number cannot be null');
        }
        if ((mb_strlen($reference_number) > 15)) {
            throw new \InvalidArgumentException('invalid length for $reference_number when calling PackageServiceOptionsHazMat., must be smaller than or equal to 15.');
        }
        if ((mb_strlen($reference_number) < 1)) {
            throw new \InvalidArgumentException('invalid length for $reference_number when calling PackageServiceOptionsHazMat., must be bigger than or equal to 1.');
        }

        $this->container['reference_number'] = $reference_number;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return string|null
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param string|null $quantity Required if CommodityRegulatedLevelCode = EQ, LQ or FR. The numerical value of the mass capacity of the regulated good.  Should be more than 0.0. Valid characters are 0-9 and \".\" (Decimal point). Limit to 1 digit after the decimal. The maximum length of the field is 5 including \".\" (Decimal point) and can hold up to 1 decimal place.
     *
     * @return self
     */
    public function setQuantity($quantity)
    {
        if (is_null($quantity)) {
            throw new \InvalidArgumentException('non-nullable quantity cannot be null');
        }
        if ((mb_strlen($quantity) > 5)) {
            throw new \InvalidArgumentException('invalid length for $quantity when calling PackageServiceOptionsHazMat., must be smaller than or equal to 5.');
        }
        if ((mb_strlen($quantity) < 1)) {
            throw new \InvalidArgumentException('invalid length for $quantity when calling PackageServiceOptionsHazMat., must be bigger than or equal to 1.');
        }

        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets uom
     *
     * @return string|null
     */
    public function getUom()
    {
        return $this->container['uom'];
    }

    /**
     * Sets uom
     *
     * @param string|null $uom Required if CommodityRegulatedLevelCode = LQ, EQ or FR. The unit of measure used for the mass capacity of the regulated good.   For Example: ml, L, g, mg, kg, cylinder, pound, pint, quart, gallon, ounce etc.
     *
     * @return self
     */
    public function setUom($uom)
    {
        if (is_null($uom)) {
            throw new \InvalidArgumentException('non-nullable uom cannot be null');
        }
        if ((mb_strlen($uom) > 10)) {
            throw new \InvalidArgumentException('invalid length for $uom when calling PackageServiceOptionsHazMat., must be smaller than or equal to 10.');
        }
        if ((mb_strlen($uom) < 1)) {
            throw new \InvalidArgumentException('invalid length for $uom when calling PackageServiceOptionsHazMat., must be bigger than or equal to 1.');
        }

        $this->container['uom'] = $uom;

        return $this;
    }

    /**
     * Gets packaging_type
     *
     * @return string|null
     */
    public function getPackagingType()
    {
        return $this->container['packaging_type'];
    }

    /**
     * Sets packaging_type
     *
     * @param string|null $packaging_type The type of package used to contain the regulated good. (Ex: Fiberboard Box). Required if CommodityRegulatedLevelCode = LQ or FR.   Ex. FIBERBOARD BOX, WOOD(EN) BOX, PLASTIC JERRICAN, METAL BOX, STEEL DRUM, OTHER, PLASTIC BOX, PLASTIC DRUM, STYROFOAM BOX, CYLINDERS, ENVIROTAINER, PLYWOOD BOX, ALUMINUM DRUM, ALUMINUM CYLINDERS, PLASTIC PAIL, PLYWOOD DRUM, FIBER DRUM, STEEL JERRICAN, ALUMINUM JERRICAN, STEEL BOX, CARTON, ALUMINUM BOX
     *
     * @return self
     */
    public function setPackagingType($packaging_type)
    {
        if (is_null($packaging_type)) {
            throw new \InvalidArgumentException('non-nullable packaging_type cannot be null');
        }
        if ((mb_strlen($packaging_type) > 255)) {
            throw new \InvalidArgumentException('invalid length for $packaging_type when calling PackageServiceOptionsHazMat., must be smaller than or equal to 255.');
        }
        if ((mb_strlen($packaging_type) < 1)) {
            throw new \InvalidArgumentException('invalid length for $packaging_type when calling PackageServiceOptionsHazMat., must be bigger than or equal to 1.');
        }

        $this->container['packaging_type'] = $packaging_type;

        return $this;
    }

    /**
     * Gets id_number
     *
     * @return string|null
     */
    public function getIdNumber()
    {
        return $this->container['id_number'];
    }

    /**
     * Sets id_number
     *
     * @param string|null $id_number This is the ID number (UN/NA/ID) for the specified commodity.  Required if CommodityRegulatedLevelCode = LR, LQ or FR and if the field applies to the material by regulation.  UN/NA/ID Identification Number assigned to the specified regulated good. (Include the UN/NA/ID as part of the entry).
     *
     * @return self
     */
    public function setIdNumber($id_number)
    {
        if (is_null($id_number)) {
            throw new \InvalidArgumentException('non-nullable id_number cannot be null');
        }
        if ((mb_strlen($id_number) > 6)) {
            throw new \InvalidArgumentException('invalid length for $id_number when calling PackageServiceOptionsHazMat., must be smaller than or equal to 6.');
        }
        if ((mb_strlen($id_number) < 1)) {
            throw new \InvalidArgumentException('invalid length for $id_number when calling PackageServiceOptionsHazMat., must be bigger than or equal to 1.');
        }

        $this->container['id_number'] = $id_number;

        return $this;
    }

    /**
     * Gets proper_shipping_name
     *
     * @return string
     */
    public function getProperShippingName()
    {
        return $this->container['proper_shipping_name'];
    }

    /**
     * Sets proper_shipping_name
     *
     * @param string $proper_shipping_name The Proper Shipping Name assigned by ADR, CFR or IATA. Required if CommodityRegulatedLevelCode = LR, LQ or FR.
     *
     * @return self
     */
    public function setProperShippingName($proper_shipping_name)
    {
        if (is_null($proper_shipping_name)) {
            throw new \InvalidArgumentException('non-nullable proper_shipping_name cannot be null');
        }
        if ((mb_strlen($proper_shipping_name) > 150)) {
            throw new \InvalidArgumentException('invalid length for $proper_shipping_name when calling PackageServiceOptionsHazMat., must be smaller than or equal to 150.');
        }
        if ((mb_strlen($proper_shipping_name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $proper_shipping_name when calling PackageServiceOptionsHazMat., must be bigger than or equal to 1.');
        }

        $this->container['proper_shipping_name'] = $proper_shipping_name;

        return $this;
    }

    /**
     * Gets additional_description
     *
     * @return string|null
     */
    public function getAdditionalDescription()
    {
        return $this->container['additional_description'];
    }

    /**
     * Sets additional_description
     *
     * @param string|null $additional_description Additional remarks or special provision information. Recommended if CommodityRegulatedLevelCode = LQ or FR and if the field applies to the material by regulation.  Additional information that may be required by regulation about a hazardous material, such as, 'Limited Quantity', DOT-SP numbers, EX numbers.
     *
     * @return self
     */
    public function setAdditionalDescription($additional_description)
    {
        if (is_null($additional_description)) {
            throw new \InvalidArgumentException('non-nullable additional_description cannot be null');
        }
        if ((mb_strlen($additional_description) > 255)) {
            throw new \InvalidArgumentException('invalid length for $additional_description when calling PackageServiceOptionsHazMat., must be smaller than or equal to 255.');
        }
        if ((mb_strlen($additional_description) < 1)) {
            throw new \InvalidArgumentException('invalid length for $additional_description when calling PackageServiceOptionsHazMat., must be bigger than or equal to 1.');
        }

        $this->container['additional_description'] = $additional_description;

        return $this;
    }

    /**
     * Gets packaging_group_type
     *
     * @return string|null
     */
    public function getPackagingGroupType()
    {
        return $this->container['packaging_group_type'];
    }

    /**
     * Sets packaging_group_type
     *
     * @param string|null $packaging_group_type This is the packing group category associated to the specified commodity. Recommended if CommodityRegulatedLevelCode = LQ or FR and if the field applies to the material by regulation. Must be shown in Roman Numerals.   Valid values: I II III blank
     *
     * @return self
     */
    public function setPackagingGroupType($packaging_group_type)
    {
        if (is_null($packaging_group_type)) {
            throw new \InvalidArgumentException('non-nullable packaging_group_type cannot be null');
        }
        if ((mb_strlen($packaging_group_type) > 5)) {
            throw new \InvalidArgumentException('invalid length for $packaging_group_type when calling PackageServiceOptionsHazMat., must be smaller than or equal to 5.');
        }
        if ((mb_strlen($packaging_group_type) < 1)) {
            throw new \InvalidArgumentException('invalid length for $packaging_group_type when calling PackageServiceOptionsHazMat., must be bigger than or equal to 1.');
        }

        $this->container['packaging_group_type'] = $packaging_group_type;

        return $this;
    }

    /**
     * Gets packaging_instruction_code
     *
     * @return string|null
     */
    public function getPackagingInstructionCode()
    {
        return $this->container['packaging_instruction_code'];
    }

    /**
     * Sets packaging_instruction_code
     *
     * @param string|null $packaging_instruction_code The packing instructions related to the chemical record. Required if CommodityRegulatedLevelCode = LQ or FR and if the field applies to the material by regulation.
     *
     * @return self
     */
    public function setPackagingInstructionCode($packaging_instruction_code)
    {
        if (is_null($packaging_instruction_code)) {
            throw new \InvalidArgumentException('non-nullable packaging_instruction_code cannot be null');
        }
        if ((mb_strlen($packaging_instruction_code) > 4)) {
            throw new \InvalidArgumentException('invalid length for $packaging_instruction_code when calling PackageServiceOptionsHazMat., must be smaller than or equal to 4.');
        }
        if ((mb_strlen($packaging_instruction_code) < 1)) {
            throw new \InvalidArgumentException('invalid length for $packaging_instruction_code when calling PackageServiceOptionsHazMat., must be bigger than or equal to 1.');
        }

        $this->container['packaging_instruction_code'] = $packaging_instruction_code;

        return $this;
    }

    /**
     * Gets emergency_phone
     *
     * @return string|null
     */
    public function getEmergencyPhone()
    {
        return $this->container['emergency_phone'];
    }

    /**
     * Sets emergency_phone
     *
     * @param string|null $emergency_phone 24 Hour Emergency Phone Number of the shipper. Valid values for this field are (0) through (9) with trailing blanks. For numbers within the U.S., the layout is 1, area code, 7-digit number. For all other countries or territories the layout is country or territory code, area code, number.                        The following are restricted in the phone number   period '.', dash '-', plus sign '+' and conventional parentheses '(' and ')', 'EXT' or 'OPT'
     *
     * @return self
     */
    public function setEmergencyPhone($emergency_phone)
    {
        if (is_null($emergency_phone)) {
            throw new \InvalidArgumentException('non-nullable emergency_phone cannot be null');
        }
        if ((mb_strlen($emergency_phone) > 25)) {
            throw new \InvalidArgumentException('invalid length for $emergency_phone when calling PackageServiceOptionsHazMat., must be smaller than or equal to 25.');
        }
        if ((mb_strlen($emergency_phone) < 1)) {
            throw new \InvalidArgumentException('invalid length for $emergency_phone when calling PackageServiceOptionsHazMat., must be bigger than or equal to 1.');
        }

        $this->container['emergency_phone'] = $emergency_phone;

        return $this;
    }

    /**
     * Gets emergency_contact
     *
     * @return string|null
     */
    public function getEmergencyContact()
    {
        return $this->container['emergency_contact'];
    }

    /**
     * Sets emergency_contact
     *
     * @param string|null $emergency_contact The emergency information, contact name and/or contract number, required to be communicated when a call is placed to the EmergencyPhoneNumber. The information is required if there is a value in the EmergencyPhoneNumber field above and the shipment is with a US50 or PR origin and/or destination and the RegulationSet is IATA.
     *
     * @return self
     */
    public function setEmergencyContact($emergency_contact)
    {
        if (is_null($emergency_contact)) {
            throw new \InvalidArgumentException('non-nullable emergency_contact cannot be null');
        }
        if ((mb_strlen($emergency_contact) > 35)) {
            throw new \InvalidArgumentException('invalid length for $emergency_contact when calling PackageServiceOptionsHazMat., must be smaller than or equal to 35.');
        }
        if ((mb_strlen($emergency_contact) < 1)) {
            throw new \InvalidArgumentException('invalid length for $emergency_contact when calling PackageServiceOptionsHazMat., must be bigger than or equal to 1.');
        }

        $this->container['emergency_contact'] = $emergency_contact;

        return $this;
    }

    /**
     * Gets reportable_quantity
     *
     * @return string|null
     */
    public function getReportableQuantity()
    {
        return $this->container['reportable_quantity'];
    }

    /**
     * Sets reportable_quantity
     *
     * @param string|null $reportable_quantity Recommended if CommodityRegulatedLevelCode = LQ or FR and if the field applies to the material by regulation. If reportable quantity is met, 'RQ' should be entered.
     *
     * @return self
     */
    public function setReportableQuantity($reportable_quantity)
    {
        if (is_null($reportable_quantity)) {
            throw new \InvalidArgumentException('non-nullable reportable_quantity cannot be null');
        }
        if ((mb_strlen($reportable_quantity) > 2)) {
            throw new \InvalidArgumentException('invalid length for $reportable_quantity when calling PackageServiceOptionsHazMat., must be smaller than or equal to 2.');
        }
        if ((mb_strlen($reportable_quantity) < 1)) {
            throw new \InvalidArgumentException('invalid length for $reportable_quantity when calling PackageServiceOptionsHazMat., must be bigger than or equal to 1.');
        }

        $this->container['reportable_quantity'] = $reportable_quantity;

        return $this;
    }

    /**
     * Gets regulation_set
     *
     * @return string
     */
    public function getRegulationSet()
    {
        return $this->container['regulation_set'];
    }

    /**
     * Sets regulation_set
     *
     * @param string $regulation_set The Regulatory set associated with every regulated shipment. It must be same across the shipment.  Valid values:  ADR = Europe to Europe Ground Movement  CFR = HazMat regulated by US Dept. of Transportation within the U.S. or ground shipments to Canada  IATA= Worldwide Air movement  TDG= Canada to Canada ground movement or Canada to U.S. standard movement.  Valid values are ADR, CFR, IATA and TDG. For multiple Chemical Records per package or multiple packages containing different RegulationSet, RegulationSet of first Chemical Record would be considered for validating and rating the entire shipment.
     *
     * @return self
     */
    public function setRegulationSet($regulation_set)
    {
        if (is_null($regulation_set)) {
            throw new \InvalidArgumentException('non-nullable regulation_set cannot be null');
        }
        if ((mb_strlen($regulation_set) > 4)) {
            throw new \InvalidArgumentException('invalid length for $regulation_set when calling PackageServiceOptionsHazMat., must be smaller than or equal to 4.');
        }
        if ((mb_strlen($regulation_set) < 3)) {
            throw new \InvalidArgumentException('invalid length for $regulation_set when calling PackageServiceOptionsHazMat., must be bigger than or equal to 3.');
        }

        $this->container['regulation_set'] = $regulation_set;

        return $this;
    }

    /**
     * Gets transportation_mode
     *
     * @return string
     */
    public function getTransportationMode()
    {
        return $this->container['transportation_mode'];
    }

    /**
     * Sets transportation_mode
     *
     * @param string $transportation_mode Not applicable for ADR regulation set. Required for any other regulation set. Declares that a package was prepared according to ground passenger aircraft or cargo aircraft only.  Valid values:  Highway=Highway  Ground=Ground  PAX=Passenger Aircraft  Passenger Aircraft=Passenger Aircraft  CAO=Cargo Aircraft Only  Cargo Aircraft Only=Cargo Aircraft Only  Valid entries include: Highway, Ground, PAX, Passenger Aircraft, CAO and Cargo Aircraft Only.
     *
     * @return self
     */
    public function setTransportationMode($transportation_mode)
    {
        if (is_null($transportation_mode)) {
            throw new \InvalidArgumentException('non-nullable transportation_mode cannot be null');
        }
        if ((mb_strlen($transportation_mode) > 30)) {
            throw new \InvalidArgumentException('invalid length for $transportation_mode when calling PackageServiceOptionsHazMat., must be smaller than or equal to 30.');
        }
        if ((mb_strlen($transportation_mode) < 3)) {
            throw new \InvalidArgumentException('invalid length for $transportation_mode when calling PackageServiceOptionsHazMat., must be bigger than or equal to 3.');
        }

        $this->container['transportation_mode'] = $transportation_mode;

        return $this;
    }

    /**
     * Gets commodity_regulated_level_code
     *
     * @return string|null
     */
    public function getCommodityRegulatedLevelCode()
    {
        return $this->container['commodity_regulated_level_code'];
    }

    /**
     * Sets commodity_regulated_level_code
     *
     * @param string|null $commodity_regulated_level_code Indicates the type of commodity - Fully Regulated (FR), Limited Quantity (LQ), Excepted Quantity (EQ) or Lightly Regulated (LR).  Valid values are LR, FR, LQ and EQ. Required for subversion 1701 or greater. LR and EQ are validated if subversion is 1701 or greater. FR, LQ will be validated if subversion is 1807 or greater
     *
     * @return self
     */
    public function setCommodityRegulatedLevelCode($commodity_regulated_level_code)
    {
        if (is_null($commodity_regulated_level_code)) {
            throw new \InvalidArgumentException('non-nullable commodity_regulated_level_code cannot be null');
        }
        if ((mb_strlen($commodity_regulated_level_code) > 2)) {
            throw new \InvalidArgumentException('invalid length for $commodity_regulated_level_code when calling PackageServiceOptionsHazMat., must be smaller than or equal to 2.');
        }
        if ((mb_strlen($commodity_regulated_level_code) < 2)) {
            throw new \InvalidArgumentException('invalid length for $commodity_regulated_level_code when calling PackageServiceOptionsHazMat., must be bigger than or equal to 2.');
        }

        $this->container['commodity_regulated_level_code'] = $commodity_regulated_level_code;

        return $this;
    }

    /**
     * Gets transport_category
     *
     * @return string|null
     */
    public function getTransportCategory()
    {
        return $this->container['transport_category'];
    }

    /**
     * Sets transport_category
     *
     * @param string|null $transport_category Transport Category.  Valid values are 0 to 4.
     *
     * @return self
     */
    public function setTransportCategory($transport_category)
    {
        if (is_null($transport_category)) {
            throw new \InvalidArgumentException('non-nullable transport_category cannot be null');
        }
        if ((mb_strlen($transport_category) > 1)) {
            throw new \InvalidArgumentException('invalid length for $transport_category when calling PackageServiceOptionsHazMat., must be smaller than or equal to 1.');
        }
        if ((mb_strlen($transport_category) < 1)) {
            throw new \InvalidArgumentException('invalid length for $transport_category when calling PackageServiceOptionsHazMat., must be bigger than or equal to 1.');
        }

        $this->container['transport_category'] = $transport_category;

        return $this;
    }

    /**
     * Gets tunnel_restriction_code
     *
     * @return string|null
     */
    public function getTunnelRestrictionCode()
    {
        return $this->container['tunnel_restriction_code'];
    }

    /**
     * Sets tunnel_restriction_code
     *
     * @param string|null $tunnel_restriction_code Defines what is restricted to pass through a tunnel.
     *
     * @return self
     */
    public function setTunnelRestrictionCode($tunnel_restriction_code)
    {
        if (is_null($tunnel_restriction_code)) {
            throw new \InvalidArgumentException('non-nullable tunnel_restriction_code cannot be null');
        }
        if ((mb_strlen($tunnel_restriction_code) > 10)) {
            throw new \InvalidArgumentException('invalid length for $tunnel_restriction_code when calling PackageServiceOptionsHazMat., must be smaller than or equal to 10.');
        }
        if ((mb_strlen($tunnel_restriction_code) < 1)) {
            throw new \InvalidArgumentException('invalid length for $tunnel_restriction_code when calling PackageServiceOptionsHazMat., must be bigger than or equal to 1.');
        }

        $this->container['tunnel_restriction_code'] = $tunnel_restriction_code;

        return $this;
    }

    /**
     * Gets chemical_record_identifier
     *
     * @return string|null
     */
    public function getChemicalRecordIdentifier()
    {
        return $this->container['chemical_record_identifier'];
    }

    /**
     * Sets chemical_record_identifier
     *
     * @param string|null $chemical_record_identifier Identifies the Chemical Record.  Required if SubVersion is greater than or equal to 1701.
     *
     * @return self
     */
    public function setChemicalRecordIdentifier($chemical_record_identifier)
    {
        if (is_null($chemical_record_identifier)) {
            throw new \InvalidArgumentException('non-nullable chemical_record_identifier cannot be null');
        }
        if ((mb_strlen($chemical_record_identifier) > 3)) {
            throw new \InvalidArgumentException('invalid length for $chemical_record_identifier when calling PackageServiceOptionsHazMat., must be smaller than or equal to 3.');
        }
        if ((mb_strlen($chemical_record_identifier) < 1)) {
            throw new \InvalidArgumentException('invalid length for $chemical_record_identifier when calling PackageServiceOptionsHazMat., must be bigger than or equal to 1.');
        }

        $this->container['chemical_record_identifier'] = $chemical_record_identifier;

        return $this;
    }

    /**
     * Gets local_technical_name
     *
     * @return string|null
     */
    public function getLocalTechnicalName()
    {
        return $this->container['local_technical_name'];
    }

    /**
     * Sets local_technical_name
     *
     * @param string|null $local_technical_name Technical name in local language.
     *
     * @return self
     */
    public function setLocalTechnicalName($local_technical_name)
    {
        if (is_null($local_technical_name)) {
            throw new \InvalidArgumentException('non-nullable local_technical_name cannot be null');
        }
        if ((mb_strlen($local_technical_name) > 200)) {
            throw new \InvalidArgumentException('invalid length for $local_technical_name when calling PackageServiceOptionsHazMat., must be smaller than or equal to 200.');
        }
        if ((mb_strlen($local_technical_name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $local_technical_name when calling PackageServiceOptionsHazMat., must be bigger than or equal to 1.');
        }

        $this->container['local_technical_name'] = $local_technical_name;

        return $this;
    }

    /**
     * Gets local_proper_shipping_name
     *
     * @return string|null
     */
    public function getLocalProperShippingName()
    {
        return $this->container['local_proper_shipping_name'];
    }

    /**
     * Sets local_proper_shipping_name
     *
     * @param string|null $local_proper_shipping_name Proper shipping name in local langauge.
     *
     * @return self
     */
    public function setLocalProperShippingName($local_proper_shipping_name)
    {
        if (is_null($local_proper_shipping_name)) {
            throw new \InvalidArgumentException('non-nullable local_proper_shipping_name cannot be null');
        }
        if ((mb_strlen($local_proper_shipping_name) > 150)) {
            throw new \InvalidArgumentException('invalid length for $local_proper_shipping_name when calling PackageServiceOptionsHazMat., must be smaller than or equal to 150.');
        }
        if ((mb_strlen($local_proper_shipping_name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $local_proper_shipping_name when calling PackageServiceOptionsHazMat., must be bigger than or equal to 1.');
        }

        $this->container['local_proper_shipping_name'] = $local_proper_shipping_name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


