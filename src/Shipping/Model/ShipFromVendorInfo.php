<?php
/**
 * ShipFromVendorInfo
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  AntibodiesOnline\UpsApi\Shipping
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Ship
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace AntibodiesOnline\UpsApi\Shipping\Model;

use \ArrayAccess;
use \AntibodiesOnline\UpsApi\Shipping\ObjectSerializer;

/**
 * ShipFromVendorInfo Class Doc Comment
 *
 * @category Class
 * @description Vendor Information Container
 * @package  AntibodiesOnline\UpsApi\Shipping
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ShipFromVendorInfo implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ShipFrom_VendorInfo';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'vendor_collect_id_type_code' => 'string',
        'vendor_collect_id_number' => 'string',
        'consignee_type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'vendor_collect_id_type_code' => null,
        'vendor_collect_id_number' => null,
        'consignee_type' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'vendor_collect_id_type_code' => false,
		'vendor_collect_id_number' => false,
		'consignee_type' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'vendor_collect_id_type_code' => 'VendorCollectIDTypeCode',
        'vendor_collect_id_number' => 'VendorCollectIDNumber',
        'consignee_type' => 'ConsigneeType'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'vendor_collect_id_type_code' => 'setVendorCollectIdTypeCode',
        'vendor_collect_id_number' => 'setVendorCollectIdNumber',
        'consignee_type' => 'setConsigneeType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'vendor_collect_id_type_code' => 'getVendorCollectIdTypeCode',
        'vendor_collect_id_number' => 'getVendorCollectIdNumber',
        'consignee_type' => 'getConsigneeType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('vendor_collect_id_type_code', $data ?? [], null);
        $this->setIfExists('vendor_collect_id_number', $data ?? [], null);
        $this->setIfExists('consignee_type', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['vendor_collect_id_type_code'] === null) {
            $invalidProperties[] = "'vendor_collect_id_type_code' can't be null";
        }
        if ((mb_strlen($this->container['vendor_collect_id_type_code']) > 4)) {
            $invalidProperties[] = "invalid value for 'vendor_collect_id_type_code', the character length must be smaller than or equal to 4.";
        }

        if ((mb_strlen($this->container['vendor_collect_id_type_code']) < 1)) {
            $invalidProperties[] = "invalid value for 'vendor_collect_id_type_code', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['vendor_collect_id_number'] === null) {
            $invalidProperties[] = "'vendor_collect_id_number' can't be null";
        }
        if ((mb_strlen($this->container['vendor_collect_id_number']) > 35)) {
            $invalidProperties[] = "invalid value for 'vendor_collect_id_number', the character length must be smaller than or equal to 35.";
        }

        if ((mb_strlen($this->container['vendor_collect_id_number']) < 1)) {
            $invalidProperties[] = "invalid value for 'vendor_collect_id_number', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['consignee_type']) && (mb_strlen($this->container['consignee_type']) > 2)) {
            $invalidProperties[] = "invalid value for 'consignee_type', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['consignee_type']) && (mb_strlen($this->container['consignee_type']) < 2)) {
            $invalidProperties[] = "invalid value for 'consignee_type', the character length must be bigger than or equal to 2.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets vendor_collect_id_type_code
     *
     * @return string
     */
    public function getVendorCollectIdTypeCode()
    {
        return $this->container['vendor_collect_id_type_code'];
    }

    /**
     * Sets vendor_collect_id_type_code
     *
     * @param string $vendor_collect_id_type_code Code that identifies the type of Vendor Collect ID Number                                                                   Valid Values                                                                   0356 = IOSS                                                 0357 = VOEC                                                 0358 = HMRC                                                    Vendor Collect ID Number type code will be printed on commercial invoice if present.
     *
     * @return self
     */
    public function setVendorCollectIdTypeCode($vendor_collect_id_type_code)
    {
        if (is_null($vendor_collect_id_type_code)) {
            throw new \InvalidArgumentException('non-nullable vendor_collect_id_type_code cannot be null');
        }
        if ((mb_strlen($vendor_collect_id_type_code) > 4)) {
            throw new \InvalidArgumentException('invalid length for $vendor_collect_id_type_code when calling ShipFromVendorInfo., must be smaller than or equal to 4.');
        }
        if ((mb_strlen($vendor_collect_id_type_code) < 1)) {
            throw new \InvalidArgumentException('invalid length for $vendor_collect_id_type_code when calling ShipFromVendorInfo., must be bigger than or equal to 1.');
        }

        $this->container['vendor_collect_id_type_code'] = $vendor_collect_id_type_code;

        return $this;
    }

    /**
     * Gets vendor_collect_id_number
     *
     * @return string
     */
    public function getVendorCollectIdNumber()
    {
        return $this->container['vendor_collect_id_number'];
    }

    /**
     * Sets vendor_collect_id_number
     *
     * @param string $vendor_collect_id_number Shipper's VAT Tax collection registration number to be entered by Shipper at time of shipment creation.   Presence of this number as part of the shipment information implies the shipper has collected/paid the required VAT tax (outside of UPS/UPS systems).  Vendor Colect ID Number will be printed on commercial invoice if present.                                   Sample Values:   IMDEU1234567 (IOSS #),  VOEC1234567 (VOEC #),  GB1234567 (HMRC #)     Required if the shipment is subject to Vendor Collect ID collection
     *
     * @return self
     */
    public function setVendorCollectIdNumber($vendor_collect_id_number)
    {
        if (is_null($vendor_collect_id_number)) {
            throw new \InvalidArgumentException('non-nullable vendor_collect_id_number cannot be null');
        }
        if ((mb_strlen($vendor_collect_id_number) > 35)) {
            throw new \InvalidArgumentException('invalid length for $vendor_collect_id_number when calling ShipFromVendorInfo., must be smaller than or equal to 35.');
        }
        if ((mb_strlen($vendor_collect_id_number) < 1)) {
            throw new \InvalidArgumentException('invalid length for $vendor_collect_id_number when calling ShipFromVendorInfo., must be bigger than or equal to 1.');
        }

        $this->container['vendor_collect_id_number'] = $vendor_collect_id_number;

        return $this;
    }

    /**
     * Gets consignee_type
     *
     * @return string|null
     */
    public function getConsigneeType()
    {
        return $this->container['consignee_type'];
    }

    /**
     * Sets consignee_type
     *
     * @param string|null $consignee_type Consignee Type. 01 = Business  02 = Consumer NA = Not Applicable
     *
     * @return self
     */
    public function setConsigneeType($consignee_type)
    {
        if (is_null($consignee_type)) {
            throw new \InvalidArgumentException('non-nullable consignee_type cannot be null');
        }
        if ((mb_strlen($consignee_type) > 2)) {
            throw new \InvalidArgumentException('invalid length for $consignee_type when calling ShipFromVendorInfo., must be smaller than or equal to 2.');
        }
        if ((mb_strlen($consignee_type) < 2)) {
            throw new \InvalidArgumentException('invalid length for $consignee_type when calling ShipFromVendorInfo., must be bigger than or equal to 2.');
        }

        $this->container['consignee_type'] = $consignee_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


