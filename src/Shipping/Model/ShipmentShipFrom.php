<?php
/**
 * ShipmentShipFrom
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  AntibodiesOnline\UpsApi\Shipping
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Ship
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace AntibodiesOnline\UpsApi\Shipping\Model;

use \ArrayAccess;
use \AntibodiesOnline\UpsApi\Shipping\ObjectSerializer;

/**
 * ShipmentShipFrom Class Doc Comment
 *
 * @category Class
 * @description Ship From Container.  Required for return shipment.   Required if pickup location is different from the shipper&#39;s address.
 * @package  AntibodiesOnline\UpsApi\Shipping
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ShipmentShipFrom implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Shipment_ShipFrom';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'attention_name' => 'string',
        'company_displayable_name' => 'string',
        'tax_identification_number' => 'string',
        'tax_id_type' => '\AntibodiesOnline\UpsApi\Shipping\Model\ShipFromTaxIDType',
        'phone' => '\AntibodiesOnline\UpsApi\Shipping\Model\ShipFromPhone',
        'fax_number' => 'string',
        'address' => '\AntibodiesOnline\UpsApi\Shipping\Model\ShipFromAddress',
        'vendor_info' => '\AntibodiesOnline\UpsApi\Shipping\Model\ShipFromVendorInfo'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'attention_name' => null,
        'company_displayable_name' => null,
        'tax_identification_number' => null,
        'tax_id_type' => null,
        'phone' => null,
        'fax_number' => null,
        'address' => null,
        'vendor_info' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'name' => false,
		'attention_name' => false,
		'company_displayable_name' => false,
		'tax_identification_number' => false,
		'tax_id_type' => false,
		'phone' => false,
		'fax_number' => false,
		'address' => false,
		'vendor_info' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'Name',
        'attention_name' => 'AttentionName',
        'company_displayable_name' => 'CompanyDisplayableName',
        'tax_identification_number' => 'TaxIdentificationNumber',
        'tax_id_type' => 'TaxIDType',
        'phone' => 'Phone',
        'fax_number' => 'FaxNumber',
        'address' => 'Address',
        'vendor_info' => 'VendorInfo'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'attention_name' => 'setAttentionName',
        'company_displayable_name' => 'setCompanyDisplayableName',
        'tax_identification_number' => 'setTaxIdentificationNumber',
        'tax_id_type' => 'setTaxIdType',
        'phone' => 'setPhone',
        'fax_number' => 'setFaxNumber',
        'address' => 'setAddress',
        'vendor_info' => 'setVendorInfo'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'attention_name' => 'getAttentionName',
        'company_displayable_name' => 'getCompanyDisplayableName',
        'tax_identification_number' => 'getTaxIdentificationNumber',
        'tax_id_type' => 'getTaxIdType',
        'phone' => 'getPhone',
        'fax_number' => 'getFaxNumber',
        'address' => 'getAddress',
        'vendor_info' => 'getVendorInfo'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('attention_name', $data ?? [], null);
        $this->setIfExists('company_displayable_name', $data ?? [], null);
        $this->setIfExists('tax_identification_number', $data ?? [], null);
        $this->setIfExists('tax_id_type', $data ?? [], null);
        $this->setIfExists('phone', $data ?? [], null);
        $this->setIfExists('fax_number', $data ?? [], null);
        $this->setIfExists('address', $data ?? [], null);
        $this->setIfExists('vendor_info', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ((mb_strlen($this->container['name']) > 35)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 35.";
        }

        if ((mb_strlen($this->container['name']) < 1)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['attention_name']) && (mb_strlen($this->container['attention_name']) > 35)) {
            $invalidProperties[] = "invalid value for 'attention_name', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['attention_name']) && (mb_strlen($this->container['attention_name']) < 1)) {
            $invalidProperties[] = "invalid value for 'attention_name', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['company_displayable_name']) && (mb_strlen($this->container['company_displayable_name']) > 35)) {
            $invalidProperties[] = "invalid value for 'company_displayable_name', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['company_displayable_name']) && (mb_strlen($this->container['company_displayable_name']) < 1)) {
            $invalidProperties[] = "invalid value for 'company_displayable_name', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['tax_identification_number']) && (mb_strlen($this->container['tax_identification_number']) > 15)) {
            $invalidProperties[] = "invalid value for 'tax_identification_number', the character length must be smaller than or equal to 15.";
        }

        if (!is_null($this->container['tax_identification_number']) && (mb_strlen($this->container['tax_identification_number']) < 1)) {
            $invalidProperties[] = "invalid value for 'tax_identification_number', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['fax_number']) && (mb_strlen($this->container['fax_number']) > 15)) {
            $invalidProperties[] = "invalid value for 'fax_number', the character length must be smaller than or equal to 15.";
        }

        if (!is_null($this->container['fax_number']) && (mb_strlen($this->container['fax_number']) < 1)) {
            $invalidProperties[] = "invalid value for 'fax_number', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['address'] === null) {
            $invalidProperties[] = "'address' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The ship from location's name or company name.  35 characters are accepted, but for return Shipment only 30 characters will be printed on the label.  Required if ShipFrom tag is in the XML.
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        if ((mb_strlen($name) > 35)) {
            throw new \InvalidArgumentException('invalid length for $name when calling ShipmentShipFrom., must be smaller than or equal to 35.');
        }
        if ((mb_strlen($name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $name when calling ShipmentShipFrom., must be bigger than or equal to 1.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets attention_name
     *
     * @return string|null
     */
    public function getAttentionName()
    {
        return $this->container['attention_name'];
    }

    /**
     * Sets attention_name
     *
     * @param string|null $attention_name The ship from Attention name.  35 characters are accepted, but for return Shipment only 30 characters will be printed on the label.  Required if ShipFrom tag is in the XML and Invoice or CO International forms is requested. If not present, will default to the Shipper Attention Name.
     *
     * @return self
     */
    public function setAttentionName($attention_name)
    {
        if (is_null($attention_name)) {
            throw new \InvalidArgumentException('non-nullable attention_name cannot be null');
        }
        if ((mb_strlen($attention_name) > 35)) {
            throw new \InvalidArgumentException('invalid length for $attention_name when calling ShipmentShipFrom., must be smaller than or equal to 35.');
        }
        if ((mb_strlen($attention_name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $attention_name when calling ShipmentShipFrom., must be bigger than or equal to 1.');
        }

        $this->container['attention_name'] = $attention_name;

        return $this;
    }

    /**
     * Gets company_displayable_name
     *
     * @return string|null
     */
    public function getCompanyDisplayableName()
    {
        return $this->container['company_displayable_name'];
    }

    /**
     * Sets company_displayable_name
     *
     * @param string|null $company_displayable_name Not applicable for ShipFrom.
     *
     * @return self
     */
    public function setCompanyDisplayableName($company_displayable_name)
    {
        if (is_null($company_displayable_name)) {
            throw new \InvalidArgumentException('non-nullable company_displayable_name cannot be null');
        }
        if ((mb_strlen($company_displayable_name) > 35)) {
            throw new \InvalidArgumentException('invalid length for $company_displayable_name when calling ShipmentShipFrom., must be smaller than or equal to 35.');
        }
        if ((mb_strlen($company_displayable_name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $company_displayable_name when calling ShipmentShipFrom., must be bigger than or equal to 1.');
        }

        $this->container['company_displayable_name'] = $company_displayable_name;

        return $this;
    }

    /**
     * Gets tax_identification_number
     *
     * @return string|null
     */
    public function getTaxIdentificationNumber()
    {
        return $this->container['tax_identification_number'];
    }

    /**
     * Sets tax_identification_number
     *
     * @param string|null $tax_identification_number Company's Tax Identification Number at the pick up location.  Conditionally required if EEI form (International forms) is requested.  Applies to EEI Form only.
     *
     * @return self
     */
    public function setTaxIdentificationNumber($tax_identification_number)
    {
        if (is_null($tax_identification_number)) {
            throw new \InvalidArgumentException('non-nullable tax_identification_number cannot be null');
        }
        if ((mb_strlen($tax_identification_number) > 15)) {
            throw new \InvalidArgumentException('invalid length for $tax_identification_number when calling ShipmentShipFrom., must be smaller than or equal to 15.');
        }
        if ((mb_strlen($tax_identification_number) < 1)) {
            throw new \InvalidArgumentException('invalid length for $tax_identification_number when calling ShipmentShipFrom., must be bigger than or equal to 1.');
        }

        $this->container['tax_identification_number'] = $tax_identification_number;

        return $this;
    }

    /**
     * Gets tax_id_type
     *
     * @return \AntibodiesOnline\UpsApi\Shipping\Model\ShipFromTaxIDType|null
     */
    public function getTaxIdType()
    {
        return $this->container['tax_id_type'];
    }

    /**
     * Sets tax_id_type
     *
     * @param \AntibodiesOnline\UpsApi\Shipping\Model\ShipFromTaxIDType|null $tax_id_type tax_id_type
     *
     * @return self
     */
    public function setTaxIdType($tax_id_type)
    {
        if (is_null($tax_id_type)) {
            throw new \InvalidArgumentException('non-nullable tax_id_type cannot be null');
        }
        $this->container['tax_id_type'] = $tax_id_type;

        return $this;
    }

    /**
     * Gets phone
     *
     * @return \AntibodiesOnline\UpsApi\Shipping\Model\ShipFromPhone|null
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param \AntibodiesOnline\UpsApi\Shipping\Model\ShipFromPhone|null $phone phone
     *
     * @return self
     */
    public function setPhone($phone)
    {
        if (is_null($phone)) {
            throw new \InvalidArgumentException('non-nullable phone cannot be null');
        }
        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets fax_number
     *
     * @return string|null
     */
    public function getFaxNumber()
    {
        return $this->container['fax_number'];
    }

    /**
     * Sets fax_number
     *
     * @param string|null $fax_number The Ship from fax number.  If Ship from country or territory is US 10 digits allowed, otherwise 1-15 digits allowed.
     *
     * @return self
     */
    public function setFaxNumber($fax_number)
    {
        if (is_null($fax_number)) {
            throw new \InvalidArgumentException('non-nullable fax_number cannot be null');
        }
        if ((mb_strlen($fax_number) > 15)) {
            throw new \InvalidArgumentException('invalid length for $fax_number when calling ShipmentShipFrom., must be smaller than or equal to 15.');
        }
        if ((mb_strlen($fax_number) < 1)) {
            throw new \InvalidArgumentException('invalid length for $fax_number when calling ShipmentShipFrom., must be bigger than or equal to 1.');
        }

        $this->container['fax_number'] = $fax_number;

        return $this;
    }

    /**
     * Gets address
     *
     * @return \AntibodiesOnline\UpsApi\Shipping\Model\ShipFromAddress
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param \AntibodiesOnline\UpsApi\Shipping\Model\ShipFromAddress $address address
     *
     * @return self
     */
    public function setAddress($address)
    {
        if (is_null($address)) {
            throw new \InvalidArgumentException('non-nullable address cannot be null');
        }
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets vendor_info
     *
     * @return \AntibodiesOnline\UpsApi\Shipping\Model\ShipFromVendorInfo|null
     */
    public function getVendorInfo()
    {
        return $this->container['vendor_info'];
    }

    /**
     * Sets vendor_info
     *
     * @param \AntibodiesOnline\UpsApi\Shipping\Model\ShipFromVendorInfo|null $vendor_info vendor_info
     *
     * @return self
     */
    public function setVendorInfo($vendor_info)
    {
        if (is_null($vendor_info)) {
            throw new \InvalidArgumentException('non-nullable vendor_info cannot be null');
        }
        $this->container['vendor_info'] = $vendor_info;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


