<?php
/**
 * PackageHazMatPackageInformation
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  AntibodiesOnline\UpsApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Ship
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace AntibodiesOnline\UpsApi\Shipping;

use \ArrayAccess;
use \AntibodiesOnline\UpsApi\ObjectSerializer;

/**
 * PackageHazMatPackageInformation Class Doc Comment
 *
 * @category Class
 * @description Required when number of hazmat containers in a package is greater than 1. It indicates whether all the hazmat materials are kept in a single box or multiple boxes.  Required when number of hazmat container in a package is greater than 1.
 * @package  AntibodiesOnline\UpsApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PackageHazMatPackageInformation implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Package_HazMatPackageInformation';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'all_packed_in_one_indicator' => 'string',
        'over_packed_indicator' => 'string',
        'q_value' => 'string',
        'outer_packaging_type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'all_packed_in_one_indicator' => null,
        'over_packed_indicator' => null,
        'q_value' => null,
        'outer_packaging_type' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'all_packed_in_one_indicator' => false,
		'over_packed_indicator' => false,
		'q_value' => false,
		'outer_packaging_type' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'all_packed_in_one_indicator' => 'AllPackedInOneIndicator',
        'over_packed_indicator' => 'OverPackedIndicator',
        'q_value' => 'QValue',
        'outer_packaging_type' => 'OuterPackagingType'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'all_packed_in_one_indicator' => 'setAllPackedInOneIndicator',
        'over_packed_indicator' => 'setOverPackedIndicator',
        'q_value' => 'setQValue',
        'outer_packaging_type' => 'setOuterPackagingType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'all_packed_in_one_indicator' => 'getAllPackedInOneIndicator',
        'over_packed_indicator' => 'getOverPackedIndicator',
        'q_value' => 'getQValue',
        'outer_packaging_type' => 'getOuterPackagingType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('all_packed_in_one_indicator', $data ?? [], null);
        $this->setIfExists('over_packed_indicator', $data ?? [], null);
        $this->setIfExists('q_value', $data ?? [], null);
        $this->setIfExists('outer_packaging_type', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['q_value']) && (mb_strlen($this->container['q_value']) > 3)) {
            $invalidProperties[] = "invalid value for 'q_value', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['q_value']) && (mb_strlen($this->container['q_value']) < 3)) {
            $invalidProperties[] = "invalid value for 'q_value', the character length must be bigger than or equal to 3.";
        }

        if (!is_null($this->container['outer_packaging_type']) && (mb_strlen($this->container['outer_packaging_type']) > 255)) {
            $invalidProperties[] = "invalid value for 'outer_packaging_type', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['outer_packaging_type']) && (mb_strlen($this->container['outer_packaging_type']) < 1)) {
            $invalidProperties[] = "invalid value for 'outer_packaging_type', the character length must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets all_packed_in_one_indicator
     *
     * @return string|null
     */
    public function getAllPackedInOneIndicator()
    {
        return $this->container['all_packed_in_one_indicator'];
    }

    /**
     * Sets all_packed_in_one_indicator
     *
     * @param string|null $all_packed_in_one_indicator Presence/Absence Indicator. Any value is ignored. Presence indicates if multiple, different hazmat/chemicals are contained within one box in a package  When number of Hazmat containers in a package is more than one, either AllPackedInOneIndicator or OverPackedIndicator is needed
     *
     * @return self
     */
    public function setAllPackedInOneIndicator($all_packed_in_one_indicator)
    {
        if (is_null($all_packed_in_one_indicator)) {
            throw new \InvalidArgumentException('non-nullable all_packed_in_one_indicator cannot be null');
        }


        $this->container['all_packed_in_one_indicator'] = $all_packed_in_one_indicator;

        return $this;
    }

    /**
     * Gets over_packed_indicator
     *
     * @return string|null
     */
    public function getOverPackedIndicator()
    {
        return $this->container['over_packed_indicator'];
    }

    /**
     * Sets over_packed_indicator
     *
     * @param string|null $over_packed_indicator Presence/Absence Indicator. Any value is ignored. Presence indicates that one or more hazmat/chemicals are in separate boxes in a package.  When number of Hazmat containers in a package is more than one, either AllPackedInOneIndicator or OverPackedIndicator is needed
     *
     * @return self
     */
    public function setOverPackedIndicator($over_packed_indicator)
    {
        if (is_null($over_packed_indicator)) {
            throw new \InvalidArgumentException('non-nullable over_packed_indicator cannot be null');
        }


        $this->container['over_packed_indicator'] = $over_packed_indicator;

        return $this;
    }

    /**
     * Gets q_value
     *
     * @return string|null
     */
    public function getQValue()
    {
        return $this->container['q_value'];
    }

    /**
     * Sets q_value
     *
     * @param string|null $q_value When a HazMat shipment specifies AllPackedInOneIndicator and the regulation set for that shipment is IATA, Ship API must require the shipment to specify a Q-Value with exactly one of the following values: 0.1; 0.2; 0.3; 0.4; 0.5; 0.6; 0.7; 0.8; 0.9; 1.0
     *
     * @return self
     */
    public function setQValue($q_value)
    {
        if (is_null($q_value)) {
            throw new \InvalidArgumentException('non-nullable q_value cannot be null');
        }
        if ((mb_strlen($q_value) > 3)) {
            throw new \InvalidArgumentException('invalid length for $q_value when calling PackageHazMatPackageInformation., must be smaller than or equal to 3.');
        }
        if ((mb_strlen($q_value) < 3)) {
            throw new \InvalidArgumentException('invalid length for $q_value when calling PackageHazMatPackageInformation., must be bigger than or equal to 3.');
        }

        $this->container['q_value'] = $q_value;

        return $this;
    }

    /**
     * Gets outer_packaging_type
     *
     * @return string|null
     */
    public function getOuterPackagingType()
    {
        return $this->container['outer_packaging_type'];
    }

    /**
     * Sets outer_packaging_type
     *
     * @param string|null $outer_packaging_type This field is used for the Outer Hazmat packaging type.  Ex. FIBERBOARD BOX, WOOD(EN) BOX, PLASTIC JERRICAN, METAL BOX, STEEL DRUM, OTHER, PLASTIC BOX, PLASTIC DRUM, STYROFOAM BOX, CYLINDERS, ENVIROTAINER, PLYWOOD BOX, ALUMINUM DRUM, ALUMINUM CYLINDERS, PLASTIC PAIL, PLYWOOD DRUM, FIBER DRUM, STEEL JERRICAN, ALUMINUM JERRICAN, STEEL BOX, CARTON, ALUMINUM BOX
     *
     * @return self
     */
    public function setOuterPackagingType($outer_packaging_type)
    {
        if (is_null($outer_packaging_type)) {
            throw new \InvalidArgumentException('non-nullable outer_packaging_type cannot be null');
        }
        if ((mb_strlen($outer_packaging_type) > 255)) {
            throw new \InvalidArgumentException('invalid length for $outer_packaging_type when calling PackageHazMatPackageInformation., must be smaller than or equal to 255.');
        }
        if ((mb_strlen($outer_packaging_type) < 1)) {
            throw new \InvalidArgumentException('invalid length for $outer_packaging_type when calling PackageHazMatPackageInformation., must be bigger than or equal to 1.');
        }

        $this->container['outer_packaging_type'] = $outer_packaging_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


